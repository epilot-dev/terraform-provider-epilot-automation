// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *FlowDataSourceModel) RefreshFromSharedAutomationFlow(resp *shared.AutomationFlow) {
	r.Actions = nil
	for _, actionsItem := range resp.Actions {
		var actions1 types.String
		actions1Result, _ := json.Marshal(actionsItem)
		actions1 = types.StringValue(string(actions1Result))
		r.Actions = append(r.Actions, actions1)
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	} else {
		r.CreatedAt = types.StringNull()
	}
	r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
	r.Enabled = types.BoolPointerValue(resp.Enabled)
	r.EntitySchema = types.StringPointerValue(resp.EntitySchema)
	r.FlowName = types.StringValue(resp.FlowName)
	r.ID = types.StringPointerValue(resp.ID)
	r.LastUpdatedBy = types.StringPointerValue(resp.LastUpdatedBy)
	r.OrgID = types.StringPointerValue(resp.OrgID)
	if resp.Runs != nil {
		r.Runs = types.NumberValue(big.NewFloat(float64(*resp.Runs)))
	} else {
		r.Runs = types.NumberNull()
	}
	r.SystemFlow = types.BoolPointerValue(resp.SystemFlow)
	r.TriggerConditions = nil
	for _, triggerConditionsItem := range resp.TriggerConditions {
		var triggerConditions1 types.String
		triggerConditions1Result, _ := json.Marshal(triggerConditionsItem)
		triggerConditions1 = types.StringValue(string(triggerConditions1Result))
		r.TriggerConditions = append(r.TriggerConditions, triggerConditions1)
	}
	if len(r.Triggers) > len(resp.Triggers) {
		r.Triggers = r.Triggers[:len(resp.Triggers)]
	}
	for triggersCount, triggersItem := range resp.Triggers {
		var triggers1 AnyTrigger
		if triggersItem.ActivityTrigger != nil {
			triggers1.ActivityTrigger = &ActivityTrigger{}
			triggers1.ActivityTrigger.Configuration.Schema = types.StringPointerValue(triggersItem.ActivityTrigger.Configuration.Schema)
			triggers1.ActivityTrigger.Configuration.Types = nil
			for _, v := range triggersItem.ActivityTrigger.Configuration.Types {
				triggers1.ActivityTrigger.Configuration.Types = append(triggers1.ActivityTrigger.Configuration.Types, types.StringValue(string(v)))
			}
			triggers1.ActivityTrigger.Type = types.StringValue(string(triggersItem.ActivityTrigger.Type))
		}
		if triggersItem.APISubmissionTrigger != nil {
			triggers1.APISubmissionTrigger = &APISubmissionTrigger{}
			triggers1.APISubmissionTrigger.Configuration.SourceID = types.StringPointerValue(triggersItem.APISubmissionTrigger.Configuration.SourceID)
			triggers1.APISubmissionTrigger.Type = types.StringValue(string(triggersItem.APISubmissionTrigger.Type))
		}
		if triggersItem.EntityManualTrigger != nil {
			triggers1.EntityManualTrigger = &EntityManualTrigger{}
			triggers1.EntityManualTrigger.Configuration.Schema = types.StringPointerValue(triggersItem.EntityManualTrigger.Configuration.Schema)
			triggers1.EntityManualTrigger.Type = types.StringValue(string(triggersItem.EntityManualTrigger.Type))
		}
		if triggersItem.EntityOperationTrigger != nil {
			triggers1.EntityOperationTrigger = &EntityOperationTrigger{}
			triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
				triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = append(triggers1.EntityOperationTrigger.Configuration.ExcludeActivities, types.StringValue(v))
			}
			if triggersItem.EntityOperationTrigger.Configuration.FilterConfig == nil {
				triggers1.EntityOperationTrigger.Configuration.FilterConfig = nil
			} else {
				triggers1.EntityOperationTrigger.Configuration.FilterConfig = &FilterConfig{}
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity == nil {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity = nil
				} else {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity = &Activity{}
					for typeVarCount, typeVarItem := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type {
						var typeVar1 EntityOperationTriggerSchemasType
						if typeVarItem.Str != nil {
							typeVar1.Str = types.StringPointerValue(typeVarItem.Str)
						}
						if typeVarItem.AnythingButCondition != nil {
							typeVar1.AnythingButCondition = &AnythingButCondition{}
							typeVar1.AnythingButCondition.AnythingBut = nil
							for _, v := range typeVarItem.AnythingButCondition.AnythingBut {
								typeVar1.AnythingButCondition.AnythingBut = append(typeVar1.AnythingButCondition.AnythingBut, types.StringValue(v))
							}
						}
						if typeVarItem.EqualsIgnoreCaseCondition != nil {
							typeVar1.EqualsIgnoreCaseCondition = &EqualsIgnoreCaseCondition{}
							typeVar1.EqualsIgnoreCaseCondition.EqualsIgnoreCase = types.StringPointerValue(typeVarItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase)
						}
						if typeVarItem.ExistsCondition != nil {
							typeVar1.ExistsCondition = &ExistsCondition{}
							typeVar1.ExistsCondition.Exists = types.BoolPointerValue(typeVarItem.ExistsCondition.Exists)
						}
						if typeVarItem.PrefixCondition != nil {
							typeVar1.PrefixCondition = &PrefixCondition{}
							typeVar1.PrefixCondition.Prefix = types.StringPointerValue(typeVarItem.PrefixCondition.Prefix)
						}
						if typeVarItem.SuffixCondition != nil {
							typeVar1.SuffixCondition = &SuffixCondition{}
							typeVar1.SuffixCondition.Suffix = types.StringPointerValue(typeVarItem.SuffixCondition.Suffix)
						}
						if typeVarItem.WildcardCondition != nil {
							typeVar1.WildcardCondition = &WildcardCondition{}
							typeVar1.WildcardCondition.Wildcard = types.StringPointerValue(typeVarItem.WildcardCondition.Wildcard)
						}
						if typeVarCount+1 > len(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type) {
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type = append(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type, typeVar1)
						} else {
						}
					}
				}
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation == nil {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation = nil
				} else {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation = &Operation{}
					if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff == nil {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff = nil
					} else {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff = &Diff{}
						if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any != nil {
							anyResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any)
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any = types.StringValue(string(anyResult))
						}
						if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two != nil {
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two = &Two{}
							if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added == nil {
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added = types.StringNull()
							} else {
								addedResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added)
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added = types.StringValue(string(addedResult))
							}
							if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted == nil {
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted = types.StringNull()
							} else {
								deletedResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted)
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted = types.StringValue(string(deletedResult))
							}
							if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated == nil {
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated = types.StringNull()
							} else {
								updatedResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated)
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated = types.StringValue(string(updatedResult))
							}
						}
					}
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation = nil
					for _, v := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation = append(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation, types.StringValue(string(v)))
					}
					if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload == nil {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload = types.StringNull()
					} else {
						payloadResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload)
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload = types.StringValue(string(payloadResult))
					}
				}
			}
			triggers1.EntityOperationTrigger.Configuration.IncludeActivities = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
				triggers1.EntityOperationTrigger.Configuration.IncludeActivities = append(triggers1.EntityOperationTrigger.Configuration.IncludeActivities, types.StringValue(v))
			}
			triggers1.EntityOperationTrigger.Configuration.Operations = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.Operations {
				triggers1.EntityOperationTrigger.Configuration.Operations = append(triggers1.EntityOperationTrigger.Configuration.Operations, types.StringValue(string(v)))
			}
			triggers1.EntityOperationTrigger.Configuration.Schema = types.StringPointerValue(triggersItem.EntityOperationTrigger.Configuration.Schema)
			triggers1.EntityOperationTrigger.Type = types.StringValue(string(triggersItem.EntityOperationTrigger.Type))
		}
		if triggersItem.FrontendSubmitTrigger != nil {
			triggers1.FrontendSubmitTrigger = &FrontendSubmitTrigger{}
			triggers1.FrontendSubmitTrigger.Configuration.SourceID = types.StringPointerValue(triggersItem.FrontendSubmitTrigger.Configuration.SourceID)
			triggers1.FrontendSubmitTrigger.Type = types.StringValue(string(triggersItem.FrontendSubmitTrigger.Type))
		}
		if triggersItem.JourneySubmitTrigger != nil {
			triggers1.JourneySubmitTrigger = &JourneySubmitTrigger{}
			triggers1.JourneySubmitTrigger.Configuration.SourceID = types.StringValue(triggersItem.JourneySubmitTrigger.Configuration.SourceID)
			triggers1.JourneySubmitTrigger.Type = types.StringValue(string(triggersItem.JourneySubmitTrigger.Type))
		}
		if triggersItem.ReceivedEmailTrigger != nil {
			triggers1.ReceivedEmailTrigger = &ReceivedEmailTrigger{}
			if triggersItem.ReceivedEmailTrigger.Configuration.MessageType != nil {
				triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringValue(string(*triggersItem.ReceivedEmailTrigger.Configuration.MessageType))
			} else {
				triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringNull()
			}
			triggers1.ReceivedEmailTrigger.Type = types.StringValue(string(triggersItem.ReceivedEmailTrigger.Type))
		}
		if triggersCount+1 > len(r.Triggers) {
			r.Triggers = append(r.Triggers, triggers1)
		} else {
		}
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	} else {
		r.UpdatedAt = types.StringNull()
	}
}
