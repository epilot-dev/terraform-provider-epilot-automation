// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-automation/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *FlowDataSourceModel) RefreshFromSharedAutomationFlow(resp *shared.AutomationFlow) {
	if resp != nil {
		r.Actions = nil
		for _, actionsItem := range resp.Actions {
			var actions1 types.String
			actions1Result, _ := json.Marshal(actionsItem)
			actions1 = types.StringValue(string(actions1Result))
			r.Actions = append(r.Actions, actions1)
		}
		r.Conditions = []tfTypes.ActionCondition{}
		if len(r.Conditions) > len(resp.Conditions) {
			r.Conditions = r.Conditions[:len(resp.Conditions)]
		}
		for conditionsCount, conditionsItem := range resp.Conditions {
			var conditions1 tfTypes.ActionCondition
			conditions1.Conditions = []tfTypes.Condition{}
			for conditionsCount1, conditionsItem1 := range conditionsItem.Conditions {
				var conditions3 tfTypes.Condition
				conditions3.ID = types.StringPointerValue(conditionsItem1.ID)
				if conditionsItem1.Operation != nil {
					conditions3.Operation = types.StringValue(string(*conditionsItem1.Operation))
				} else {
					conditions3.Operation = types.StringNull()
				}
				if conditionsItem1.Source == nil {
					conditions3.Source = nil
				} else {
					conditions3.Source = &tfTypes.Source{}
					conditions3.Source.Attribute = types.StringPointerValue(conditionsItem1.Source.Attribute)
					if conditionsItem1.Source.AttributeType != nil {
						conditions3.Source.AttributeType = types.StringValue(string(*conditionsItem1.Source.AttributeType))
					} else {
						conditions3.Source.AttributeType = types.StringNull()
					}
					conditions3.Source.ID = types.StringPointerValue(conditionsItem1.Source.ID)
					if conditionsItem1.Source.Origin != nil {
						conditions3.Source.Origin = types.StringValue(string(*conditionsItem1.Source.Origin))
					} else {
						conditions3.Source.Origin = types.StringNull()
					}
					if conditionsItem1.Source.OriginType != nil {
						conditions3.Source.OriginType = types.StringValue(string(*conditionsItem1.Source.OriginType))
					} else {
						conditions3.Source.OriginType = types.StringNull()
					}
					conditions3.Source.Schema = types.StringPointerValue(conditionsItem1.Source.Schema)
				}
				conditions3.Values = []types.String{}
				for _, v := range conditionsItem1.Values {
					conditions3.Values = append(conditions3.Values, types.StringValue(v))
				}
				if conditionsCount1+1 > len(conditions1.Conditions) {
					conditions1.Conditions = append(conditions1.Conditions, conditions3)
				} else {
					conditions1.Conditions[conditionsCount1].ID = conditions3.ID
					conditions1.Conditions[conditionsCount1].Operation = conditions3.Operation
					conditions1.Conditions[conditionsCount1].Source = conditions3.Source
					conditions1.Conditions[conditionsCount1].Values = conditions3.Values
				}
			}
			conditions1.EvaluationResult = types.BoolPointerValue(conditionsItem.EvaluationResult)
			conditions1.ID = types.StringPointerValue(conditionsItem.ID)
			if conditionsCount+1 > len(r.Conditions) {
				r.Conditions = append(r.Conditions, conditions1)
			} else {
				r.Conditions[conditionsCount].Conditions = conditions1.Conditions
				r.Conditions[conditionsCount].EvaluationResult = conditions1.EvaluationResult
				r.Conditions[conditionsCount].ID = conditions1.ID
			}
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EntitySchema = types.StringPointerValue(resp.EntitySchema)
		r.FlowName = types.StringValue(resp.FlowName)
		r.ID = types.StringPointerValue(resp.ID)
		r.SystemFlow = types.BoolPointerValue(resp.SystemFlow)
		r.TriggerConditions = nil
		for _, triggerConditionsItem := range resp.TriggerConditions {
			var triggerConditions1 types.String
			triggerConditions1Result, _ := json.Marshal(triggerConditionsItem)
			triggerConditions1 = types.StringValue(string(triggerConditions1Result))
			r.TriggerConditions = append(r.TriggerConditions, triggerConditions1)
		}
		r.Triggers = nil
		for _, triggersItem := range resp.Triggers {
			var triggers1 types.String
			triggers1Result, _ := json.Marshal(triggersItem)
			triggers1 = types.StringValue(string(triggers1Result))
			r.Triggers = append(r.Triggers, triggers1)
		}
		if resp.Version != nil {
			r.Version = types.NumberValue(big.NewFloat(float64(*resp.Version)))
		} else {
			r.Version = types.NumberNull()
		}
	}
}
