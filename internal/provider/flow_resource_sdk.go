// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *FlowResourceModel) ToSharedAutomationFlowInput() *shared.AutomationFlowInput {
	var actions []interface{} = nil
	for _, actionsItem := range r.Actions {
		var actionsTmp interface{}
		_ = json.Unmarshal([]byte(actionsItem.ValueString()), &actionsTmp)
		actions = append(actions, actionsTmp)
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	entitySchema := new(string)
	if !r.EntitySchema.IsUnknown() && !r.EntitySchema.IsNull() {
		*entitySchema = r.EntitySchema.ValueString()
	} else {
		entitySchema = nil
	}
	flowName := r.FlowName.ValueString()
	runs := new(float64)
	if !r.Runs.IsUnknown() && !r.Runs.IsNull() {
		*runs, _ = r.Runs.ValueBigFloat().Float64()
	} else {
		runs = nil
	}
	systemFlow := new(bool)
	if !r.SystemFlow.IsUnknown() && !r.SystemFlow.IsNull() {
		*systemFlow = r.SystemFlow.ValueBool()
	} else {
		systemFlow = nil
	}
	var triggerConditions []interface{} = nil
	for _, triggerConditionsItem := range r.TriggerConditions {
		var triggerConditionsTmp interface{}
		_ = json.Unmarshal([]byte(triggerConditionsItem.ValueString()), &triggerConditionsTmp)
		triggerConditions = append(triggerConditions, triggerConditionsTmp)
	}
	var triggers []shared.AnyTrigger = nil
	for _, triggersItem := range r.Triggers {
		if triggersItem.FrontendSubmitTrigger != nil {
			sourceID := new(string)
			if !triggersItem.FrontendSubmitTrigger.Configuration.SourceID.IsUnknown() && !triggersItem.FrontendSubmitTrigger.Configuration.SourceID.IsNull() {
				*sourceID = triggersItem.FrontendSubmitTrigger.Configuration.SourceID.ValueString()
			} else {
				sourceID = nil
			}
			configuration := shared.FrontendSubmitTriggerConfiguration{
				SourceID: sourceID,
			}
			typeVar := shared.FrontendSubmitTriggerType(triggersItem.FrontendSubmitTrigger.Type.ValueString())
			frontendSubmitTrigger := shared.FrontendSubmitTrigger{
				Configuration: configuration,
				Type:          typeVar,
			}
			triggers = append(triggers, shared.AnyTrigger{
				FrontendSubmitTrigger: &frontendSubmitTrigger,
			})
		}
		if triggersItem.JourneySubmitTrigger != nil {
			sourceId1 := triggersItem.JourneySubmitTrigger.Configuration.SourceID.ValueString()
			configuration1 := shared.JourneySubmitTriggerConfiguration{
				SourceID: sourceId1,
			}
			typeVar1 := shared.JourneySubmitTriggerType(triggersItem.JourneySubmitTrigger.Type.ValueString())
			journeySubmitTrigger := shared.JourneySubmitTrigger{
				Configuration: configuration1,
				Type:          typeVar1,
			}
			triggers = append(triggers, shared.AnyTrigger{
				JourneySubmitTrigger: &journeySubmitTrigger,
			})
		}
		if triggersItem.APISubmissionTrigger != nil {
			sourceId2 := new(string)
			if !triggersItem.APISubmissionTrigger.Configuration.SourceID.IsUnknown() && !triggersItem.APISubmissionTrigger.Configuration.SourceID.IsNull() {
				*sourceId2 = triggersItem.APISubmissionTrigger.Configuration.SourceID.ValueString()
			} else {
				sourceId2 = nil
			}
			configuration2 := shared.APISubmissionTriggerConfiguration{
				SourceID: sourceId2,
			}
			typeVar2 := shared.APISubmissionTriggerType(triggersItem.APISubmissionTrigger.Type.ValueString())
			apiSubmissionTrigger := shared.APISubmissionTrigger{
				Configuration: configuration2,
				Type:          typeVar2,
			}
			triggers = append(triggers, shared.AnyTrigger{
				APISubmissionTrigger: &apiSubmissionTrigger,
			})
		}
		if triggersItem.EntityOperationTrigger != nil {
			var excludeActivities []string = nil
			for _, excludeActivitiesItem := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
				excludeActivities = append(excludeActivities, excludeActivitiesItem.ValueString())
			}
			var filterConfig *shared.FilterConfig
			if triggersItem.EntityOperationTrigger.Configuration.FilterConfig != nil {
				var activity *shared.Activity
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity != nil {
					var typeVar3 []shared.EntityOperationTriggerSchemasType = nil
					for _, typeItem := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type {
						if !typeItem.Str.IsUnknown() && !typeItem.Str.IsNull() {
							str := typeItem.Str.ValueString()
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								Str: &str,
							})
						}
						if typeItem.EqualsIgnoreCaseCondition != nil {
							equalsIgnoreCase := new(string)
							if !typeItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase.IsUnknown() && !typeItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase.IsNull() {
								*equalsIgnoreCase = typeItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase.ValueString()
							} else {
								equalsIgnoreCase = nil
							}
							equalsIgnoreCaseCondition := shared.EqualsIgnoreCaseCondition{
								EqualsIgnoreCase: equalsIgnoreCase,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								EqualsIgnoreCaseCondition: &equalsIgnoreCaseCondition,
							})
						}
						if typeItem.AnythingButCondition != nil {
							var anythingBut []string = nil
							for _, anythingButItem := range typeItem.AnythingButCondition.AnythingBut {
								anythingBut = append(anythingBut, anythingButItem.ValueString())
							}
							anythingButCondition := shared.AnythingButCondition{
								AnythingBut: anythingBut,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								AnythingButCondition: &anythingButCondition,
							})
						}
						if typeItem.ExistsCondition != nil {
							exists := new(bool)
							if !typeItem.ExistsCondition.Exists.IsUnknown() && !typeItem.ExistsCondition.Exists.IsNull() {
								*exists = typeItem.ExistsCondition.Exists.ValueBool()
							} else {
								exists = nil
							}
							existsCondition := shared.ExistsCondition{
								Exists: exists,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								ExistsCondition: &existsCondition,
							})
						}
						if typeItem.PrefixCondition != nil {
							prefix := new(string)
							if !typeItem.PrefixCondition.Prefix.IsUnknown() && !typeItem.PrefixCondition.Prefix.IsNull() {
								*prefix = typeItem.PrefixCondition.Prefix.ValueString()
							} else {
								prefix = nil
							}
							prefixCondition := shared.PrefixCondition{
								Prefix: prefix,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								PrefixCondition: &prefixCondition,
							})
						}
						if typeItem.SuffixCondition != nil {
							suffix := new(string)
							if !typeItem.SuffixCondition.Suffix.IsUnknown() && !typeItem.SuffixCondition.Suffix.IsNull() {
								*suffix = typeItem.SuffixCondition.Suffix.ValueString()
							} else {
								suffix = nil
							}
							suffixCondition := shared.SuffixCondition{
								Suffix: suffix,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								SuffixCondition: &suffixCondition,
							})
						}
						if typeItem.WildcardCondition != nil {
							wildcard := new(string)
							if !typeItem.WildcardCondition.Wildcard.IsUnknown() && !typeItem.WildcardCondition.Wildcard.IsNull() {
								*wildcard = typeItem.WildcardCondition.Wildcard.ValueString()
							} else {
								wildcard = nil
							}
							wildcardCondition := shared.WildcardCondition{
								Wildcard: wildcard,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								WildcardCondition: &wildcardCondition,
							})
						}
					}
					activity = &shared.Activity{
						Type: typeVar3,
					}
				}
				var operation *shared.Operation
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation != nil {
					var diff *shared.Diff
					if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff != nil {
						var any interface{}
						if !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any.IsNull() {
							_ = json.Unmarshal([]byte(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any.ValueString()), &any)
						}
						if any != nil {
							diff = &shared.Diff{
								Any: any,
							}
						}
						var two *shared.Two
						if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two != nil {
							var added interface{}
							if !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added.IsNull() {
								_ = json.Unmarshal([]byte(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added.ValueString()), &added)
							}
							var deleted interface{}
							if !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted.IsNull() {
								_ = json.Unmarshal([]byte(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted.ValueString()), &deleted)
							}
							var updated interface{}
							if !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated.IsNull() {
								_ = json.Unmarshal([]byte(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated.ValueString()), &updated)
							}
							two = &shared.Two{
								Added:   added,
								Deleted: deleted,
								Updated: updated,
							}
						}
						if two != nil {
							diff = &shared.Diff{
								Two: two,
							}
						}
					}
					var operation1 []shared.EntityOperation = nil
					for _, operationItem := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation {
						operation1 = append(operation1, shared.EntityOperation(operationItem.ValueString()))
					}
					var payload interface{}
					if !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload.IsNull() {
						_ = json.Unmarshal([]byte(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload.ValueString()), &payload)
					}
					operation = &shared.Operation{
						Diff:      diff,
						Operation: operation1,
						Payload:   payload,
					}
				}
				filterConfig = &shared.FilterConfig{
					Activity:  activity,
					Operation: operation,
				}
			}
			var includeActivities []string = nil
			for _, includeActivitiesItem := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
				includeActivities = append(includeActivities, includeActivitiesItem.ValueString())
			}
			var operationsVar []shared.EntityOperation = nil
			for _, operationsItem := range triggersItem.EntityOperationTrigger.Configuration.Operations {
				operationsVar = append(operationsVar, shared.EntityOperation(operationsItem.ValueString()))
			}
			schema := new(string)
			if !triggersItem.EntityOperationTrigger.Configuration.Schema.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.Schema.IsNull() {
				*schema = triggersItem.EntityOperationTrigger.Configuration.Schema.ValueString()
			} else {
				schema = nil
			}
			configuration3 := shared.EntityOperationTriggerConfiguration{
				ExcludeActivities: excludeActivities,
				FilterConfig:      filterConfig,
				IncludeActivities: includeActivities,
				Operations:        operationsVar,
				Schema:            schema,
			}
			typeVar4 := shared.EntityOperationTriggerType(triggersItem.EntityOperationTrigger.Type.ValueString())
			entityOperationTrigger := shared.EntityOperationTrigger{
				Configuration: configuration3,
				Type:          typeVar4,
			}
			triggers = append(triggers, shared.AnyTrigger{
				EntityOperationTrigger: &entityOperationTrigger,
			})
		}
		if triggersItem.ActivityTrigger != nil {
			schema1 := new(string)
			if !triggersItem.ActivityTrigger.Configuration.Schema.IsUnknown() && !triggersItem.ActivityTrigger.Configuration.Schema.IsNull() {
				*schema1 = triggersItem.ActivityTrigger.Configuration.Schema.ValueString()
			} else {
				schema1 = nil
			}
			var types []shared.Types = nil
			for _, typesItem := range triggersItem.ActivityTrigger.Configuration.Types {
				types = append(types, shared.Types(typesItem.ValueString()))
			}
			configuration4 := shared.Configuration{
				Schema: schema1,
				Types:  types,
			}
			typeVar5 := shared.Type(triggersItem.ActivityTrigger.Type.ValueString())
			activityTrigger := shared.ActivityTrigger{
				Configuration: configuration4,
				Type:          typeVar5,
			}
			triggers = append(triggers, shared.AnyTrigger{
				ActivityTrigger: &activityTrigger,
			})
		}
		if triggersItem.EntityManualTrigger != nil {
			schema2 := new(string)
			if !triggersItem.EntityManualTrigger.Configuration.Schema.IsUnknown() && !triggersItem.EntityManualTrigger.Configuration.Schema.IsNull() {
				*schema2 = triggersItem.EntityManualTrigger.Configuration.Schema.ValueString()
			} else {
				schema2 = nil
			}
			configuration5 := shared.EntityManualTriggerConfiguration{
				Schema: schema2,
			}
			typeVar6 := shared.EntityManualTriggerType(triggersItem.EntityManualTrigger.Type.ValueString())
			entityManualTrigger := shared.EntityManualTrigger{
				Configuration: configuration5,
				Type:          typeVar6,
			}
			triggers = append(triggers, shared.AnyTrigger{
				EntityManualTrigger: &entityManualTrigger,
			})
		}
		if triggersItem.ReceivedEmailTrigger != nil {
			messageType := new(shared.MessageType)
			if !triggersItem.ReceivedEmailTrigger.Configuration.MessageType.IsUnknown() && !triggersItem.ReceivedEmailTrigger.Configuration.MessageType.IsNull() {
				*messageType = shared.MessageType(triggersItem.ReceivedEmailTrigger.Configuration.MessageType.ValueString())
			} else {
				messageType = nil
			}
			configuration6 := shared.ReceivedEmailTriggerConfiguration{
				MessageType: messageType,
			}
			typeVar7 := shared.ReceivedEmailTriggerType(triggersItem.ReceivedEmailTrigger.Type.ValueString())
			receivedEmailTrigger := shared.ReceivedEmailTrigger{
				Configuration: configuration6,
				Type:          typeVar7,
			}
			triggers = append(triggers, shared.AnyTrigger{
				ReceivedEmailTrigger: &receivedEmailTrigger,
			})
		}
	}
	out := shared.AutomationFlowInput{
		Actions:           actions,
		Enabled:           enabled,
		EntitySchema:      entitySchema,
		FlowName:          flowName,
		Runs:              runs,
		SystemFlow:        systemFlow,
		TriggerConditions: triggerConditions,
		Triggers:          triggers,
	}
	return &out
}

func (r *FlowResourceModel) RefreshFromSharedAutomationFlow(resp *shared.AutomationFlow) {
	r.Actions = nil
	for _, actionsItem := range resp.Actions {
		var actions1 types.String
		actions1Result, _ := json.Marshal(actionsItem)
		actions1 = types.StringValue(string(actions1Result))
		r.Actions = append(r.Actions, actions1)
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	} else {
		r.CreatedAt = types.StringNull()
	}
	r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
	r.Enabled = types.BoolPointerValue(resp.Enabled)
	r.EntitySchema = types.StringPointerValue(resp.EntitySchema)
	r.FlowName = types.StringValue(resp.FlowName)
	r.ID = types.StringPointerValue(resp.ID)
	r.LastUpdatedBy = types.StringPointerValue(resp.LastUpdatedBy)
	r.OrgID = types.StringPointerValue(resp.OrgID)
	if resp.Runs != nil {
		r.Runs = types.NumberValue(big.NewFloat(float64(*resp.Runs)))
	} else {
		r.Runs = types.NumberNull()
	}
	r.SystemFlow = types.BoolPointerValue(resp.SystemFlow)
	r.TriggerConditions = nil
	for _, triggerConditionsItem := range resp.TriggerConditions {
		var triggerConditions1 types.String
		triggerConditions1Result, _ := json.Marshal(triggerConditionsItem)
		triggerConditions1 = types.StringValue(string(triggerConditions1Result))
		r.TriggerConditions = append(r.TriggerConditions, triggerConditions1)
	}
	if len(r.Triggers) > len(resp.Triggers) {
		r.Triggers = r.Triggers[:len(resp.Triggers)]
	}
	for triggersCount, triggersItem := range resp.Triggers {
		var triggers1 AnyTrigger
		if triggersItem.ActivityTrigger != nil {
			triggers1.ActivityTrigger = &ActivityTrigger{}
			triggers1.ActivityTrigger.Configuration.Schema = types.StringPointerValue(triggersItem.ActivityTrigger.Configuration.Schema)
			triggers1.ActivityTrigger.Configuration.Types = nil
			for _, v := range triggersItem.ActivityTrigger.Configuration.Types {
				triggers1.ActivityTrigger.Configuration.Types = append(triggers1.ActivityTrigger.Configuration.Types, types.StringValue(string(v)))
			}
			triggers1.ActivityTrigger.Type = types.StringValue(string(triggersItem.ActivityTrigger.Type))
		}
		if triggersItem.APISubmissionTrigger != nil {
			triggers1.APISubmissionTrigger = &APISubmissionTrigger{}
			triggers1.APISubmissionTrigger.Configuration.SourceID = types.StringPointerValue(triggersItem.APISubmissionTrigger.Configuration.SourceID)
			triggers1.APISubmissionTrigger.Type = types.StringValue(string(triggersItem.APISubmissionTrigger.Type))
		}
		if triggersItem.EntityManualTrigger != nil {
			triggers1.EntityManualTrigger = &EntityManualTrigger{}
			triggers1.EntityManualTrigger.Configuration.Schema = types.StringPointerValue(triggersItem.EntityManualTrigger.Configuration.Schema)
			triggers1.EntityManualTrigger.Type = types.StringValue(string(triggersItem.EntityManualTrigger.Type))
		}
		if triggersItem.EntityOperationTrigger != nil {
			triggers1.EntityOperationTrigger = &EntityOperationTrigger{}
			triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
				triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = append(triggers1.EntityOperationTrigger.Configuration.ExcludeActivities, types.StringValue(v))
			}
			if triggersItem.EntityOperationTrigger.Configuration.FilterConfig == nil {
				triggers1.EntityOperationTrigger.Configuration.FilterConfig = nil
			} else {
				triggers1.EntityOperationTrigger.Configuration.FilterConfig = &FilterConfig{}
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity == nil {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity = nil
				} else {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity = &Activity{}
					for typeVarCount, typeVarItem := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type {
						var typeVar1 EntityOperationTriggerSchemasType
						if typeVarItem.Str != nil {
							typeVar1.Str = types.StringPointerValue(typeVarItem.Str)
						}
						if typeVarItem.AnythingButCondition != nil {
							typeVar1.AnythingButCondition = &AnythingButCondition{}
							typeVar1.AnythingButCondition.AnythingBut = nil
							for _, v := range typeVarItem.AnythingButCondition.AnythingBut {
								typeVar1.AnythingButCondition.AnythingBut = append(typeVar1.AnythingButCondition.AnythingBut, types.StringValue(v))
							}
						}
						if typeVarItem.EqualsIgnoreCaseCondition != nil {
							typeVar1.EqualsIgnoreCaseCondition = &EqualsIgnoreCaseCondition{}
							typeVar1.EqualsIgnoreCaseCondition.EqualsIgnoreCase = types.StringPointerValue(typeVarItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase)
						}
						if typeVarItem.ExistsCondition != nil {
							typeVar1.ExistsCondition = &ExistsCondition{}
							typeVar1.ExistsCondition.Exists = types.BoolPointerValue(typeVarItem.ExistsCondition.Exists)
						}
						if typeVarItem.PrefixCondition != nil {
							typeVar1.PrefixCondition = &PrefixCondition{}
							typeVar1.PrefixCondition.Prefix = types.StringPointerValue(typeVarItem.PrefixCondition.Prefix)
						}
						if typeVarItem.SuffixCondition != nil {
							typeVar1.SuffixCondition = &SuffixCondition{}
							typeVar1.SuffixCondition.Suffix = types.StringPointerValue(typeVarItem.SuffixCondition.Suffix)
						}
						if typeVarItem.WildcardCondition != nil {
							typeVar1.WildcardCondition = &WildcardCondition{}
							typeVar1.WildcardCondition.Wildcard = types.StringPointerValue(typeVarItem.WildcardCondition.Wildcard)
						}
						if typeVarCount+1 > len(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type) {
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type = append(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type, typeVar1)
						} else {
						}
					}
				}
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation == nil {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation = nil
				} else {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation = &Operation{}
					if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff == nil {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff = nil
					} else {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff = &Diff{}
						if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any != nil {
							anyResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any)
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Any = types.StringValue(string(anyResult))
						}
						if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two != nil {
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two = &Two{}
							if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added == nil {
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added = types.StringNull()
							} else {
								addedResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added)
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Added = types.StringValue(string(addedResult))
							}
							if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted == nil {
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted = types.StringNull()
							} else {
								deletedResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted)
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Deleted = types.StringValue(string(deletedResult))
							}
							if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated == nil {
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated = types.StringNull()
							} else {
								updatedResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated)
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.Two.Updated = types.StringValue(string(updatedResult))
							}
						}
					}
					triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation = nil
					for _, v := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation = append(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation, types.StringValue(string(v)))
					}
					if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload == nil {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload = types.StringNull()
					} else {
						payloadResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload)
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload = types.StringValue(string(payloadResult))
					}
				}
			}
			triggers1.EntityOperationTrigger.Configuration.IncludeActivities = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
				triggers1.EntityOperationTrigger.Configuration.IncludeActivities = append(triggers1.EntityOperationTrigger.Configuration.IncludeActivities, types.StringValue(v))
			}
			triggers1.EntityOperationTrigger.Configuration.Operations = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.Operations {
				triggers1.EntityOperationTrigger.Configuration.Operations = append(triggers1.EntityOperationTrigger.Configuration.Operations, types.StringValue(string(v)))
			}
			triggers1.EntityOperationTrigger.Configuration.Schema = types.StringPointerValue(triggersItem.EntityOperationTrigger.Configuration.Schema)
			triggers1.EntityOperationTrigger.Type = types.StringValue(string(triggersItem.EntityOperationTrigger.Type))
		}
		if triggersItem.FrontendSubmitTrigger != nil {
			triggers1.FrontendSubmitTrigger = &FrontendSubmitTrigger{}
			triggers1.FrontendSubmitTrigger.Configuration.SourceID = types.StringPointerValue(triggersItem.FrontendSubmitTrigger.Configuration.SourceID)
			triggers1.FrontendSubmitTrigger.Type = types.StringValue(string(triggersItem.FrontendSubmitTrigger.Type))
		}
		if triggersItem.JourneySubmitTrigger != nil {
			triggers1.JourneySubmitTrigger = &JourneySubmitTrigger{}
			triggers1.JourneySubmitTrigger.Configuration.SourceID = types.StringValue(triggersItem.JourneySubmitTrigger.Configuration.SourceID)
			triggers1.JourneySubmitTrigger.Type = types.StringValue(string(triggersItem.JourneySubmitTrigger.Type))
		}
		if triggersItem.ReceivedEmailTrigger != nil {
			triggers1.ReceivedEmailTrigger = &ReceivedEmailTrigger{}
			if triggersItem.ReceivedEmailTrigger.Configuration.MessageType != nil {
				triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringValue(string(*triggersItem.ReceivedEmailTrigger.Configuration.MessageType))
			} else {
				triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringNull()
			}
			triggers1.ReceivedEmailTrigger.Type = types.StringValue(string(triggersItem.ReceivedEmailTrigger.Type))
		}
		if triggersCount+1 > len(r.Triggers) {
			r.Triggers = append(r.Triggers, triggers1)
		} else {
		}
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	} else {
		r.UpdatedAt = types.StringNull()
	}
}
