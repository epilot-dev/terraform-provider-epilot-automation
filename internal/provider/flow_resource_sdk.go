// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"epilot-automation/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *FlowResourceModel) ToCreateSDKType() *shared.AutomationFlowInput {
	var actions []shared.AnyActionConfig = nil
	for _, actionsItem := range r.Actions {
		if actionsItem.MapEntityActionConfig != nil {
			allowFailure := new(bool)
			if !actionsItem.MapEntityActionConfig.AllowFailure.IsUnknown() && !actionsItem.MapEntityActionConfig.AllowFailure.IsNull() {
				*allowFailure = actionsItem.MapEntityActionConfig.AllowFailure.ValueBool()
			} else {
				allowFailure = nil
			}
			var config *shared.MapEntityConfig
			if actionsItem.MapEntityActionConfig.Config != nil {
				linkbackRelationAttribute := new(string)
				if !actionsItem.MapEntityActionConfig.Config.LinkbackRelationAttribute.IsUnknown() && !actionsItem.MapEntityActionConfig.Config.LinkbackRelationAttribute.IsNull() {
					*linkbackRelationAttribute = actionsItem.MapEntityActionConfig.Config.LinkbackRelationAttribute.ValueString()
				} else {
					linkbackRelationAttribute = nil
				}
				var linkbackRelationTags []string = nil
				for _, linkbackRelationTagsItem := range actionsItem.MapEntityActionConfig.Config.LinkbackRelationTags {
					linkbackRelationTags = append(linkbackRelationTags, linkbackRelationTagsItem.ValueString())
				}
				var mappingAttributes []shared.MapEntityConfigMappingAttributes = nil
				for _, mappingAttributesItem := range actionsItem.MapEntityActionConfig.Config.MappingAttributes {
					if mappingAttributesItem.MappingAttributeV2 != nil {
						var operation shared.OperationNode
						var operationObjectNode *shared.OperationObjectNode
						if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode != nil {
							var append1 []interface{} = nil
							for _, appendItem := range mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Append {
								var appendTmp interface{}
								_ = json.Unmarshal([]byte(appendItem.ValueString()), &appendTmp)
								append1 = append(append1, appendTmp)
							}
							copy := new(string)
							if !mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Copy.IsUnknown() && !mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Copy.IsNull() {
								*copy = mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Copy.ValueString()
							} else {
								copy = nil
							}
							var set interface{}
							if !mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Set.IsUnknown() && !mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Set.IsNull() {
								_ = json.Unmarshal([]byte(mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Set.ValueString()), &set)
							}
							var uniq *shared.OperationObjectNodeUniq
							if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq != nil {
								boolean := new(bool)
								if !mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean.IsUnknown() && !mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean.IsNull() {
									*boolean = mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean.ValueBool()
								} else {
									boolean = nil
								}
								if boolean != nil {
									uniq = &shared.OperationObjectNodeUniq{
										Boolean: boolean,
									}
								}
								var arrayOfstr []string = nil
								for _, arrayOfstrItem := range mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr {
									arrayOfstr = append(arrayOfstr, arrayOfstrItem.ValueString())
								}
								if arrayOfstr != nil {
									uniq = &shared.OperationObjectNodeUniq{
										ArrayOfstr: arrayOfstr,
									}
								}
							}
							var additionalProperties interface{}
							if !mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties.IsUnknown() && !mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties.IsNull() {
								_ = json.Unmarshal([]byte(mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties.ValueString()), &additionalProperties)
							}
							operationObjectNode = &shared.OperationObjectNode{
								Append:               append1,
								Copy:                 copy,
								Set:                  set,
								Uniq:                 uniq,
								AdditionalProperties: additionalProperties,
							}
						}
						if operationObjectNode != nil {
							operation = shared.OperationNode{
								OperationObjectNode: operationObjectNode,
							}
						}
						var any interface{}
						if !mappingAttributesItem.MappingAttributeV2.Operation.Any.IsUnknown() && !mappingAttributesItem.MappingAttributeV2.Operation.Any.IsNull() {
							_ = json.Unmarshal([]byte(mappingAttributesItem.MappingAttributeV2.Operation.Any.ValueString()), &any)
						}
						if any != nil {
							operation = shared.OperationNode{
								Any: any,
							}
						}
						target := new(string)
						if !mappingAttributesItem.MappingAttributeV2.Target.IsUnknown() && !mappingAttributesItem.MappingAttributeV2.Target.IsNull() {
							*target = mappingAttributesItem.MappingAttributeV2.Target.ValueString()
						} else {
							target = nil
						}
						mappingAttributeV2 := shared.MappingAttributeV2{
							Operation: operation,
							Target:    target,
						}
						mappingAttributes = append(mappingAttributes, shared.MapEntityConfigMappingAttributes{
							MappingAttributeV2: &mappingAttributeV2,
						})
					}
					if mappingAttributesItem.MappingAttribute != nil {
						var mappingAttribute shared.MappingAttribute
						var setValueMapper *shared.SetValueMapper
						if mappingAttributesItem.MappingAttribute.SetValueMapper != nil {
							mode := shared.MappingAttributeMode(mappingAttributesItem.MappingAttribute.SetValueMapper.Mode.ValueString())
							target1 := mappingAttributesItem.MappingAttribute.SetValueMapper.Target.ValueString()
							var value interface{}
							_ = json.Unmarshal([]byte(mappingAttributesItem.MappingAttribute.SetValueMapper.Value.ValueString()), &value)
							setValueMapper = &shared.SetValueMapper{
								Mode:   mode,
								Target: target1,
								Value:  value,
							}
						}
						if setValueMapper != nil {
							mappingAttribute = shared.MappingAttribute{
								SetValueMapper: setValueMapper,
							}
						}
						var copyValueMapper *shared.CopyValueMapper
						if mappingAttributesItem.MappingAttribute.CopyValueMapper != nil {
							mode1 := shared.MappingAttributeMode(mappingAttributesItem.MappingAttribute.CopyValueMapper.Mode.ValueString())
							source := mappingAttributesItem.MappingAttribute.CopyValueMapper.Source.ValueString()
							target2 := mappingAttributesItem.MappingAttribute.CopyValueMapper.Target.ValueString()
							copyValueMapper = &shared.CopyValueMapper{
								Mode:   mode1,
								Source: source,
								Target: target2,
							}
						}
						if copyValueMapper != nil {
							mappingAttribute = shared.MappingAttribute{
								CopyValueMapper: copyValueMapper,
							}
						}
						var appendValueMapper *shared.AppendValueMapper
						if mappingAttributesItem.MappingAttribute.AppendValueMapper != nil {
							mode2 := shared.MappingAttributeMode(mappingAttributesItem.MappingAttribute.AppendValueMapper.Mode.ValueString())
							source1 := new(string)
							if !mappingAttributesItem.MappingAttribute.AppendValueMapper.Source.IsUnknown() && !mappingAttributesItem.MappingAttribute.AppendValueMapper.Source.IsNull() {
								*source1 = mappingAttributesItem.MappingAttribute.AppendValueMapper.Source.ValueString()
							} else {
								source1 = nil
							}
							target3 := mappingAttributesItem.MappingAttribute.AppendValueMapper.Target.ValueString()
							var targetUnique []string = nil
							for _, targetUniqueItem := range mappingAttributesItem.MappingAttribute.AppendValueMapper.TargetUnique {
								targetUnique = append(targetUnique, targetUniqueItem.ValueString())
							}
							valueJSON := mappingAttributesItem.MappingAttribute.AppendValueMapper.ValueJSON.ValueString()
							appendValueMapper = &shared.AppendValueMapper{
								Mode:         mode2,
								Source:       source1,
								Target:       target3,
								TargetUnique: targetUnique,
								ValueJSON:    valueJSON,
							}
						}
						if appendValueMapper != nil {
							mappingAttribute = shared.MappingAttribute{
								AppendValueMapper: appendValueMapper,
							}
						}
						mappingAttributes = append(mappingAttributes, shared.MapEntityConfigMappingAttributes{
							MappingAttribute: &mappingAttribute,
						})
					}
				}
				var mappingConfig *shared.MappingConfigRef
				if actionsItem.MapEntityActionConfig.Config.MappingConfig != nil {
					configID := actionsItem.MapEntityActionConfig.Config.MappingConfig.ConfigID.ValueString()
					targetID := actionsItem.MapEntityActionConfig.Config.MappingConfig.TargetID.ValueString()
					version := new(float64)
					if !actionsItem.MapEntityActionConfig.Config.MappingConfig.Version.IsUnknown() && !actionsItem.MapEntityActionConfig.Config.MappingConfig.Version.IsNull() {
						*version, _ = actionsItem.MapEntityActionConfig.Config.MappingConfig.Version.ValueBigFloat().Float64()
					} else {
						version = nil
					}
					mappingConfig = &shared.MappingConfigRef{
						ConfigID: configID,
						TargetID: targetID,
						Version:  version,
					}
				}
				var relationAttributes []shared.RelationAttribute = nil
				for _, relationAttributesItem := range actionsItem.MapEntityActionConfig.Config.RelationAttributes {
					mode3 := shared.RelationAttributeMode(relationAttributesItem.Mode.ValueString())
					relatedTo := make(map[string]interface{})
					// Warning. This is a map, but the source tf var is not a map. This might indicate a bug.
					var sourceFilter *shared.RelationAttributeSourceFilter
					if relationAttributesItem.SourceFilter != nil {
						attribute := new(string)
						if !relationAttributesItem.SourceFilter.Attribute.IsUnknown() && !relationAttributesItem.SourceFilter.Attribute.IsNull() {
							*attribute = relationAttributesItem.SourceFilter.Attribute.ValueString()
						} else {
							attribute = nil
						}
						limit := new(int64)
						if !relationAttributesItem.SourceFilter.Limit.IsUnknown() && !relationAttributesItem.SourceFilter.Limit.IsNull() {
							*limit = relationAttributesItem.SourceFilter.Limit.ValueInt64()
						} else {
							limit = nil
						}
						relationTag := new(string)
						if !relationAttributesItem.SourceFilter.RelationTag.IsUnknown() && !relationAttributesItem.SourceFilter.RelationTag.IsNull() {
							*relationTag = relationAttributesItem.SourceFilter.RelationTag.ValueString()
						} else {
							relationTag = nil
						}
						schema := new(string)
						if !relationAttributesItem.SourceFilter.Schema.IsUnknown() && !relationAttributesItem.SourceFilter.Schema.IsNull() {
							*schema = relationAttributesItem.SourceFilter.Schema.ValueString()
						} else {
							schema = nil
						}
						self := new(bool)
						if !relationAttributesItem.SourceFilter.Self.IsUnknown() && !relationAttributesItem.SourceFilter.Self.IsNull() {
							*self = relationAttributesItem.SourceFilter.Self.ValueBool()
						} else {
							self = nil
						}
						tag := new(string)
						if !relationAttributesItem.SourceFilter.Tag.IsUnknown() && !relationAttributesItem.SourceFilter.Tag.IsNull() {
							*tag = relationAttributesItem.SourceFilter.Tag.ValueString()
						} else {
							tag = nil
						}
						sourceFilter = &shared.RelationAttributeSourceFilter{
							Attribute:   attribute,
							Limit:       limit,
							RelationTag: relationTag,
							Schema:      schema,
							Self:        self,
							Tag:         tag,
						}
					}
					target4 := relationAttributesItem.Target.ValueString()
					var targetTags []string = nil
					for _, targetTagsItem := range relationAttributesItem.TargetTags {
						targetTags = append(targetTags, targetTagsItem.ValueString())
					}
					targetTagsIncludeSource := new(bool)
					if !relationAttributesItem.TargetTagsIncludeSource.IsUnknown() && !relationAttributesItem.TargetTagsIncludeSource.IsNull() {
						*targetTagsIncludeSource = relationAttributesItem.TargetTagsIncludeSource.ValueBool()
					} else {
						targetTagsIncludeSource = nil
					}
					relationAttributes = append(relationAttributes, shared.RelationAttribute{
						Mode:                    mode3,
						RelatedTo:               relatedTo,
						SourceFilter:            sourceFilter,
						Target:                  target4,
						TargetTags:              targetTags,
						TargetTagsIncludeSource: targetTagsIncludeSource,
					})
				}
				targetSchema := actionsItem.MapEntityActionConfig.Config.TargetSchema.ValueString()
				var targetUnique1 []string = nil
				for _, targetUniqueItem1 := range actionsItem.MapEntityActionConfig.Config.TargetUnique {
					targetUnique1 = append(targetUnique1, targetUniqueItem1.ValueString())
				}
				config = &shared.MapEntityConfig{
					LinkbackRelationAttribute: linkbackRelationAttribute,
					LinkbackRelationTags:      linkbackRelationTags,
					MappingAttributes:         mappingAttributes,
					MappingConfig:             mappingConfig,
					RelationAttributes:        relationAttributes,
					TargetSchema:              targetSchema,
					TargetUnique:              targetUnique1,
				}
			}
			createdAutomatically := new(bool)
			if !actionsItem.MapEntityActionConfig.CreatedAutomatically.IsUnknown() && !actionsItem.MapEntityActionConfig.CreatedAutomatically.IsNull() {
				*createdAutomatically = actionsItem.MapEntityActionConfig.CreatedAutomatically.ValueBool()
			} else {
				createdAutomatically = nil
			}
			flowActionID := new(string)
			if !actionsItem.MapEntityActionConfig.FlowActionID.IsUnknown() && !actionsItem.MapEntityActionConfig.FlowActionID.IsNull() {
				*flowActionID = actionsItem.MapEntityActionConfig.FlowActionID.ValueString()
			} else {
				flowActionID = nil
			}
			id := new(string)
			if !actionsItem.MapEntityActionConfig.ID.IsUnknown() && !actionsItem.MapEntityActionConfig.ID.IsNull() {
				*id = actionsItem.MapEntityActionConfig.ID.ValueString()
			} else {
				id = nil
			}
			name := new(string)
			if !actionsItem.MapEntityActionConfig.Name.IsUnknown() && !actionsItem.MapEntityActionConfig.Name.IsNull() {
				*name = actionsItem.MapEntityActionConfig.Name.ValueString()
			} else {
				name = nil
			}
			typeVar := new(shared.MapEntityActionConfigType)
			if !actionsItem.MapEntityActionConfig.Type.IsUnknown() && !actionsItem.MapEntityActionConfig.Type.IsNull() {
				*typeVar = shared.MapEntityActionConfigType(actionsItem.MapEntityActionConfig.Type.ValueString())
			} else {
				typeVar = nil
			}
			mapEntityActionConfig := shared.MapEntityActionConfig{
				AllowFailure:         allowFailure,
				Config:               config,
				CreatedAutomatically: createdAutomatically,
				FlowActionID:         flowActionID,
				ID:                   id,
				Name:                 name,
				Type:                 typeVar,
			}
			actions = append(actions, shared.AnyActionConfig{
				MapEntityActionConfig: &mapEntityActionConfig,
			})
		}
		if actionsItem.TriggerWorkflowActionConfig != nil {
			allowFailure1 := new(bool)
			if !actionsItem.TriggerWorkflowActionConfig.AllowFailure.IsUnknown() && !actionsItem.TriggerWorkflowActionConfig.AllowFailure.IsNull() {
				*allowFailure1 = actionsItem.TriggerWorkflowActionConfig.AllowFailure.ValueBool()
			} else {
				allowFailure1 = nil
			}
			var config1 *shared.TriggerWorkflowConfig
			if actionsItem.TriggerWorkflowActionConfig.Config != nil {
				var assignSteps []shared.AssignUsersToStep = nil
				for _, assignStepsItem := range actionsItem.TriggerWorkflowActionConfig.Config.AssignSteps {
					stepID := new(string)
					if !assignStepsItem.StepID.IsUnknown() && !assignStepsItem.StepID.IsNull() {
						*stepID = assignStepsItem.StepID.ValueString()
					} else {
						stepID = nil
					}
					stepName := new(string)
					if !assignStepsItem.StepName.IsUnknown() && !assignStepsItem.StepName.IsNull() {
						*stepName = assignStepsItem.StepName.ValueString()
					} else {
						stepName = nil
					}
					var userIds []float64 = nil
					for _, userIdsItem := range assignStepsItem.UserIds {
						userIdsTmp, _ := userIdsItem.ValueBigFloat().Float64()
						userIds = append(userIds, userIdsTmp)
					}
					assignSteps = append(assignSteps, shared.AssignUsersToStep{
						StepID:   stepID,
						StepName: stepName,
						UserIds:  userIds,
					})
				}
				var assignees []string = nil
				for _, assigneesItem := range actionsItem.TriggerWorkflowActionConfig.Config.Assignees {
					assignees = append(assignees, assigneesItem.ValueString())
				}
				var conditions []shared.TriggerWorkflowCondition = nil
				for _, conditionsItem := range actionsItem.TriggerWorkflowActionConfig.Config.Conditions {
					comparison := shared.Comparison(conditionsItem.Comparison.ValueString())
					schema1 := conditionsItem.Schema.ValueString()
					source2 := conditionsItem.Source.ValueString()
					var value1 *shared.TriggerWorkflowConditionValue
					if conditionsItem.Value != nil {
						str := new(string)
						if !conditionsItem.Value.Str.IsUnknown() && !conditionsItem.Value.Str.IsNull() {
							*str = conditionsItem.Value.Str.ValueString()
						} else {
							str = nil
						}
						if str != nil {
							value1 = &shared.TriggerWorkflowConditionValue{
								Str: str,
							}
						}
						number := new(float64)
						if !conditionsItem.Value.Number.IsUnknown() && !conditionsItem.Value.Number.IsNull() {
							*number, _ = conditionsItem.Value.Number.ValueBigFloat().Float64()
						} else {
							number = nil
						}
						if number != nil {
							value1 = &shared.TriggerWorkflowConditionValue{
								Number: number,
							}
						}
						var arrayOfstr1 []string = nil
						for _, arrayOfstrItem1 := range conditionsItem.Value.ArrayOfstr {
							arrayOfstr1 = append(arrayOfstr1, arrayOfstrItem1.ValueString())
						}
						if arrayOfstr1 != nil {
							value1 = &shared.TriggerWorkflowConditionValue{
								ArrayOfstr: arrayOfstr1,
							}
						}
						var arrayOfnumber []float64 = nil
						for _, arrayOfnumberItem := range conditionsItem.Value.ArrayOfnumber {
							arrayOfnumberTmp, _ := arrayOfnumberItem.ValueBigFloat().Float64()
							arrayOfnumber = append(arrayOfnumber, arrayOfnumberTmp)
						}
						if arrayOfnumber != nil {
							value1 = &shared.TriggerWorkflowConditionValue{
								ArrayOfnumber: arrayOfnumber,
							}
						}
					}
					conditions = append(conditions, shared.TriggerWorkflowCondition{
						Comparison: comparison,
						Schema:     schema1,
						Source:     source2,
						Value:      value1,
					})
				}
				targetWorkflow := new(string)
				if !actionsItem.TriggerWorkflowActionConfig.Config.TargetWorkflow.IsUnknown() && !actionsItem.TriggerWorkflowActionConfig.Config.TargetWorkflow.IsNull() {
					*targetWorkflow = actionsItem.TriggerWorkflowActionConfig.Config.TargetWorkflow.ValueString()
				} else {
					targetWorkflow = nil
				}
				config1 = &shared.TriggerWorkflowConfig{
					AssignSteps:    assignSteps,
					Assignees:      assignees,
					Conditions:     conditions,
					TargetWorkflow: targetWorkflow,
				}
			}
			createdAutomatically1 := new(bool)
			if !actionsItem.TriggerWorkflowActionConfig.CreatedAutomatically.IsUnknown() && !actionsItem.TriggerWorkflowActionConfig.CreatedAutomatically.IsNull() {
				*createdAutomatically1 = actionsItem.TriggerWorkflowActionConfig.CreatedAutomatically.ValueBool()
			} else {
				createdAutomatically1 = nil
			}
			flowActionId1 := new(string)
			if !actionsItem.TriggerWorkflowActionConfig.FlowActionID.IsUnknown() && !actionsItem.TriggerWorkflowActionConfig.FlowActionID.IsNull() {
				*flowActionId1 = actionsItem.TriggerWorkflowActionConfig.FlowActionID.ValueString()
			} else {
				flowActionId1 = nil
			}
			id1 := new(string)
			if !actionsItem.TriggerWorkflowActionConfig.ID.IsUnknown() && !actionsItem.TriggerWorkflowActionConfig.ID.IsNull() {
				*id1 = actionsItem.TriggerWorkflowActionConfig.ID.ValueString()
			} else {
				id1 = nil
			}
			name1 := new(string)
			if !actionsItem.TriggerWorkflowActionConfig.Name.IsUnknown() && !actionsItem.TriggerWorkflowActionConfig.Name.IsNull() {
				*name1 = actionsItem.TriggerWorkflowActionConfig.Name.ValueString()
			} else {
				name1 = nil
			}
			typeVar1 := new(shared.TriggerWorkflowActionConfigType)
			if !actionsItem.TriggerWorkflowActionConfig.Type.IsUnknown() && !actionsItem.TriggerWorkflowActionConfig.Type.IsNull() {
				*typeVar1 = shared.TriggerWorkflowActionConfigType(actionsItem.TriggerWorkflowActionConfig.Type.ValueString())
			} else {
				typeVar1 = nil
			}
			triggerWorkflowActionConfig := shared.TriggerWorkflowActionConfig{
				AllowFailure:         allowFailure1,
				Config:               config1,
				CreatedAutomatically: createdAutomatically1,
				FlowActionID:         flowActionId1,
				ID:                   id1,
				Name:                 name1,
				Type:                 typeVar1,
			}
			actions = append(actions, shared.AnyActionConfig{
				TriggerWorkflowActionConfig: &triggerWorkflowActionConfig,
			})
		}
		if actionsItem.TriggerWebhookActionConfig != nil {
			allowFailure2 := new(bool)
			if !actionsItem.TriggerWebhookActionConfig.AllowFailure.IsUnknown() && !actionsItem.TriggerWebhookActionConfig.AllowFailure.IsNull() {
				*allowFailure2 = actionsItem.TriggerWebhookActionConfig.AllowFailure.ValueBool()
			} else {
				allowFailure2 = nil
			}
			var config2 *shared.TriggerWebhookConfig
			if actionsItem.TriggerWebhookActionConfig.Config != nil {
				var entitySources []string = nil
				for _, entitySourcesItem := range actionsItem.TriggerWebhookActionConfig.Config.EntitySources {
					entitySources = append(entitySources, entitySourcesItem.ValueString())
				}
				targetWebhookID := new(string)
				if !actionsItem.TriggerWebhookActionConfig.Config.TargetWebhookID.IsUnknown() && !actionsItem.TriggerWebhookActionConfig.Config.TargetWebhookID.IsNull() {
					*targetWebhookID = actionsItem.TriggerWebhookActionConfig.Config.TargetWebhookID.ValueString()
				} else {
					targetWebhookID = nil
				}
				config2 = &shared.TriggerWebhookConfig{
					EntitySources:   entitySources,
					TargetWebhookID: targetWebhookID,
				}
			}
			createdAutomatically2 := new(bool)
			if !actionsItem.TriggerWebhookActionConfig.CreatedAutomatically.IsUnknown() && !actionsItem.TriggerWebhookActionConfig.CreatedAutomatically.IsNull() {
				*createdAutomatically2 = actionsItem.TriggerWebhookActionConfig.CreatedAutomatically.ValueBool()
			} else {
				createdAutomatically2 = nil
			}
			flowActionId2 := new(string)
			if !actionsItem.TriggerWebhookActionConfig.FlowActionID.IsUnknown() && !actionsItem.TriggerWebhookActionConfig.FlowActionID.IsNull() {
				*flowActionId2 = actionsItem.TriggerWebhookActionConfig.FlowActionID.ValueString()
			} else {
				flowActionId2 = nil
			}
			id2 := new(string)
			if !actionsItem.TriggerWebhookActionConfig.ID.IsUnknown() && !actionsItem.TriggerWebhookActionConfig.ID.IsNull() {
				*id2 = actionsItem.TriggerWebhookActionConfig.ID.ValueString()
			} else {
				id2 = nil
			}
			name2 := new(string)
			if !actionsItem.TriggerWebhookActionConfig.Name.IsUnknown() && !actionsItem.TriggerWebhookActionConfig.Name.IsNull() {
				*name2 = actionsItem.TriggerWebhookActionConfig.Name.ValueString()
			} else {
				name2 = nil
			}
			typeVar2 := new(shared.TriggerWebhookActionConfigType)
			if !actionsItem.TriggerWebhookActionConfig.Type.IsUnknown() && !actionsItem.TriggerWebhookActionConfig.Type.IsNull() {
				*typeVar2 = shared.TriggerWebhookActionConfigType(actionsItem.TriggerWebhookActionConfig.Type.ValueString())
			} else {
				typeVar2 = nil
			}
			triggerWebhookActionConfig := shared.TriggerWebhookActionConfig{
				AllowFailure:         allowFailure2,
				Config:               config2,
				CreatedAutomatically: createdAutomatically2,
				FlowActionID:         flowActionId2,
				ID:                   id2,
				Name:                 name2,
				Type:                 typeVar2,
			}
			actions = append(actions, shared.AnyActionConfig{
				TriggerWebhookActionConfig: &triggerWebhookActionConfig,
			})
		}
		if actionsItem.CreateDocumentActionConfig != nil {
			allowFailure3 := new(bool)
			if !actionsItem.CreateDocumentActionConfig.AllowFailure.IsUnknown() && !actionsItem.CreateDocumentActionConfig.AllowFailure.IsNull() {
				*allowFailure3 = actionsItem.CreateDocumentActionConfig.AllowFailure.ValueBool()
			} else {
				allowFailure3 = nil
			}
			var config3 *shared.CreateDocumentConfig
			if actionsItem.CreateDocumentActionConfig.Config != nil {
				filename := new(string)
				if !actionsItem.CreateDocumentActionConfig.Config.Filename.IsUnknown() && !actionsItem.CreateDocumentActionConfig.Config.Filename.IsNull() {
					*filename = actionsItem.CreateDocumentActionConfig.Config.Filename.ValueString()
				} else {
					filename = nil
				}
				templateID := new(string)
				if !actionsItem.CreateDocumentActionConfig.Config.TemplateID.IsUnknown() && !actionsItem.CreateDocumentActionConfig.Config.TemplateID.IsNull() {
					*templateID = actionsItem.CreateDocumentActionConfig.Config.TemplateID.ValueString()
				} else {
					templateID = nil
				}
				config3 = &shared.CreateDocumentConfig{
					Filename:   filename,
					TemplateID: templateID,
				}
			}
			createdAutomatically3 := new(bool)
			if !actionsItem.CreateDocumentActionConfig.CreatedAutomatically.IsUnknown() && !actionsItem.CreateDocumentActionConfig.CreatedAutomatically.IsNull() {
				*createdAutomatically3 = actionsItem.CreateDocumentActionConfig.CreatedAutomatically.ValueBool()
			} else {
				createdAutomatically3 = nil
			}
			flowActionId3 := new(string)
			if !actionsItem.CreateDocumentActionConfig.FlowActionID.IsUnknown() && !actionsItem.CreateDocumentActionConfig.FlowActionID.IsNull() {
				*flowActionId3 = actionsItem.CreateDocumentActionConfig.FlowActionID.ValueString()
			} else {
				flowActionId3 = nil
			}
			id3 := new(string)
			if !actionsItem.CreateDocumentActionConfig.ID.IsUnknown() && !actionsItem.CreateDocumentActionConfig.ID.IsNull() {
				*id3 = actionsItem.CreateDocumentActionConfig.ID.ValueString()
			} else {
				id3 = nil
			}
			name3 := new(string)
			if !actionsItem.CreateDocumentActionConfig.Name.IsUnknown() && !actionsItem.CreateDocumentActionConfig.Name.IsNull() {
				*name3 = actionsItem.CreateDocumentActionConfig.Name.ValueString()
			} else {
				name3 = nil
			}
			typeVar3 := new(shared.CreateDocumentActionConfigType)
			if !actionsItem.CreateDocumentActionConfig.Type.IsUnknown() && !actionsItem.CreateDocumentActionConfig.Type.IsNull() {
				*typeVar3 = shared.CreateDocumentActionConfigType(actionsItem.CreateDocumentActionConfig.Type.ValueString())
			} else {
				typeVar3 = nil
			}
			createDocumentActionConfig := shared.CreateDocumentActionConfig{
				AllowFailure:         allowFailure3,
				Config:               config3,
				CreatedAutomatically: createdAutomatically3,
				FlowActionID:         flowActionId3,
				ID:                   id3,
				Name:                 name3,
				Type:                 typeVar3,
			}
			actions = append(actions, shared.AnyActionConfig{
				CreateDocumentActionConfig: &createDocumentActionConfig,
			})
		}
		if actionsItem.SendEmailActionConfig != nil {
			allowFailure4 := new(bool)
			if !actionsItem.SendEmailActionConfig.AllowFailure.IsUnknown() && !actionsItem.SendEmailActionConfig.AllowFailure.IsNull() {
				*allowFailure4 = actionsItem.SendEmailActionConfig.AllowFailure.ValueBool()
			} else {
				allowFailure4 = nil
			}
			var config4 *shared.SendEmailConfig
			if actionsItem.SendEmailActionConfig.Config != nil {
				var attachments []shared.SendEmailConfigAttachments = nil
				for _, attachmentsItem := range actionsItem.SendEmailActionConfig.Config.Attachments {
					var sourceFilter1 *shared.SendEmailConfigAttachmentsSourceFilter
					if attachmentsItem.SourceFilter != nil {
						attribute1 := new(string)
						if !attachmentsItem.SourceFilter.Attribute.IsUnknown() && !attachmentsItem.SourceFilter.Attribute.IsNull() {
							*attribute1 = attachmentsItem.SourceFilter.Attribute.ValueString()
						} else {
							attribute1 = nil
						}
						documentType := new(shared.SendEmailConfigAttachmentsSourceFilterDocumentType)
						if !attachmentsItem.SourceFilter.DocumentType.IsUnknown() && !attachmentsItem.SourceFilter.DocumentType.IsNull() {
							*documentType = shared.SendEmailConfigAttachmentsSourceFilterDocumentType(attachmentsItem.SourceFilter.DocumentType.ValueString())
						} else {
							documentType = nil
						}
						filenameRegex := new(string)
						if !attachmentsItem.SourceFilter.FilenameRegex.IsUnknown() && !attachmentsItem.SourceFilter.FilenameRegex.IsNull() {
							*filenameRegex = attachmentsItem.SourceFilter.FilenameRegex.ValueString()
						} else {
							filenameRegex = nil
						}
						limit1 := new(int64)
						if !attachmentsItem.SourceFilter.Limit.IsUnknown() && !attachmentsItem.SourceFilter.Limit.IsNull() {
							*limit1 = attachmentsItem.SourceFilter.Limit.ValueInt64()
						} else {
							limit1 = nil
						}
						relationTag1 := new(string)
						if !attachmentsItem.SourceFilter.RelationTag.IsUnknown() && !attachmentsItem.SourceFilter.RelationTag.IsNull() {
							*relationTag1 = attachmentsItem.SourceFilter.RelationTag.ValueString()
						} else {
							relationTag1 = nil
						}
						self1 := new(bool)
						if !attachmentsItem.SourceFilter.Self.IsUnknown() && !attachmentsItem.SourceFilter.Self.IsNull() {
							*self1 = attachmentsItem.SourceFilter.Self.ValueBool()
						} else {
							self1 = nil
						}
						tag1 := new(string)
						if !attachmentsItem.SourceFilter.Tag.IsUnknown() && !attachmentsItem.SourceFilter.Tag.IsNull() {
							*tag1 = attachmentsItem.SourceFilter.Tag.ValueString()
						} else {
							tag1 = nil
						}
						sourceFilter1 = &shared.SendEmailConfigAttachmentsSourceFilter{
							Attribute:     attribute1,
							DocumentType:  documentType,
							FilenameRegex: filenameRegex,
							Limit:         limit1,
							RelationTag:   relationTag1,
							Self:          self1,
							Tag:           tag1,
						}
					}
					attachments = append(attachments, shared.SendEmailConfigAttachments{
						SourceFilter: sourceFilter1,
					})
				}
				emailTemplateID := new(string)
				if !actionsItem.SendEmailActionConfig.Config.EmailTemplateID.IsUnknown() && !actionsItem.SendEmailActionConfig.Config.EmailTemplateID.IsNull() {
					*emailTemplateID = actionsItem.SendEmailActionConfig.Config.EmailTemplateID.ValueString()
				} else {
					emailTemplateID = nil
				}
				languageCode := new(shared.SendEmailConfigLanguageCode)
				if !actionsItem.SendEmailActionConfig.Config.LanguageCode.IsUnknown() && !actionsItem.SendEmailActionConfig.Config.LanguageCode.IsNull() {
					*languageCode = shared.SendEmailConfigLanguageCode(actionsItem.SendEmailActionConfig.Config.LanguageCode.ValueString())
				} else {
					languageCode = nil
				}
				config4 = &shared.SendEmailConfig{
					Attachments:     attachments,
					EmailTemplateID: emailTemplateID,
					LanguageCode:    languageCode,
				}
			}
			createdAutomatically4 := new(bool)
			if !actionsItem.SendEmailActionConfig.CreatedAutomatically.IsUnknown() && !actionsItem.SendEmailActionConfig.CreatedAutomatically.IsNull() {
				*createdAutomatically4 = actionsItem.SendEmailActionConfig.CreatedAutomatically.ValueBool()
			} else {
				createdAutomatically4 = nil
			}
			flowActionId4 := new(string)
			if !actionsItem.SendEmailActionConfig.FlowActionID.IsUnknown() && !actionsItem.SendEmailActionConfig.FlowActionID.IsNull() {
				*flowActionId4 = actionsItem.SendEmailActionConfig.FlowActionID.ValueString()
			} else {
				flowActionId4 = nil
			}
			id4 := new(string)
			if !actionsItem.SendEmailActionConfig.ID.IsUnknown() && !actionsItem.SendEmailActionConfig.ID.IsNull() {
				*id4 = actionsItem.SendEmailActionConfig.ID.ValueString()
			} else {
				id4 = nil
			}
			name4 := new(string)
			if !actionsItem.SendEmailActionConfig.Name.IsUnknown() && !actionsItem.SendEmailActionConfig.Name.IsNull() {
				*name4 = actionsItem.SendEmailActionConfig.Name.ValueString()
			} else {
				name4 = nil
			}
			typeVar4 := new(shared.SendEmailActionConfigType)
			if !actionsItem.SendEmailActionConfig.Type.IsUnknown() && !actionsItem.SendEmailActionConfig.Type.IsNull() {
				*typeVar4 = shared.SendEmailActionConfigType(actionsItem.SendEmailActionConfig.Type.ValueString())
			} else {
				typeVar4 = nil
			}
			sendEmailActionConfig := shared.SendEmailActionConfig{
				AllowFailure:         allowFailure4,
				Config:               config4,
				CreatedAutomatically: createdAutomatically4,
				FlowActionID:         flowActionId4,
				ID:                   id4,
				Name:                 name4,
				Type:                 typeVar4,
			}
			actions = append(actions, shared.AnyActionConfig{
				SendEmailActionConfig: &sendEmailActionConfig,
			})
		}
		if actionsItem.CartCheckoutActionConfig != nil {
			allowFailure5 := new(bool)
			if !actionsItem.CartCheckoutActionConfig.AllowFailure.IsUnknown() && !actionsItem.CartCheckoutActionConfig.AllowFailure.IsNull() {
				*allowFailure5 = actionsItem.CartCheckoutActionConfig.AllowFailure.ValueBool()
			} else {
				allowFailure5 = nil
			}
			var config5 *shared.CartCheckoutConfig
			if actionsItem.CartCheckoutActionConfig.Config != nil {
				linkbackRelationAttribute1 := new(string)
				if !actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationAttribute.IsUnknown() && !actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationAttribute.IsNull() {
					*linkbackRelationAttribute1 = actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationAttribute.ValueString()
				} else {
					linkbackRelationAttribute1 = nil
				}
				var linkbackRelationTags1 []string = nil
				for _, linkbackRelationTagsItem1 := range actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationTags {
					linkbackRelationTags1 = append(linkbackRelationTags1, linkbackRelationTagsItem1.ValueString())
				}
				var mappingAttributes1 []shared.CartCheckoutConfigMappingAttributes = nil
				for _, mappingAttributesItem1 := range actionsItem.CartCheckoutActionConfig.Config.MappingAttributes {
					if mappingAttributesItem1.MappingAttributeV2 != nil {
						var operation1 shared.OperationNode
						var operationObjectNode1 *shared.OperationObjectNode
						if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode != nil {
							var append2 []interface{} = nil
							for _, appendItem1 := range mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Append {
								var appendTmp1 interface{}
								_ = json.Unmarshal([]byte(appendItem1.ValueString()), &appendTmp1)
								append2 = append(append2, appendTmp1)
							}
							copy1 := new(string)
							if !mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Copy.IsUnknown() && !mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Copy.IsNull() {
								*copy1 = mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Copy.ValueString()
							} else {
								copy1 = nil
							}
							var set1 interface{}
							if !mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Set.IsUnknown() && !mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Set.IsNull() {
								_ = json.Unmarshal([]byte(mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Set.ValueString()), &set1)
							}
							var uniq1 *shared.OperationObjectNodeUniq
							if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq != nil {
								boolean1 := new(bool)
								if !mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean.IsUnknown() && !mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean.IsNull() {
									*boolean1 = mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean.ValueBool()
								} else {
									boolean1 = nil
								}
								if boolean1 != nil {
									uniq1 = &shared.OperationObjectNodeUniq{
										Boolean: boolean1,
									}
								}
								var arrayOfstr2 []string = nil
								for _, arrayOfstrItem2 := range mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr {
									arrayOfstr2 = append(arrayOfstr2, arrayOfstrItem2.ValueString())
								}
								if arrayOfstr2 != nil {
									uniq1 = &shared.OperationObjectNodeUniq{
										ArrayOfstr: arrayOfstr2,
									}
								}
							}
							var additionalProperties1 interface{}
							if !mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties.IsUnknown() && !mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties.IsNull() {
								_ = json.Unmarshal([]byte(mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties.ValueString()), &additionalProperties1)
							}
							operationObjectNode1 = &shared.OperationObjectNode{
								Append:               append2,
								Copy:                 copy1,
								Set:                  set1,
								Uniq:                 uniq1,
								AdditionalProperties: additionalProperties1,
							}
						}
						if operationObjectNode1 != nil {
							operation1 = shared.OperationNode{
								OperationObjectNode: operationObjectNode1,
							}
						}
						var any1 interface{}
						if !mappingAttributesItem1.MappingAttributeV2.Operation.Any.IsUnknown() && !mappingAttributesItem1.MappingAttributeV2.Operation.Any.IsNull() {
							_ = json.Unmarshal([]byte(mappingAttributesItem1.MappingAttributeV2.Operation.Any.ValueString()), &any1)
						}
						if any1 != nil {
							operation1 = shared.OperationNode{
								Any: any1,
							}
						}
						target5 := new(string)
						if !mappingAttributesItem1.MappingAttributeV2.Target.IsUnknown() && !mappingAttributesItem1.MappingAttributeV2.Target.IsNull() {
							*target5 = mappingAttributesItem1.MappingAttributeV2.Target.ValueString()
						} else {
							target5 = nil
						}
						mappingAttributeV21 := shared.MappingAttributeV2{
							Operation: operation1,
							Target:    target5,
						}
						mappingAttributes1 = append(mappingAttributes1, shared.CartCheckoutConfigMappingAttributes{
							MappingAttributeV2: &mappingAttributeV21,
						})
					}
					if mappingAttributesItem1.MappingAttribute != nil {
						var mappingAttribute1 shared.MappingAttribute
						var setValueMapper1 *shared.SetValueMapper
						if mappingAttributesItem1.MappingAttribute.SetValueMapper != nil {
							mode4 := shared.MappingAttributeMode(mappingAttributesItem1.MappingAttribute.SetValueMapper.Mode.ValueString())
							target6 := mappingAttributesItem1.MappingAttribute.SetValueMapper.Target.ValueString()
							var value2 interface{}
							_ = json.Unmarshal([]byte(mappingAttributesItem1.MappingAttribute.SetValueMapper.Value.ValueString()), &value2)
							setValueMapper1 = &shared.SetValueMapper{
								Mode:   mode4,
								Target: target6,
								Value:  value2,
							}
						}
						if setValueMapper1 != nil {
							mappingAttribute1 = shared.MappingAttribute{
								SetValueMapper: setValueMapper1,
							}
						}
						var copyValueMapper1 *shared.CopyValueMapper
						if mappingAttributesItem1.MappingAttribute.CopyValueMapper != nil {
							mode5 := shared.MappingAttributeMode(mappingAttributesItem1.MappingAttribute.CopyValueMapper.Mode.ValueString())
							source3 := mappingAttributesItem1.MappingAttribute.CopyValueMapper.Source.ValueString()
							target7 := mappingAttributesItem1.MappingAttribute.CopyValueMapper.Target.ValueString()
							copyValueMapper1 = &shared.CopyValueMapper{
								Mode:   mode5,
								Source: source3,
								Target: target7,
							}
						}
						if copyValueMapper1 != nil {
							mappingAttribute1 = shared.MappingAttribute{
								CopyValueMapper: copyValueMapper1,
							}
						}
						var appendValueMapper1 *shared.AppendValueMapper
						if mappingAttributesItem1.MappingAttribute.AppendValueMapper != nil {
							mode6 := shared.MappingAttributeMode(mappingAttributesItem1.MappingAttribute.AppendValueMapper.Mode.ValueString())
							source4 := new(string)
							if !mappingAttributesItem1.MappingAttribute.AppendValueMapper.Source.IsUnknown() && !mappingAttributesItem1.MappingAttribute.AppendValueMapper.Source.IsNull() {
								*source4 = mappingAttributesItem1.MappingAttribute.AppendValueMapper.Source.ValueString()
							} else {
								source4 = nil
							}
							target8 := mappingAttributesItem1.MappingAttribute.AppendValueMapper.Target.ValueString()
							var targetUnique2 []string = nil
							for _, targetUniqueItem2 := range mappingAttributesItem1.MappingAttribute.AppendValueMapper.TargetUnique {
								targetUnique2 = append(targetUnique2, targetUniqueItem2.ValueString())
							}
							valueJson1 := mappingAttributesItem1.MappingAttribute.AppendValueMapper.ValueJSON.ValueString()
							appendValueMapper1 = &shared.AppendValueMapper{
								Mode:         mode6,
								Source:       source4,
								Target:       target8,
								TargetUnique: targetUnique2,
								ValueJSON:    valueJson1,
							}
						}
						if appendValueMapper1 != nil {
							mappingAttribute1 = shared.MappingAttribute{
								AppendValueMapper: appendValueMapper1,
							}
						}
						mappingAttributes1 = append(mappingAttributes1, shared.CartCheckoutConfigMappingAttributes{
							MappingAttribute: &mappingAttribute1,
						})
					}
				}
				var mappingConfig1 *shared.MappingConfigRef
				if actionsItem.CartCheckoutActionConfig.Config.MappingConfig != nil {
					configId1 := actionsItem.CartCheckoutActionConfig.Config.MappingConfig.ConfigID.ValueString()
					targetId1 := actionsItem.CartCheckoutActionConfig.Config.MappingConfig.TargetID.ValueString()
					version1 := new(float64)
					if !actionsItem.CartCheckoutActionConfig.Config.MappingConfig.Version.IsUnknown() && !actionsItem.CartCheckoutActionConfig.Config.MappingConfig.Version.IsNull() {
						*version1, _ = actionsItem.CartCheckoutActionConfig.Config.MappingConfig.Version.ValueBigFloat().Float64()
					} else {
						version1 = nil
					}
					mappingConfig1 = &shared.MappingConfigRef{
						ConfigID: configId1,
						TargetID: targetId1,
						Version:  version1,
					}
				}
				var relationAttributes1 []shared.RelationAttribute = nil
				for _, relationAttributesItem1 := range actionsItem.CartCheckoutActionConfig.Config.RelationAttributes {
					mode7 := shared.RelationAttributeMode(relationAttributesItem1.Mode.ValueString())
					relatedTo1 := make(map[string]interface{})
					// Warning. This is a map, but the source tf var is not a map. This might indicate a bug.
					var sourceFilter2 *shared.RelationAttributeSourceFilter
					if relationAttributesItem1.SourceFilter != nil {
						attribute2 := new(string)
						if !relationAttributesItem1.SourceFilter.Attribute.IsUnknown() && !relationAttributesItem1.SourceFilter.Attribute.IsNull() {
							*attribute2 = relationAttributesItem1.SourceFilter.Attribute.ValueString()
						} else {
							attribute2 = nil
						}
						limit2 := new(int64)
						if !relationAttributesItem1.SourceFilter.Limit.IsUnknown() && !relationAttributesItem1.SourceFilter.Limit.IsNull() {
							*limit2 = relationAttributesItem1.SourceFilter.Limit.ValueInt64()
						} else {
							limit2 = nil
						}
						relationTag2 := new(string)
						if !relationAttributesItem1.SourceFilter.RelationTag.IsUnknown() && !relationAttributesItem1.SourceFilter.RelationTag.IsNull() {
							*relationTag2 = relationAttributesItem1.SourceFilter.RelationTag.ValueString()
						} else {
							relationTag2 = nil
						}
						schema2 := new(string)
						if !relationAttributesItem1.SourceFilter.Schema.IsUnknown() && !relationAttributesItem1.SourceFilter.Schema.IsNull() {
							*schema2 = relationAttributesItem1.SourceFilter.Schema.ValueString()
						} else {
							schema2 = nil
						}
						self2 := new(bool)
						if !relationAttributesItem1.SourceFilter.Self.IsUnknown() && !relationAttributesItem1.SourceFilter.Self.IsNull() {
							*self2 = relationAttributesItem1.SourceFilter.Self.ValueBool()
						} else {
							self2 = nil
						}
						tag2 := new(string)
						if !relationAttributesItem1.SourceFilter.Tag.IsUnknown() && !relationAttributesItem1.SourceFilter.Tag.IsNull() {
							*tag2 = relationAttributesItem1.SourceFilter.Tag.ValueString()
						} else {
							tag2 = nil
						}
						sourceFilter2 = &shared.RelationAttributeSourceFilter{
							Attribute:   attribute2,
							Limit:       limit2,
							RelationTag: relationTag2,
							Schema:      schema2,
							Self:        self2,
							Tag:         tag2,
						}
					}
					target9 := relationAttributesItem1.Target.ValueString()
					var targetTags1 []string = nil
					for _, targetTagsItem1 := range relationAttributesItem1.TargetTags {
						targetTags1 = append(targetTags1, targetTagsItem1.ValueString())
					}
					targetTagsIncludeSource1 := new(bool)
					if !relationAttributesItem1.TargetTagsIncludeSource.IsUnknown() && !relationAttributesItem1.TargetTagsIncludeSource.IsNull() {
						*targetTagsIncludeSource1 = relationAttributesItem1.TargetTagsIncludeSource.ValueBool()
					} else {
						targetTagsIncludeSource1 = nil
					}
					relationAttributes1 = append(relationAttributes1, shared.RelationAttribute{
						Mode:                    mode7,
						RelatedTo:               relatedTo1,
						SourceFilter:            sourceFilter2,
						Target:                  target9,
						TargetTags:              targetTags1,
						TargetTagsIncludeSource: targetTagsIncludeSource1,
					})
				}
				var targetUnique3 []string = nil
				for _, targetUniqueItem3 := range actionsItem.CartCheckoutActionConfig.Config.TargetUnique {
					targetUnique3 = append(targetUnique3, targetUniqueItem3.ValueString())
				}
				version2 := new(string)
				if !actionsItem.CartCheckoutActionConfig.Config.Version.IsUnknown() && !actionsItem.CartCheckoutActionConfig.Config.Version.IsNull() {
					*version2 = actionsItem.CartCheckoutActionConfig.Config.Version.ValueString()
				} else {
					version2 = nil
				}
				config5 = &shared.CartCheckoutConfig{
					LinkbackRelationAttribute: linkbackRelationAttribute1,
					LinkbackRelationTags:      linkbackRelationTags1,
					MappingAttributes:         mappingAttributes1,
					MappingConfig:             mappingConfig1,
					RelationAttributes:        relationAttributes1,
					TargetUnique:              targetUnique3,
					Version:                   version2,
				}
			}
			createdAutomatically5 := new(bool)
			if !actionsItem.CartCheckoutActionConfig.CreatedAutomatically.IsUnknown() && !actionsItem.CartCheckoutActionConfig.CreatedAutomatically.IsNull() {
				*createdAutomatically5 = actionsItem.CartCheckoutActionConfig.CreatedAutomatically.ValueBool()
			} else {
				createdAutomatically5 = nil
			}
			flowActionId5 := new(string)
			if !actionsItem.CartCheckoutActionConfig.FlowActionID.IsUnknown() && !actionsItem.CartCheckoutActionConfig.FlowActionID.IsNull() {
				*flowActionId5 = actionsItem.CartCheckoutActionConfig.FlowActionID.ValueString()
			} else {
				flowActionId5 = nil
			}
			id5 := new(string)
			if !actionsItem.CartCheckoutActionConfig.ID.IsUnknown() && !actionsItem.CartCheckoutActionConfig.ID.IsNull() {
				*id5 = actionsItem.CartCheckoutActionConfig.ID.ValueString()
			} else {
				id5 = nil
			}
			name5 := new(string)
			if !actionsItem.CartCheckoutActionConfig.Name.IsUnknown() && !actionsItem.CartCheckoutActionConfig.Name.IsNull() {
				*name5 = actionsItem.CartCheckoutActionConfig.Name.ValueString()
			} else {
				name5 = nil
			}
			typeVar5 := new(shared.CartCheckoutActionConfigType)
			if !actionsItem.CartCheckoutActionConfig.Type.IsUnknown() && !actionsItem.CartCheckoutActionConfig.Type.IsNull() {
				*typeVar5 = shared.CartCheckoutActionConfigType(actionsItem.CartCheckoutActionConfig.Type.ValueString())
			} else {
				typeVar5 = nil
			}
			cartCheckoutActionConfig := shared.CartCheckoutActionConfig{
				AllowFailure:         allowFailure5,
				Config:               config5,
				CreatedAutomatically: createdAutomatically5,
				FlowActionID:         flowActionId5,
				ID:                   id5,
				Name:                 name5,
				Type:                 typeVar5,
			}
			actions = append(actions, shared.AnyActionConfig{
				CartCheckoutActionConfig: &cartCheckoutActionConfig,
			})
		}
		if actionsItem.AutomationActionConfig != nil {
			allowFailure6 := new(bool)
			if !actionsItem.AutomationActionConfig.AllowFailure.IsUnknown() && !actionsItem.AutomationActionConfig.AllowFailure.IsNull() {
				*allowFailure6 = actionsItem.AutomationActionConfig.AllowFailure.ValueBool()
			} else {
				allowFailure6 = nil
			}
			config6 := make(map[string]interface{})
			// Warning. This is a map, but the source tf var is not a map. This might indicate a bug.
			createdAutomatically6 := new(bool)
			if !actionsItem.AutomationActionConfig.CreatedAutomatically.IsUnknown() && !actionsItem.AutomationActionConfig.CreatedAutomatically.IsNull() {
				*createdAutomatically6 = actionsItem.AutomationActionConfig.CreatedAutomatically.ValueBool()
			} else {
				createdAutomatically6 = nil
			}
			flowActionId6 := new(string)
			if !actionsItem.AutomationActionConfig.FlowActionID.IsUnknown() && !actionsItem.AutomationActionConfig.FlowActionID.IsNull() {
				*flowActionId6 = actionsItem.AutomationActionConfig.FlowActionID.ValueString()
			} else {
				flowActionId6 = nil
			}
			id6 := new(string)
			if !actionsItem.AutomationActionConfig.ID.IsUnknown() && !actionsItem.AutomationActionConfig.ID.IsNull() {
				*id6 = actionsItem.AutomationActionConfig.ID.ValueString()
			} else {
				id6 = nil
			}
			name6 := new(string)
			if !actionsItem.AutomationActionConfig.Name.IsUnknown() && !actionsItem.AutomationActionConfig.Name.IsNull() {
				*name6 = actionsItem.AutomationActionConfig.Name.ValueString()
			} else {
				name6 = nil
			}
			typeVar6 := new(string)
			if !actionsItem.AutomationActionConfig.Type.IsUnknown() && !actionsItem.AutomationActionConfig.Type.IsNull() {
				*typeVar6 = actionsItem.AutomationActionConfig.Type.ValueString()
			} else {
				typeVar6 = nil
			}
			automationActionConfig := shared.AutomationActionConfig{
				AllowFailure:         allowFailure6,
				Config:               config6,
				CreatedAutomatically: createdAutomatically6,
				FlowActionID:         flowActionId6,
				ID:                   id6,
				Name:                 name6,
				Type:                 typeVar6,
			}
			actions = append(actions, shared.AnyActionConfig{
				AutomationActionConfig: &automationActionConfig,
			})
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	entitySchema := new(string)
	if !r.EntitySchema.IsUnknown() && !r.EntitySchema.IsNull() {
		*entitySchema = r.EntitySchema.ValueString()
	} else {
		entitySchema = nil
	}
	flowName := r.FlowName.ValueString()
	runs := new(float64)
	if !r.Runs.IsUnknown() && !r.Runs.IsNull() {
		*runs, _ = r.Runs.ValueBigFloat().Float64()
	} else {
		runs = nil
	}
	var triggerConditions []shared.TriggerCondition = nil
	for _, triggerConditionsItem := range r.TriggerConditions {
		comparison1 := shared.Comparison(triggerConditionsItem.Comparison.ValueString())
		source5 := triggerConditionsItem.Source.ValueString()
		var value3 *shared.TriggerConditionValue
		if triggerConditionsItem.Value != nil {
			str1 := new(string)
			if !triggerConditionsItem.Value.Str.IsUnknown() && !triggerConditionsItem.Value.Str.IsNull() {
				*str1 = triggerConditionsItem.Value.Str.ValueString()
			} else {
				str1 = nil
			}
			if str1 != nil {
				value3 = &shared.TriggerConditionValue{
					Str: str1,
				}
			}
			number1 := new(float64)
			if !triggerConditionsItem.Value.Number.IsUnknown() && !triggerConditionsItem.Value.Number.IsNull() {
				*number1, _ = triggerConditionsItem.Value.Number.ValueBigFloat().Float64()
			} else {
				number1 = nil
			}
			if number1 != nil {
				value3 = &shared.TriggerConditionValue{
					Number: number1,
				}
			}
			var arrayOfstr3 []string = nil
			for _, arrayOfstrItem3 := range triggerConditionsItem.Value.ArrayOfstr {
				arrayOfstr3 = append(arrayOfstr3, arrayOfstrItem3.ValueString())
			}
			if arrayOfstr3 != nil {
				value3 = &shared.TriggerConditionValue{
					ArrayOfstr: arrayOfstr3,
				}
			}
			var arrayOfnumber1 []float64 = nil
			for _, arrayOfnumberItem1 := range triggerConditionsItem.Value.ArrayOfnumber {
				arrayOfnumberTmp1, _ := arrayOfnumberItem1.ValueBigFloat().Float64()
				arrayOfnumber1 = append(arrayOfnumber1, arrayOfnumberTmp1)
			}
			if arrayOfnumber1 != nil {
				value3 = &shared.TriggerConditionValue{
					ArrayOfnumber: arrayOfnumber1,
				}
			}
		}
		triggerConditions = append(triggerConditions, shared.TriggerCondition{
			Comparison: comparison1,
			Source:     source5,
			Value:      value3,
		})
	}
	var triggers []shared.AnyTrigger = nil
	for _, triggersItem := range r.Triggers {
		if triggersItem.FrontendSubmitTrigger != nil {
			sourceID := new(string)
			if !triggersItem.FrontendSubmitTrigger.Configuration.SourceID.IsUnknown() && !triggersItem.FrontendSubmitTrigger.Configuration.SourceID.IsNull() {
				*sourceID = triggersItem.FrontendSubmitTrigger.Configuration.SourceID.ValueString()
			} else {
				sourceID = nil
			}
			configuration := shared.FrontendSubmitTriggerConfiguration{
				SourceID: sourceID,
			}
			typeVar7 := shared.FrontendSubmitTriggerType(triggersItem.FrontendSubmitTrigger.Type.ValueString())
			frontendSubmitTrigger := shared.FrontendSubmitTrigger{
				Configuration: configuration,
				Type:          typeVar7,
			}
			triggers = append(triggers, shared.AnyTrigger{
				FrontendSubmitTrigger: &frontendSubmitTrigger,
			})
		}
		if triggersItem.JourneySubmitTrigger != nil {
			sourceId1 := triggersItem.JourneySubmitTrigger.Configuration.SourceID.ValueString()
			configuration1 := shared.JourneySubmitTriggerConfiguration{
				SourceID: sourceId1,
			}
			typeVar8 := shared.JourneySubmitTriggerType(triggersItem.JourneySubmitTrigger.Type.ValueString())
			journeySubmitTrigger := shared.JourneySubmitTrigger{
				Configuration: configuration1,
				Type:          typeVar8,
			}
			triggers = append(triggers, shared.AnyTrigger{
				JourneySubmitTrigger: &journeySubmitTrigger,
			})
		}
		if triggersItem.APISubmissionTrigger != nil {
			sourceId2 := new(string)
			if !triggersItem.APISubmissionTrigger.Configuration.SourceID.IsUnknown() && !triggersItem.APISubmissionTrigger.Configuration.SourceID.IsNull() {
				*sourceId2 = triggersItem.APISubmissionTrigger.Configuration.SourceID.ValueString()
			} else {
				sourceId2 = nil
			}
			configuration2 := shared.APISubmissionTriggerConfiguration{
				SourceID: sourceId2,
			}
			typeVar9 := shared.APISubmissionTriggerType(triggersItem.APISubmissionTrigger.Type.ValueString())
			apiSubmissionTrigger := shared.APISubmissionTrigger{
				Configuration: configuration2,
				Type:          typeVar9,
			}
			triggers = append(triggers, shared.AnyTrigger{
				APISubmissionTrigger: &apiSubmissionTrigger,
			})
		}
		if triggersItem.EntityOperationTrigger != nil {
			var excludeActivities []string = nil
			for _, excludeActivitiesItem := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
				excludeActivities = append(excludeActivities, excludeActivitiesItem.ValueString())
			}
			var includeActivities []string = nil
			for _, includeActivitiesItem := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
				includeActivities = append(includeActivities, includeActivitiesItem.ValueString())
			}
			var operationsVar []shared.EntityOperationTriggerConfigurationOperations = nil
			for _, operationsItem := range triggersItem.EntityOperationTrigger.Configuration.Operations {
				operationsVar = append(operationsVar, shared.EntityOperationTriggerConfigurationOperations(operationsItem.ValueString()))
			}
			schema3 := triggersItem.EntityOperationTrigger.Configuration.Schema.ValueString()
			configuration3 := shared.EntityOperationTriggerConfiguration{
				ExcludeActivities: excludeActivities,
				IncludeActivities: includeActivities,
				Operations:        operationsVar,
				Schema:            schema3,
			}
			typeVar10 := shared.EntityOperationTriggerType(triggersItem.EntityOperationTrigger.Type.ValueString())
			entityOperationTrigger := shared.EntityOperationTrigger{
				Configuration: configuration3,
				Type:          typeVar10,
			}
			triggers = append(triggers, shared.AnyTrigger{
				EntityOperationTrigger: &entityOperationTrigger,
			})
		}
		if triggersItem.ActivityTrigger != nil {
			schema4 := new(string)
			if !triggersItem.ActivityTrigger.Configuration.Schema.IsUnknown() && !triggersItem.ActivityTrigger.Configuration.Schema.IsNull() {
				*schema4 = triggersItem.ActivityTrigger.Configuration.Schema.ValueString()
			} else {
				schema4 = nil
			}
			var types []shared.ActivityTriggerConfigurationTypes = nil
			for _, typesItem := range triggersItem.ActivityTrigger.Configuration.Types {
				types = append(types, shared.ActivityTriggerConfigurationTypes(typesItem.ValueString()))
			}
			configuration4 := shared.ActivityTriggerConfiguration{
				Schema: schema4,
				Types:  types,
			}
			typeVar11 := shared.ActivityTriggerType(triggersItem.ActivityTrigger.Type.ValueString())
			activityTrigger := shared.ActivityTrigger{
				Configuration: configuration4,
				Type:          typeVar11,
			}
			triggers = append(triggers, shared.AnyTrigger{
				ActivityTrigger: &activityTrigger,
			})
		}
		if triggersItem.EntityManualTrigger != nil {
			schema5 := new(string)
			if !triggersItem.EntityManualTrigger.Configuration.Schema.IsUnknown() && !triggersItem.EntityManualTrigger.Configuration.Schema.IsNull() {
				*schema5 = triggersItem.EntityManualTrigger.Configuration.Schema.ValueString()
			} else {
				schema5 = nil
			}
			configuration5 := shared.EntityManualTriggerConfiguration{
				Schema: schema5,
			}
			typeVar12 := shared.EntityManualTriggerType(triggersItem.EntityManualTrigger.Type.ValueString())
			entityManualTrigger := shared.EntityManualTrigger{
				Configuration: configuration5,
				Type:          typeVar12,
			}
			triggers = append(triggers, shared.AnyTrigger{
				EntityManualTrigger: &entityManualTrigger,
			})
		}
		if triggersItem.ReceivedEmailTrigger != nil {
			messageType := new(shared.ReceivedEmailTriggerConfigurationMessageType)
			if !triggersItem.ReceivedEmailTrigger.Configuration.MessageType.IsUnknown() && !triggersItem.ReceivedEmailTrigger.Configuration.MessageType.IsNull() {
				*messageType = shared.ReceivedEmailTriggerConfigurationMessageType(triggersItem.ReceivedEmailTrigger.Configuration.MessageType.ValueString())
			} else {
				messageType = nil
			}
			configuration6 := shared.ReceivedEmailTriggerConfiguration{
				MessageType: messageType,
			}
			typeVar13 := shared.ReceivedEmailTriggerType(triggersItem.ReceivedEmailTrigger.Type.ValueString())
			receivedEmailTrigger := shared.ReceivedEmailTrigger{
				Configuration: configuration6,
				Type:          typeVar13,
			}
			triggers = append(triggers, shared.AnyTrigger{
				ReceivedEmailTrigger: &receivedEmailTrigger,
			})
		}
	}
	out := shared.AutomationFlowInput{
		Actions:           actions,
		Enabled:           enabled,
		EntitySchema:      entitySchema,
		FlowName:          flowName,
		Runs:              runs,
		TriggerConditions: triggerConditions,
		Triggers:          triggers,
	}
	return &out
}

func (r *FlowResourceModel) ToGetSDKType() *shared.AutomationFlowInput {
	out := r.ToCreateSDKType()
	return out
}

func (r *FlowResourceModel) ToUpdateSDKType() *shared.AutomationFlowInput {
	out := r.ToCreateSDKType()
	return out
}

func (r *FlowResourceModel) ToDeleteSDKType() *shared.AutomationFlowInput {
	out := r.ToCreateSDKType()
	return out
}

func (r *FlowResourceModel) RefreshFromGetResponse(resp *shared.AutomationFlow) {
	r.Actions = nil
	for _, actionsItem := range resp.Actions {
		var actions1 AnyActionConfig
		if actionsItem.AutomationActionConfig != nil {
			actions1.AutomationActionConfig = &AutomationActionConfig{}
			if actionsItem.AutomationActionConfig.AllowFailure != nil {
				actions1.AutomationActionConfig.AllowFailure = types.BoolValue(*actionsItem.AutomationActionConfig.AllowFailure)
			} else {
				actions1.AutomationActionConfig.AllowFailure = types.BoolNull()
			}
			if actions1.AutomationActionConfig.Config == nil && len(actionsItem.AutomationActionConfig.Config) > 0 {
				actions1.AutomationActionConfig.Config = make(map[string]types.String)
				for key, value := range actionsItem.AutomationActionConfig.Config {
					result, _ := json.Marshal(value)
					actions1.AutomationActionConfig.Config[key] = types.StringValue(string(result))
				}
			}
			if actionsItem.AutomationActionConfig.CreatedAutomatically != nil {
				actions1.AutomationActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.AutomationActionConfig.CreatedAutomatically)
			} else {
				actions1.AutomationActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.AutomationActionConfig.FlowActionID != nil {
				actions1.AutomationActionConfig.FlowActionID = types.StringValue(*actionsItem.AutomationActionConfig.FlowActionID)
			} else {
				actions1.AutomationActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.AutomationActionConfig.ID != nil {
				actions1.AutomationActionConfig.ID = types.StringValue(*actionsItem.AutomationActionConfig.ID)
			} else {
				actions1.AutomationActionConfig.ID = types.StringNull()
			}
			if actionsItem.AutomationActionConfig.Name != nil {
				actions1.AutomationActionConfig.Name = types.StringValue(*actionsItem.AutomationActionConfig.Name)
			} else {
				actions1.AutomationActionConfig.Name = types.StringNull()
			}
			if actionsItem.AutomationActionConfig.Type != nil {
				actions1.AutomationActionConfig.Type = types.StringValue(*actionsItem.AutomationActionConfig.Type)
			} else {
				actions1.AutomationActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.CartCheckoutActionConfig != nil {
			actions1.CartCheckoutActionConfig = &CartCheckoutActionConfig{}
			if actionsItem.CartCheckoutActionConfig.AllowFailure != nil {
				actions1.CartCheckoutActionConfig.AllowFailure = types.BoolValue(*actionsItem.CartCheckoutActionConfig.AllowFailure)
			} else {
				actions1.CartCheckoutActionConfig.AllowFailure = types.BoolNull()
			}
			if actions1.CartCheckoutActionConfig.Config == nil {
				actions1.CartCheckoutActionConfig.Config = &CartCheckoutConfig{}
			}
			if actionsItem.CartCheckoutActionConfig.Config == nil {
				actions1.CartCheckoutActionConfig.Config = nil
			} else {
				actions1.CartCheckoutActionConfig.Config = &CartCheckoutConfig{}
				if actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationAttribute != nil {
					actions1.CartCheckoutActionConfig.Config.LinkbackRelationAttribute = types.StringValue(*actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationAttribute)
				} else {
					actions1.CartCheckoutActionConfig.Config.LinkbackRelationAttribute = types.StringNull()
				}
				actions1.CartCheckoutActionConfig.Config.LinkbackRelationTags = nil
				for _, v := range actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationTags {
					actions1.CartCheckoutActionConfig.Config.LinkbackRelationTags = append(actions1.CartCheckoutActionConfig.Config.LinkbackRelationTags, types.StringValue(v))
				}
				actions1.CartCheckoutActionConfig.Config.MappingAttributes = nil
				for _, mappingAttributesItem := range actionsItem.CartCheckoutActionConfig.Config.MappingAttributes {
					var mappingAttributes1 CartCheckoutConfigMappingAttributes
					if mappingAttributesItem.MappingAttribute != nil {
						mappingAttributes1.MappingAttribute = &MappingAttribute{}
						if mappingAttributesItem.MappingAttribute.AppendValueMapper != nil {
							mappingAttributes1.MappingAttribute.AppendValueMapper = &AppendValueMapper{}
							mappingAttributes1.MappingAttribute.AppendValueMapper.Mode = types.StringValue(string(mappingAttributesItem.MappingAttribute.AppendValueMapper.Mode))
							if mappingAttributesItem.MappingAttribute.AppendValueMapper.Source != nil {
								mappingAttributes1.MappingAttribute.AppendValueMapper.Source = types.StringValue(*mappingAttributesItem.MappingAttribute.AppendValueMapper.Source)
							} else {
								mappingAttributes1.MappingAttribute.AppendValueMapper.Source = types.StringNull()
							}
							mappingAttributes1.MappingAttribute.AppendValueMapper.Target = types.StringValue(mappingAttributesItem.MappingAttribute.AppendValueMapper.Target)
							mappingAttributes1.MappingAttribute.AppendValueMapper.TargetUnique = nil
							for _, v := range mappingAttributesItem.MappingAttribute.AppendValueMapper.TargetUnique {
								mappingAttributes1.MappingAttribute.AppendValueMapper.TargetUnique = append(mappingAttributes1.MappingAttribute.AppendValueMapper.TargetUnique, types.StringValue(v))
							}
							mappingAttributes1.MappingAttribute.AppendValueMapper.ValueJSON = types.StringValue(mappingAttributesItem.MappingAttribute.AppendValueMapper.ValueJSON)
						}
						if mappingAttributesItem.MappingAttribute.CopyValueMapper != nil {
							mappingAttributes1.MappingAttribute.CopyValueMapper = &CopyValueMapper{}
							mappingAttributes1.MappingAttribute.CopyValueMapper.Mode = types.StringValue(string(mappingAttributesItem.MappingAttribute.CopyValueMapper.Mode))
							mappingAttributes1.MappingAttribute.CopyValueMapper.Source = types.StringValue(mappingAttributesItem.MappingAttribute.CopyValueMapper.Source)
							mappingAttributes1.MappingAttribute.CopyValueMapper.Target = types.StringValue(mappingAttributesItem.MappingAttribute.CopyValueMapper.Target)
						}
						if mappingAttributesItem.MappingAttribute.SetValueMapper != nil {
							mappingAttributes1.MappingAttribute.SetValueMapper = &SetValueMapper{}
							mappingAttributes1.MappingAttribute.SetValueMapper.Mode = types.StringValue(string(mappingAttributesItem.MappingAttribute.SetValueMapper.Mode))
							mappingAttributes1.MappingAttribute.SetValueMapper.Target = types.StringValue(mappingAttributesItem.MappingAttribute.SetValueMapper.Target)
							valueResult, _ := json.Marshal(mappingAttributesItem.MappingAttribute.SetValueMapper.Value)
							mappingAttributes1.MappingAttribute.SetValueMapper.Value = types.StringValue(string(valueResult))
						}
					}
					if mappingAttributesItem.MappingAttributeV2 != nil {
						mappingAttributes1.MappingAttributeV2 = &MappingAttributeV2{}
						if mappingAttributesItem.MappingAttributeV2.Operation.Any != nil {
							anyResult, _ := json.Marshal(mappingAttributesItem.MappingAttributeV2.Operation.Any)
							mappingAttributes1.MappingAttributeV2.Operation.Any = types.StringValue(string(anyResult))
						}
						if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode != nil {
							mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode = &OperationObjectNode{}
							mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Append = nil
							for _, appendItem := range mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Append {
								var append2 types.String
								append2Result, _ := json.Marshal(appendItem)
								append2 = types.StringValue(string(append2Result))
								mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Append = append(mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Append, append2)
							}
							if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Copy != nil {
								mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Copy = types.StringValue(*mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Copy)
							} else {
								mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Copy = types.StringNull()
							}
							if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Set == nil {
								mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Set = types.StringNull()
							} else {
								setResult, _ := json.Marshal(mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Set)
								mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Set = types.StringValue(string(setResult))
							}
							if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq == nil {
								mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Uniq = nil
							} else {
								mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Uniq = &OperationObjectNodeUniq{}
								if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean != nil {
									if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean != nil {
										mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean = types.BoolValue(*mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean)
									} else {
										mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean = types.BoolNull()
									}
								}
								if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr != nil {
									mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr = nil
									for _, v := range mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr {
										mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr = append(mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr, types.StringValue(v))
									}
								}
							}
							if mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties.IsUnknown() {
								if mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties == nil {
									mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties = types.StringNull()
								} else {
									additionalPropertiesResult, _ := json.Marshal(mappingAttributesItem.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties)
									mappingAttributes1.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
								}
							}
						}
						if mappingAttributesItem.MappingAttributeV2.Target != nil {
							mappingAttributes1.MappingAttributeV2.Target = types.StringValue(*mappingAttributesItem.MappingAttributeV2.Target)
						} else {
							mappingAttributes1.MappingAttributeV2.Target = types.StringNull()
						}
					}
					actions1.CartCheckoutActionConfig.Config.MappingAttributes = append(actions1.CartCheckoutActionConfig.Config.MappingAttributes, mappingAttributes1)
				}
				if actions1.CartCheckoutActionConfig.Config.MappingConfig == nil {
					actions1.CartCheckoutActionConfig.Config.MappingConfig = &MappingConfigRef{}
				}
				if actionsItem.CartCheckoutActionConfig.Config.MappingConfig == nil {
					actions1.CartCheckoutActionConfig.Config.MappingConfig = nil
				} else {
					actions1.CartCheckoutActionConfig.Config.MappingConfig = &MappingConfigRef{}
					actions1.CartCheckoutActionConfig.Config.MappingConfig.ConfigID = types.StringValue(actionsItem.CartCheckoutActionConfig.Config.MappingConfig.ConfigID)
					actions1.CartCheckoutActionConfig.Config.MappingConfig.TargetID = types.StringValue(actionsItem.CartCheckoutActionConfig.Config.MappingConfig.TargetID)
					if actionsItem.CartCheckoutActionConfig.Config.MappingConfig.Version != nil {
						actions1.CartCheckoutActionConfig.Config.MappingConfig.Version = types.NumberValue(big.NewFloat(float64(*actionsItem.CartCheckoutActionConfig.Config.MappingConfig.Version)))
					} else {
						actions1.CartCheckoutActionConfig.Config.MappingConfig.Version = types.NumberNull()
					}
				}
				actions1.CartCheckoutActionConfig.Config.RelationAttributes = nil
				for _, relationAttributesItem := range actionsItem.CartCheckoutActionConfig.Config.RelationAttributes {
					var relationAttributes1 RelationAttribute
					relationAttributes1.Mode = types.StringValue(string(relationAttributesItem.Mode))
					if relationAttributes1.RelatedTo == nil && len(relationAttributesItem.RelatedTo) > 0 {
						relationAttributes1.RelatedTo = make(map[string]types.String)
						for key1, value2 := range relationAttributesItem.RelatedTo {
							result1, _ := json.Marshal(value2)
							relationAttributes1.RelatedTo[key1] = types.StringValue(string(result1))
						}
					}
					if relationAttributes1.SourceFilter == nil {
						relationAttributes1.SourceFilter = &RelationAttributeSourceFilter{}
					}
					if relationAttributesItem.SourceFilter == nil {
						relationAttributes1.SourceFilter = nil
					} else {
						relationAttributes1.SourceFilter = &RelationAttributeSourceFilter{}
						if relationAttributesItem.SourceFilter.Attribute != nil {
							relationAttributes1.SourceFilter.Attribute = types.StringValue(*relationAttributesItem.SourceFilter.Attribute)
						} else {
							relationAttributes1.SourceFilter.Attribute = types.StringNull()
						}
						if relationAttributesItem.SourceFilter.Limit != nil {
							relationAttributes1.SourceFilter.Limit = types.Int64Value(*relationAttributesItem.SourceFilter.Limit)
						} else {
							relationAttributes1.SourceFilter.Limit = types.Int64Null()
						}
						if relationAttributesItem.SourceFilter.RelationTag != nil {
							relationAttributes1.SourceFilter.RelationTag = types.StringValue(*relationAttributesItem.SourceFilter.RelationTag)
						} else {
							relationAttributes1.SourceFilter.RelationTag = types.StringNull()
						}
						if relationAttributesItem.SourceFilter.Schema != nil {
							relationAttributes1.SourceFilter.Schema = types.StringValue(*relationAttributesItem.SourceFilter.Schema)
						} else {
							relationAttributes1.SourceFilter.Schema = types.StringNull()
						}
						if relationAttributesItem.SourceFilter.Self != nil {
							relationAttributes1.SourceFilter.Self = types.BoolValue(*relationAttributesItem.SourceFilter.Self)
						} else {
							relationAttributes1.SourceFilter.Self = types.BoolNull()
						}
						if relationAttributesItem.SourceFilter.Tag != nil {
							relationAttributes1.SourceFilter.Tag = types.StringValue(*relationAttributesItem.SourceFilter.Tag)
						} else {
							relationAttributes1.SourceFilter.Tag = types.StringNull()
						}
					}
					relationAttributes1.Target = types.StringValue(relationAttributesItem.Target)
					relationAttributes1.TargetTags = nil
					for _, v := range relationAttributesItem.TargetTags {
						relationAttributes1.TargetTags = append(relationAttributes1.TargetTags, types.StringValue(v))
					}
					if relationAttributesItem.TargetTagsIncludeSource != nil {
						relationAttributes1.TargetTagsIncludeSource = types.BoolValue(*relationAttributesItem.TargetTagsIncludeSource)
					} else {
						relationAttributes1.TargetTagsIncludeSource = types.BoolNull()
					}
					actions1.CartCheckoutActionConfig.Config.RelationAttributes = append(actions1.CartCheckoutActionConfig.Config.RelationAttributes, relationAttributes1)
				}
				actions1.CartCheckoutActionConfig.Config.TargetUnique = nil
				for _, v := range actionsItem.CartCheckoutActionConfig.Config.TargetUnique {
					actions1.CartCheckoutActionConfig.Config.TargetUnique = append(actions1.CartCheckoutActionConfig.Config.TargetUnique, types.StringValue(v))
				}
				if actionsItem.CartCheckoutActionConfig.Config.Version != nil {
					actions1.CartCheckoutActionConfig.Config.Version = types.StringValue(*actionsItem.CartCheckoutActionConfig.Config.Version)
				} else {
					actions1.CartCheckoutActionConfig.Config.Version = types.StringNull()
				}
			}
			if actionsItem.CartCheckoutActionConfig.CreatedAutomatically != nil {
				actions1.CartCheckoutActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.CartCheckoutActionConfig.CreatedAutomatically)
			} else {
				actions1.CartCheckoutActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.CartCheckoutActionConfig.FlowActionID != nil {
				actions1.CartCheckoutActionConfig.FlowActionID = types.StringValue(*actionsItem.CartCheckoutActionConfig.FlowActionID)
			} else {
				actions1.CartCheckoutActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.CartCheckoutActionConfig.ID != nil {
				actions1.CartCheckoutActionConfig.ID = types.StringValue(*actionsItem.CartCheckoutActionConfig.ID)
			} else {
				actions1.CartCheckoutActionConfig.ID = types.StringNull()
			}
			if actionsItem.CartCheckoutActionConfig.Name != nil {
				actions1.CartCheckoutActionConfig.Name = types.StringValue(*actionsItem.CartCheckoutActionConfig.Name)
			} else {
				actions1.CartCheckoutActionConfig.Name = types.StringNull()
			}
			if actionsItem.CartCheckoutActionConfig.Type != nil {
				actions1.CartCheckoutActionConfig.Type = types.StringValue(string(*actionsItem.CartCheckoutActionConfig.Type))
			} else {
				actions1.CartCheckoutActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.CreateDocumentActionConfig != nil {
			actions1.CreateDocumentActionConfig = &CreateDocumentActionConfig{}
			if actionsItem.CreateDocumentActionConfig.AllowFailure != nil {
				actions1.CreateDocumentActionConfig.AllowFailure = types.BoolValue(*actionsItem.CreateDocumentActionConfig.AllowFailure)
			} else {
				actions1.CreateDocumentActionConfig.AllowFailure = types.BoolNull()
			}
			if actions1.CreateDocumentActionConfig.Config == nil {
				actions1.CreateDocumentActionConfig.Config = &CreateDocumentConfig{}
			}
			if actionsItem.CreateDocumentActionConfig.Config == nil {
				actions1.CreateDocumentActionConfig.Config = nil
			} else {
				actions1.CreateDocumentActionConfig.Config = &CreateDocumentConfig{}
				if actionsItem.CreateDocumentActionConfig.Config.Filename != nil {
					actions1.CreateDocumentActionConfig.Config.Filename = types.StringValue(*actionsItem.CreateDocumentActionConfig.Config.Filename)
				} else {
					actions1.CreateDocumentActionConfig.Config.Filename = types.StringNull()
				}
				if actionsItem.CreateDocumentActionConfig.Config.TemplateID != nil {
					actions1.CreateDocumentActionConfig.Config.TemplateID = types.StringValue(*actionsItem.CreateDocumentActionConfig.Config.TemplateID)
				} else {
					actions1.CreateDocumentActionConfig.Config.TemplateID = types.StringNull()
				}
			}
			if actionsItem.CreateDocumentActionConfig.CreatedAutomatically != nil {
				actions1.CreateDocumentActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.CreateDocumentActionConfig.CreatedAutomatically)
			} else {
				actions1.CreateDocumentActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.CreateDocumentActionConfig.FlowActionID != nil {
				actions1.CreateDocumentActionConfig.FlowActionID = types.StringValue(*actionsItem.CreateDocumentActionConfig.FlowActionID)
			} else {
				actions1.CreateDocumentActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.CreateDocumentActionConfig.ID != nil {
				actions1.CreateDocumentActionConfig.ID = types.StringValue(*actionsItem.CreateDocumentActionConfig.ID)
			} else {
				actions1.CreateDocumentActionConfig.ID = types.StringNull()
			}
			if actionsItem.CreateDocumentActionConfig.Name != nil {
				actions1.CreateDocumentActionConfig.Name = types.StringValue(*actionsItem.CreateDocumentActionConfig.Name)
			} else {
				actions1.CreateDocumentActionConfig.Name = types.StringNull()
			}
			if actionsItem.CreateDocumentActionConfig.Type != nil {
				actions1.CreateDocumentActionConfig.Type = types.StringValue(string(*actionsItem.CreateDocumentActionConfig.Type))
			} else {
				actions1.CreateDocumentActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.MapEntityActionConfig != nil {
			actions1.MapEntityActionConfig = &MapEntityActionConfig{}
			if actionsItem.MapEntityActionConfig.AllowFailure != nil {
				actions1.MapEntityActionConfig.AllowFailure = types.BoolValue(*actionsItem.MapEntityActionConfig.AllowFailure)
			} else {
				actions1.MapEntityActionConfig.AllowFailure = types.BoolNull()
			}
			if actions1.MapEntityActionConfig.Config == nil {
				actions1.MapEntityActionConfig.Config = &MapEntityConfig{}
			}
			if actionsItem.MapEntityActionConfig.Config == nil {
				actions1.MapEntityActionConfig.Config = nil
			} else {
				actions1.MapEntityActionConfig.Config = &MapEntityConfig{}
				if actionsItem.MapEntityActionConfig.Config.LinkbackRelationAttribute != nil {
					actions1.MapEntityActionConfig.Config.LinkbackRelationAttribute = types.StringValue(*actionsItem.MapEntityActionConfig.Config.LinkbackRelationAttribute)
				} else {
					actions1.MapEntityActionConfig.Config.LinkbackRelationAttribute = types.StringNull()
				}
				actions1.MapEntityActionConfig.Config.LinkbackRelationTags = nil
				for _, v := range actionsItem.MapEntityActionConfig.Config.LinkbackRelationTags {
					actions1.MapEntityActionConfig.Config.LinkbackRelationTags = append(actions1.MapEntityActionConfig.Config.LinkbackRelationTags, types.StringValue(v))
				}
				actions1.MapEntityActionConfig.Config.MappingAttributes = nil
				for _, mappingAttributesItem1 := range actionsItem.MapEntityActionConfig.Config.MappingAttributes {
					var mappingAttributes3 MapEntityConfigMappingAttributes
					if mappingAttributesItem1.MappingAttribute != nil {
						mappingAttributes3.MappingAttribute = &MappingAttribute{}
						if mappingAttributesItem1.MappingAttribute.AppendValueMapper != nil {
							mappingAttributes3.MappingAttribute.AppendValueMapper = &AppendValueMapper{}
							mappingAttributes3.MappingAttribute.AppendValueMapper.Mode = types.StringValue(string(mappingAttributesItem1.MappingAttribute.AppendValueMapper.Mode))
							if mappingAttributesItem1.MappingAttribute.AppendValueMapper.Source != nil {
								mappingAttributes3.MappingAttribute.AppendValueMapper.Source = types.StringValue(*mappingAttributesItem1.MappingAttribute.AppendValueMapper.Source)
							} else {
								mappingAttributes3.MappingAttribute.AppendValueMapper.Source = types.StringNull()
							}
							mappingAttributes3.MappingAttribute.AppendValueMapper.Target = types.StringValue(mappingAttributesItem1.MappingAttribute.AppendValueMapper.Target)
							mappingAttributes3.MappingAttribute.AppendValueMapper.TargetUnique = nil
							for _, v := range mappingAttributesItem1.MappingAttribute.AppendValueMapper.TargetUnique {
								mappingAttributes3.MappingAttribute.AppendValueMapper.TargetUnique = append(mappingAttributes3.MappingAttribute.AppendValueMapper.TargetUnique, types.StringValue(v))
							}
							mappingAttributes3.MappingAttribute.AppendValueMapper.ValueJSON = types.StringValue(mappingAttributesItem1.MappingAttribute.AppendValueMapper.ValueJSON)
						}
						if mappingAttributesItem1.MappingAttribute.CopyValueMapper != nil {
							mappingAttributes3.MappingAttribute.CopyValueMapper = &CopyValueMapper{}
							mappingAttributes3.MappingAttribute.CopyValueMapper.Mode = types.StringValue(string(mappingAttributesItem1.MappingAttribute.CopyValueMapper.Mode))
							mappingAttributes3.MappingAttribute.CopyValueMapper.Source = types.StringValue(mappingAttributesItem1.MappingAttribute.CopyValueMapper.Source)
							mappingAttributes3.MappingAttribute.CopyValueMapper.Target = types.StringValue(mappingAttributesItem1.MappingAttribute.CopyValueMapper.Target)
						}
						if mappingAttributesItem1.MappingAttribute.SetValueMapper != nil {
							mappingAttributes3.MappingAttribute.SetValueMapper = &SetValueMapper{}
							mappingAttributes3.MappingAttribute.SetValueMapper.Mode = types.StringValue(string(mappingAttributesItem1.MappingAttribute.SetValueMapper.Mode))
							mappingAttributes3.MappingAttribute.SetValueMapper.Target = types.StringValue(mappingAttributesItem1.MappingAttribute.SetValueMapper.Target)
							valueResult1, _ := json.Marshal(mappingAttributesItem1.MappingAttribute.SetValueMapper.Value)
							mappingAttributes3.MappingAttribute.SetValueMapper.Value = types.StringValue(string(valueResult1))
						}
					}
					if mappingAttributesItem1.MappingAttributeV2 != nil {
						mappingAttributes3.MappingAttributeV2 = &MappingAttributeV21{}
						if mappingAttributesItem1.MappingAttributeV2.Operation.Any != nil {
							anyResult1, _ := json.Marshal(mappingAttributesItem1.MappingAttributeV2.Operation.Any)
							mappingAttributes3.MappingAttributeV2.Operation.Any = types.StringValue(string(anyResult1))
						}
						if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode != nil {
							mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode = &OperationObjectNode1{}
							mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Append = nil
							for _, appendItem1 := range mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Append {
								var append4 types.String
								append4Result, _ := json.Marshal(appendItem1)
								append4 = types.StringValue(string(append4Result))
								mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Append = append(mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Append, append4)
							}
							if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Copy != nil {
								mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Copy = types.StringValue(*mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Copy)
							} else {
								mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Copy = types.StringNull()
							}
							if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Set == nil {
								mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Set = types.StringNull()
							} else {
								setResult1, _ := json.Marshal(mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Set)
								mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Set = types.StringValue(string(setResult1))
							}
							if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq == nil {
								mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Uniq = nil
							} else {
								mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Uniq = &OperationObjectNodeUniq{}
								if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean != nil {
									if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean != nil {
										mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean = types.BoolValue(*mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean)
									} else {
										mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Uniq.Boolean = types.BoolNull()
									}
								}
								if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr != nil {
									mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr = nil
									for _, v := range mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr {
										mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr = append(mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.Uniq.ArrayOfstr, types.StringValue(v))
									}
								}
							}
							if mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties.IsUnknown() {
								if mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties == nil {
									mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties = types.StringNull()
								} else {
									additionalPropertiesResult1, _ := json.Marshal(mappingAttributesItem1.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties)
									mappingAttributes3.MappingAttributeV2.Operation.OperationObjectNode.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
								}
							}
						}
						if mappingAttributesItem1.MappingAttributeV2.Target != nil {
							mappingAttributes3.MappingAttributeV2.Target = types.StringValue(*mappingAttributesItem1.MappingAttributeV2.Target)
						} else {
							mappingAttributes3.MappingAttributeV2.Target = types.StringNull()
						}
					}
					actions1.MapEntityActionConfig.Config.MappingAttributes = append(actions1.MapEntityActionConfig.Config.MappingAttributes, mappingAttributes3)
				}
				if actions1.MapEntityActionConfig.Config.MappingConfig == nil {
					actions1.MapEntityActionConfig.Config.MappingConfig = &MappingConfigRef{}
				}
				if actionsItem.MapEntityActionConfig.Config.MappingConfig == nil {
					actions1.MapEntityActionConfig.Config.MappingConfig = nil
				} else {
					actions1.MapEntityActionConfig.Config.MappingConfig = &MappingConfigRef{}
					actions1.MapEntityActionConfig.Config.MappingConfig.ConfigID = types.StringValue(actionsItem.MapEntityActionConfig.Config.MappingConfig.ConfigID)
					actions1.MapEntityActionConfig.Config.MappingConfig.TargetID = types.StringValue(actionsItem.MapEntityActionConfig.Config.MappingConfig.TargetID)
					if actionsItem.MapEntityActionConfig.Config.MappingConfig.Version != nil {
						actions1.MapEntityActionConfig.Config.MappingConfig.Version = types.NumberValue(big.NewFloat(float64(*actionsItem.MapEntityActionConfig.Config.MappingConfig.Version)))
					} else {
						actions1.MapEntityActionConfig.Config.MappingConfig.Version = types.NumberNull()
					}
				}
				actions1.MapEntityActionConfig.Config.RelationAttributes = nil
				for _, relationAttributesItem1 := range actionsItem.MapEntityActionConfig.Config.RelationAttributes {
					var relationAttributes3 RelationAttribute
					relationAttributes3.Mode = types.StringValue(string(relationAttributesItem1.Mode))
					if relationAttributes3.RelatedTo == nil && len(relationAttributesItem1.RelatedTo) > 0 {
						relationAttributes3.RelatedTo = make(map[string]types.String)
						for key2, value4 := range relationAttributesItem1.RelatedTo {
							result2, _ := json.Marshal(value4)
							relationAttributes3.RelatedTo[key2] = types.StringValue(string(result2))
						}
					}
					if relationAttributes3.SourceFilter == nil {
						relationAttributes3.SourceFilter = &RelationAttributeSourceFilter{}
					}
					if relationAttributesItem1.SourceFilter == nil {
						relationAttributes3.SourceFilter = nil
					} else {
						relationAttributes3.SourceFilter = &RelationAttributeSourceFilter{}
						if relationAttributesItem1.SourceFilter.Attribute != nil {
							relationAttributes3.SourceFilter.Attribute = types.StringValue(*relationAttributesItem1.SourceFilter.Attribute)
						} else {
							relationAttributes3.SourceFilter.Attribute = types.StringNull()
						}
						if relationAttributesItem1.SourceFilter.Limit != nil {
							relationAttributes3.SourceFilter.Limit = types.Int64Value(*relationAttributesItem1.SourceFilter.Limit)
						} else {
							relationAttributes3.SourceFilter.Limit = types.Int64Null()
						}
						if relationAttributesItem1.SourceFilter.RelationTag != nil {
							relationAttributes3.SourceFilter.RelationTag = types.StringValue(*relationAttributesItem1.SourceFilter.RelationTag)
						} else {
							relationAttributes3.SourceFilter.RelationTag = types.StringNull()
						}
						if relationAttributesItem1.SourceFilter.Schema != nil {
							relationAttributes3.SourceFilter.Schema = types.StringValue(*relationAttributesItem1.SourceFilter.Schema)
						} else {
							relationAttributes3.SourceFilter.Schema = types.StringNull()
						}
						if relationAttributesItem1.SourceFilter.Self != nil {
							relationAttributes3.SourceFilter.Self = types.BoolValue(*relationAttributesItem1.SourceFilter.Self)
						} else {
							relationAttributes3.SourceFilter.Self = types.BoolNull()
						}
						if relationAttributesItem1.SourceFilter.Tag != nil {
							relationAttributes3.SourceFilter.Tag = types.StringValue(*relationAttributesItem1.SourceFilter.Tag)
						} else {
							relationAttributes3.SourceFilter.Tag = types.StringNull()
						}
					}
					relationAttributes3.Target = types.StringValue(relationAttributesItem1.Target)
					relationAttributes3.TargetTags = nil
					for _, v := range relationAttributesItem1.TargetTags {
						relationAttributes3.TargetTags = append(relationAttributes3.TargetTags, types.StringValue(v))
					}
					if relationAttributesItem1.TargetTagsIncludeSource != nil {
						relationAttributes3.TargetTagsIncludeSource = types.BoolValue(*relationAttributesItem1.TargetTagsIncludeSource)
					} else {
						relationAttributes3.TargetTagsIncludeSource = types.BoolNull()
					}
					actions1.MapEntityActionConfig.Config.RelationAttributes = append(actions1.MapEntityActionConfig.Config.RelationAttributes, relationAttributes3)
				}
				actions1.MapEntityActionConfig.Config.TargetSchema = types.StringValue(actionsItem.MapEntityActionConfig.Config.TargetSchema)
				actions1.MapEntityActionConfig.Config.TargetUnique = nil
				for _, v := range actionsItem.MapEntityActionConfig.Config.TargetUnique {
					actions1.MapEntityActionConfig.Config.TargetUnique = append(actions1.MapEntityActionConfig.Config.TargetUnique, types.StringValue(v))
				}
			}
			if actionsItem.MapEntityActionConfig.CreatedAutomatically != nil {
				actions1.MapEntityActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.MapEntityActionConfig.CreatedAutomatically)
			} else {
				actions1.MapEntityActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.MapEntityActionConfig.FlowActionID != nil {
				actions1.MapEntityActionConfig.FlowActionID = types.StringValue(*actionsItem.MapEntityActionConfig.FlowActionID)
			} else {
				actions1.MapEntityActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.MapEntityActionConfig.ID != nil {
				actions1.MapEntityActionConfig.ID = types.StringValue(*actionsItem.MapEntityActionConfig.ID)
			} else {
				actions1.MapEntityActionConfig.ID = types.StringNull()
			}
			if actionsItem.MapEntityActionConfig.Name != nil {
				actions1.MapEntityActionConfig.Name = types.StringValue(*actionsItem.MapEntityActionConfig.Name)
			} else {
				actions1.MapEntityActionConfig.Name = types.StringNull()
			}
			if actionsItem.MapEntityActionConfig.Type != nil {
				actions1.MapEntityActionConfig.Type = types.StringValue(string(*actionsItem.MapEntityActionConfig.Type))
			} else {
				actions1.MapEntityActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.SendEmailActionConfig != nil {
			actions1.SendEmailActionConfig = &SendEmailActionConfig{}
			if actionsItem.SendEmailActionConfig.AllowFailure != nil {
				actions1.SendEmailActionConfig.AllowFailure = types.BoolValue(*actionsItem.SendEmailActionConfig.AllowFailure)
			} else {
				actions1.SendEmailActionConfig.AllowFailure = types.BoolNull()
			}
			if actions1.SendEmailActionConfig.Config == nil {
				actions1.SendEmailActionConfig.Config = &SendEmailConfig{}
			}
			if actionsItem.SendEmailActionConfig.Config == nil {
				actions1.SendEmailActionConfig.Config = nil
			} else {
				actions1.SendEmailActionConfig.Config = &SendEmailConfig{}
				actions1.SendEmailActionConfig.Config.Attachments = nil
				for _, attachmentsItem := range actionsItem.SendEmailActionConfig.Config.Attachments {
					var attachments1 SendEmailConfigAttachments
					if attachments1.SourceFilter == nil {
						attachments1.SourceFilter = &SendEmailConfigAttachmentsSourceFilter{}
					}
					if attachmentsItem.SourceFilter == nil {
						attachments1.SourceFilter = nil
					} else {
						attachments1.SourceFilter = &SendEmailConfigAttachmentsSourceFilter{}
						if attachmentsItem.SourceFilter.Attribute != nil {
							attachments1.SourceFilter.Attribute = types.StringValue(*attachmentsItem.SourceFilter.Attribute)
						} else {
							attachments1.SourceFilter.Attribute = types.StringNull()
						}
						if attachmentsItem.SourceFilter.DocumentType != nil {
							attachments1.SourceFilter.DocumentType = types.StringValue(string(*attachmentsItem.SourceFilter.DocumentType))
						} else {
							attachments1.SourceFilter.DocumentType = types.StringNull()
						}
						if attachmentsItem.SourceFilter.FilenameRegex != nil {
							attachments1.SourceFilter.FilenameRegex = types.StringValue(*attachmentsItem.SourceFilter.FilenameRegex)
						} else {
							attachments1.SourceFilter.FilenameRegex = types.StringNull()
						}
						if attachmentsItem.SourceFilter.Limit != nil {
							attachments1.SourceFilter.Limit = types.Int64Value(*attachmentsItem.SourceFilter.Limit)
						} else {
							attachments1.SourceFilter.Limit = types.Int64Null()
						}
						if attachmentsItem.SourceFilter.RelationTag != nil {
							attachments1.SourceFilter.RelationTag = types.StringValue(*attachmentsItem.SourceFilter.RelationTag)
						} else {
							attachments1.SourceFilter.RelationTag = types.StringNull()
						}
						if attachmentsItem.SourceFilter.Self != nil {
							attachments1.SourceFilter.Self = types.BoolValue(*attachmentsItem.SourceFilter.Self)
						} else {
							attachments1.SourceFilter.Self = types.BoolNull()
						}
						if attachmentsItem.SourceFilter.Tag != nil {
							attachments1.SourceFilter.Tag = types.StringValue(*attachmentsItem.SourceFilter.Tag)
						} else {
							attachments1.SourceFilter.Tag = types.StringNull()
						}
					}
					actions1.SendEmailActionConfig.Config.Attachments = append(actions1.SendEmailActionConfig.Config.Attachments, attachments1)
				}
				if actionsItem.SendEmailActionConfig.Config.EmailTemplateID != nil {
					actions1.SendEmailActionConfig.Config.EmailTemplateID = types.StringValue(*actionsItem.SendEmailActionConfig.Config.EmailTemplateID)
				} else {
					actions1.SendEmailActionConfig.Config.EmailTemplateID = types.StringNull()
				}
				if actionsItem.SendEmailActionConfig.Config.LanguageCode != nil {
					actions1.SendEmailActionConfig.Config.LanguageCode = types.StringValue(string(*actionsItem.SendEmailActionConfig.Config.LanguageCode))
				} else {
					actions1.SendEmailActionConfig.Config.LanguageCode = types.StringNull()
				}
			}
			if actionsItem.SendEmailActionConfig.CreatedAutomatically != nil {
				actions1.SendEmailActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.SendEmailActionConfig.CreatedAutomatically)
			} else {
				actions1.SendEmailActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.SendEmailActionConfig.FlowActionID != nil {
				actions1.SendEmailActionConfig.FlowActionID = types.StringValue(*actionsItem.SendEmailActionConfig.FlowActionID)
			} else {
				actions1.SendEmailActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.SendEmailActionConfig.ID != nil {
				actions1.SendEmailActionConfig.ID = types.StringValue(*actionsItem.SendEmailActionConfig.ID)
			} else {
				actions1.SendEmailActionConfig.ID = types.StringNull()
			}
			if actionsItem.SendEmailActionConfig.Name != nil {
				actions1.SendEmailActionConfig.Name = types.StringValue(*actionsItem.SendEmailActionConfig.Name)
			} else {
				actions1.SendEmailActionConfig.Name = types.StringNull()
			}
			if actionsItem.SendEmailActionConfig.Type != nil {
				actions1.SendEmailActionConfig.Type = types.StringValue(string(*actionsItem.SendEmailActionConfig.Type))
			} else {
				actions1.SendEmailActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.TriggerWebhookActionConfig != nil {
			actions1.TriggerWebhookActionConfig = &TriggerWebhookActionConfig{}
			if actionsItem.TriggerWebhookActionConfig.AllowFailure != nil {
				actions1.TriggerWebhookActionConfig.AllowFailure = types.BoolValue(*actionsItem.TriggerWebhookActionConfig.AllowFailure)
			} else {
				actions1.TriggerWebhookActionConfig.AllowFailure = types.BoolNull()
			}
			if actions1.TriggerWebhookActionConfig.Config == nil {
				actions1.TriggerWebhookActionConfig.Config = &TriggerWebhookConfig{}
			}
			if actionsItem.TriggerWebhookActionConfig.Config == nil {
				actions1.TriggerWebhookActionConfig.Config = nil
			} else {
				actions1.TriggerWebhookActionConfig.Config = &TriggerWebhookConfig{}
				actions1.TriggerWebhookActionConfig.Config.EntitySources = nil
				for _, v := range actionsItem.TriggerWebhookActionConfig.Config.EntitySources {
					actions1.TriggerWebhookActionConfig.Config.EntitySources = append(actions1.TriggerWebhookActionConfig.Config.EntitySources, types.StringValue(v))
				}
				if actionsItem.TriggerWebhookActionConfig.Config.TargetWebhookID != nil {
					actions1.TriggerWebhookActionConfig.Config.TargetWebhookID = types.StringValue(*actionsItem.TriggerWebhookActionConfig.Config.TargetWebhookID)
				} else {
					actions1.TriggerWebhookActionConfig.Config.TargetWebhookID = types.StringNull()
				}
			}
			if actionsItem.TriggerWebhookActionConfig.CreatedAutomatically != nil {
				actions1.TriggerWebhookActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.TriggerWebhookActionConfig.CreatedAutomatically)
			} else {
				actions1.TriggerWebhookActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.TriggerWebhookActionConfig.FlowActionID != nil {
				actions1.TriggerWebhookActionConfig.FlowActionID = types.StringValue(*actionsItem.TriggerWebhookActionConfig.FlowActionID)
			} else {
				actions1.TriggerWebhookActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.TriggerWebhookActionConfig.ID != nil {
				actions1.TriggerWebhookActionConfig.ID = types.StringValue(*actionsItem.TriggerWebhookActionConfig.ID)
			} else {
				actions1.TriggerWebhookActionConfig.ID = types.StringNull()
			}
			if actionsItem.TriggerWebhookActionConfig.Name != nil {
				actions1.TriggerWebhookActionConfig.Name = types.StringValue(*actionsItem.TriggerWebhookActionConfig.Name)
			} else {
				actions1.TriggerWebhookActionConfig.Name = types.StringNull()
			}
			if actionsItem.TriggerWebhookActionConfig.Type != nil {
				actions1.TriggerWebhookActionConfig.Type = types.StringValue(string(*actionsItem.TriggerWebhookActionConfig.Type))
			} else {
				actions1.TriggerWebhookActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.TriggerWorkflowActionConfig != nil {
			actions1.TriggerWorkflowActionConfig = &TriggerWorkflowActionConfig{}
			if actionsItem.TriggerWorkflowActionConfig.AllowFailure != nil {
				actions1.TriggerWorkflowActionConfig.AllowFailure = types.BoolValue(*actionsItem.TriggerWorkflowActionConfig.AllowFailure)
			} else {
				actions1.TriggerWorkflowActionConfig.AllowFailure = types.BoolNull()
			}
			if actions1.TriggerWorkflowActionConfig.Config == nil {
				actions1.TriggerWorkflowActionConfig.Config = &TriggerWorkflowConfig{}
			}
			if actionsItem.TriggerWorkflowActionConfig.Config == nil {
				actions1.TriggerWorkflowActionConfig.Config = nil
			} else {
				actions1.TriggerWorkflowActionConfig.Config = &TriggerWorkflowConfig{}
				actions1.TriggerWorkflowActionConfig.Config.AssignSteps = nil
				for _, assignStepsItem := range actionsItem.TriggerWorkflowActionConfig.Config.AssignSteps {
					var assignSteps1 AssignUsersToStep
					if assignStepsItem.StepID != nil {
						assignSteps1.StepID = types.StringValue(*assignStepsItem.StepID)
					} else {
						assignSteps1.StepID = types.StringNull()
					}
					if assignStepsItem.StepName != nil {
						assignSteps1.StepName = types.StringValue(*assignStepsItem.StepName)
					} else {
						assignSteps1.StepName = types.StringNull()
					}
					assignSteps1.UserIds = nil
					for _, v := range assignStepsItem.UserIds {
						assignSteps1.UserIds = append(assignSteps1.UserIds, types.NumberValue(big.NewFloat(float64(v))))
					}
					actions1.TriggerWorkflowActionConfig.Config.AssignSteps = append(actions1.TriggerWorkflowActionConfig.Config.AssignSteps, assignSteps1)
				}
				actions1.TriggerWorkflowActionConfig.Config.Assignees = nil
				for _, v := range actionsItem.TriggerWorkflowActionConfig.Config.Assignees {
					actions1.TriggerWorkflowActionConfig.Config.Assignees = append(actions1.TriggerWorkflowActionConfig.Config.Assignees, types.StringValue(v))
				}
				actions1.TriggerWorkflowActionConfig.Config.Conditions = nil
				for _, conditionsItem := range actionsItem.TriggerWorkflowActionConfig.Config.Conditions {
					var conditions1 TriggerWorkflowCondition
					conditions1.Comparison = types.StringValue(string(conditionsItem.Comparison))
					conditions1.Schema = types.StringValue(conditionsItem.Schema)
					conditions1.Source = types.StringValue(conditionsItem.Source)
					if conditionsItem.Value == nil {
						conditions1.Value = nil
					} else {
						conditions1.Value = &TriggerWorkflowConditionValue{}
						if conditionsItem.Value.Str != nil {
							if conditionsItem.Value.Str != nil {
								conditions1.Value.Str = types.StringValue(*conditionsItem.Value.Str)
							} else {
								conditions1.Value.Str = types.StringNull()
							}
						}
						if conditionsItem.Value.Number != nil {
							if conditionsItem.Value.Number != nil {
								conditions1.Value.Number = types.NumberValue(big.NewFloat(float64(*conditionsItem.Value.Number)))
							} else {
								conditions1.Value.Number = types.NumberNull()
							}
						}
						if conditionsItem.Value.ArrayOfstr != nil {
							conditions1.Value.ArrayOfstr = nil
							for _, v := range conditionsItem.Value.ArrayOfstr {
								conditions1.Value.ArrayOfstr = append(conditions1.Value.ArrayOfstr, types.StringValue(v))
							}
						}
						if conditionsItem.Value.ArrayOfnumber != nil {
							conditions1.Value.ArrayOfnumber = nil
							for _, v := range conditionsItem.Value.ArrayOfnumber {
								conditions1.Value.ArrayOfnumber = append(conditions1.Value.ArrayOfnumber, types.NumberValue(big.NewFloat(float64(v))))
							}
						}
					}
					actions1.TriggerWorkflowActionConfig.Config.Conditions = append(actions1.TriggerWorkflowActionConfig.Config.Conditions, conditions1)
				}
				if actionsItem.TriggerWorkflowActionConfig.Config.TargetWorkflow != nil {
					actions1.TriggerWorkflowActionConfig.Config.TargetWorkflow = types.StringValue(*actionsItem.TriggerWorkflowActionConfig.Config.TargetWorkflow)
				} else {
					actions1.TriggerWorkflowActionConfig.Config.TargetWorkflow = types.StringNull()
				}
			}
			if actionsItem.TriggerWorkflowActionConfig.CreatedAutomatically != nil {
				actions1.TriggerWorkflowActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.TriggerWorkflowActionConfig.CreatedAutomatically)
			} else {
				actions1.TriggerWorkflowActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.FlowActionID != nil {
				actions1.TriggerWorkflowActionConfig.FlowActionID = types.StringValue(*actionsItem.TriggerWorkflowActionConfig.FlowActionID)
			} else {
				actions1.TriggerWorkflowActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.ID != nil {
				actions1.TriggerWorkflowActionConfig.ID = types.StringValue(*actionsItem.TriggerWorkflowActionConfig.ID)
			} else {
				actions1.TriggerWorkflowActionConfig.ID = types.StringNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.Name != nil {
				actions1.TriggerWorkflowActionConfig.Name = types.StringValue(*actionsItem.TriggerWorkflowActionConfig.Name)
			} else {
				actions1.TriggerWorkflowActionConfig.Name = types.StringNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.Type != nil {
				actions1.TriggerWorkflowActionConfig.Type = types.StringValue(string(*actionsItem.TriggerWorkflowActionConfig.Type))
			} else {
				actions1.TriggerWorkflowActionConfig.Type = types.StringNull()
			}
		}
		r.Actions = append(r.Actions, actions1)
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.CreatedBy != nil {
		r.CreatedBy = types.StringValue(*resp.CreatedBy)
	} else {
		r.CreatedBy = types.StringNull()
	}
	if resp.Enabled != nil {
		r.Enabled = types.BoolValue(*resp.Enabled)
	} else {
		r.Enabled = types.BoolNull()
	}
	if resp.EntitySchema != nil {
		r.EntitySchema = types.StringValue(*resp.EntitySchema)
	} else {
		r.EntitySchema = types.StringNull()
	}
	r.FlowName = types.StringValue(resp.FlowName)
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.LastUpdatedBy != nil {
		r.LastUpdatedBy = types.StringValue(*resp.LastUpdatedBy)
	} else {
		r.LastUpdatedBy = types.StringNull()
	}
	if resp.OrgID != nil {
		r.OrgID = types.StringValue(*resp.OrgID)
	} else {
		r.OrgID = types.StringNull()
	}
	if resp.Runs != nil {
		r.Runs = types.NumberValue(big.NewFloat(float64(*resp.Runs)))
	} else {
		r.Runs = types.NumberNull()
	}
	r.TriggerConditions = nil
	for _, triggerConditionsItem := range resp.TriggerConditions {
		var triggerConditions1 TriggerCondition
		triggerConditions1.Comparison = types.StringValue(string(triggerConditionsItem.Comparison))
		triggerConditions1.Source = types.StringValue(triggerConditionsItem.Source)
		if triggerConditionsItem.Value == nil {
			triggerConditions1.Value = nil
		} else {
			triggerConditions1.Value = &TriggerWorkflowConditionValue{}
			if triggerConditionsItem.Value.Str != nil {
				if triggerConditionsItem.Value.Str != nil {
					triggerConditions1.Value.Str = types.StringValue(*triggerConditionsItem.Value.Str)
				} else {
					triggerConditions1.Value.Str = types.StringNull()
				}
			}
			if triggerConditionsItem.Value.Number != nil {
				if triggerConditionsItem.Value.Number != nil {
					triggerConditions1.Value.Number = types.NumberValue(big.NewFloat(float64(*triggerConditionsItem.Value.Number)))
				} else {
					triggerConditions1.Value.Number = types.NumberNull()
				}
			}
			if triggerConditionsItem.Value.ArrayOfstr != nil {
				triggerConditions1.Value.ArrayOfstr = nil
				for _, v := range triggerConditionsItem.Value.ArrayOfstr {
					triggerConditions1.Value.ArrayOfstr = append(triggerConditions1.Value.ArrayOfstr, types.StringValue(v))
				}
			}
			if triggerConditionsItem.Value.ArrayOfnumber != nil {
				triggerConditions1.Value.ArrayOfnumber = nil
				for _, v := range triggerConditionsItem.Value.ArrayOfnumber {
					triggerConditions1.Value.ArrayOfnumber = append(triggerConditions1.Value.ArrayOfnumber, types.NumberValue(big.NewFloat(float64(v))))
				}
			}
		}
		r.TriggerConditions = append(r.TriggerConditions, triggerConditions1)
	}
	r.Triggers = nil
	for _, triggersItem := range resp.Triggers {
		var triggers1 AnyTrigger
		if triggersItem.ActivityTrigger != nil {
			triggers1.ActivityTrigger = &ActivityTrigger{}
			if triggersItem.ActivityTrigger.Configuration.Schema != nil {
				triggers1.ActivityTrigger.Configuration.Schema = types.StringValue(*triggersItem.ActivityTrigger.Configuration.Schema)
			} else {
				triggers1.ActivityTrigger.Configuration.Schema = types.StringNull()
			}
			triggers1.ActivityTrigger.Configuration.Types = nil
			for _, v := range triggersItem.ActivityTrigger.Configuration.Types {
				triggers1.ActivityTrigger.Configuration.Types = append(triggers1.ActivityTrigger.Configuration.Types, types.StringValue(string(v)))
			}
			triggers1.ActivityTrigger.Type = types.StringValue(string(triggersItem.ActivityTrigger.Type))
		}
		if triggersItem.APISubmissionTrigger != nil {
			triggers1.APISubmissionTrigger = &APISubmissionTrigger{}
			if triggersItem.APISubmissionTrigger.Configuration.SourceID != nil {
				triggers1.APISubmissionTrigger.Configuration.SourceID = types.StringValue(*triggersItem.APISubmissionTrigger.Configuration.SourceID)
			} else {
				triggers1.APISubmissionTrigger.Configuration.SourceID = types.StringNull()
			}
			triggers1.APISubmissionTrigger.Type = types.StringValue(string(triggersItem.APISubmissionTrigger.Type))
		}
		if triggersItem.EntityManualTrigger != nil {
			triggers1.EntityManualTrigger = &EntityManualTrigger{}
			if triggersItem.EntityManualTrigger.Configuration.Schema != nil {
				triggers1.EntityManualTrigger.Configuration.Schema = types.StringValue(*triggersItem.EntityManualTrigger.Configuration.Schema)
			} else {
				triggers1.EntityManualTrigger.Configuration.Schema = types.StringNull()
			}
			triggers1.EntityManualTrigger.Type = types.StringValue(string(triggersItem.EntityManualTrigger.Type))
		}
		if triggersItem.EntityOperationTrigger != nil {
			triggers1.EntityOperationTrigger = &EntityOperationTrigger{}
			triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
				triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = append(triggers1.EntityOperationTrigger.Configuration.ExcludeActivities, types.StringValue(v))
			}
			triggers1.EntityOperationTrigger.Configuration.IncludeActivities = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
				triggers1.EntityOperationTrigger.Configuration.IncludeActivities = append(triggers1.EntityOperationTrigger.Configuration.IncludeActivities, types.StringValue(v))
			}
			triggers1.EntityOperationTrigger.Configuration.Operations = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.Operations {
				triggers1.EntityOperationTrigger.Configuration.Operations = append(triggers1.EntityOperationTrigger.Configuration.Operations, types.StringValue(string(v)))
			}
			triggers1.EntityOperationTrigger.Configuration.Schema = types.StringValue(triggersItem.EntityOperationTrigger.Configuration.Schema)
			triggers1.EntityOperationTrigger.Type = types.StringValue(string(triggersItem.EntityOperationTrigger.Type))
		}
		if triggersItem.FrontendSubmitTrigger != nil {
			triggers1.FrontendSubmitTrigger = &FrontendSubmitTrigger{}
			if triggersItem.FrontendSubmitTrigger.Configuration.SourceID != nil {
				triggers1.FrontendSubmitTrigger.Configuration.SourceID = types.StringValue(*triggersItem.FrontendSubmitTrigger.Configuration.SourceID)
			} else {
				triggers1.FrontendSubmitTrigger.Configuration.SourceID = types.StringNull()
			}
			triggers1.FrontendSubmitTrigger.Type = types.StringValue(string(triggersItem.FrontendSubmitTrigger.Type))
		}
		if triggersItem.JourneySubmitTrigger != nil {
			triggers1.JourneySubmitTrigger = &JourneySubmitTrigger{}
			triggers1.JourneySubmitTrigger.Configuration.SourceID = types.StringValue(triggersItem.JourneySubmitTrigger.Configuration.SourceID)
			triggers1.JourneySubmitTrigger.Type = types.StringValue(string(triggersItem.JourneySubmitTrigger.Type))
		}
		if triggersItem.ReceivedEmailTrigger != nil {
			triggers1.ReceivedEmailTrigger = &ReceivedEmailTrigger{}
			if triggersItem.ReceivedEmailTrigger.Configuration.MessageType != nil {
				triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringValue(string(*triggersItem.ReceivedEmailTrigger.Configuration.MessageType))
			} else {
				triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringNull()
			}
			triggers1.ReceivedEmailTrigger.Type = types.StringValue(string(triggersItem.ReceivedEmailTrigger.Type))
		}
		r.Triggers = append(r.Triggers, triggers1)
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
}

func (r *FlowResourceModel) RefreshFromCreateResponse(resp *shared.AutomationFlow) {
	r.RefreshFromGetResponse(resp)
}

func (r *FlowResourceModel) RefreshFromUpdateResponse(resp *shared.AutomationFlow) {
	r.RefreshFromGetResponse(resp)
}
