// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"epilotautomation/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *FlowResourceModel) ToSDKType() *shared.AutomationFlowInput {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	entitySchema := new(string)
	if !r.EntitySchema.IsUnknown() && !r.EntitySchema.IsNull() {
		*entitySchema = r.EntitySchema.ValueString()
	} else {
		entitySchema = nil
	}
	flowName := r.FlowName.ValueString()
	runs := new(float64)
	if !r.Runs.IsUnknown() && !r.Runs.IsNull() {
		*runs, _ = r.Runs.ValueBigFloat().Float64()
	} else {
		runs = nil
	}
	triggerConditions := make([]shared.TriggerCondition, 0)
	for _, triggerConditionsItem := range r.TriggerConditions {
		comparison := shared.ComparisonEnum(triggerConditionsItem.Comparison.ValueString())
		source := triggerConditionsItem.Source.ValueString()
		var value *shared.TriggerConditionValue
		str := new(string)
		if !triggerConditionsItem.Value.Str.IsUnknown() && !triggerConditionsItem.Value.Str.IsNull() {
			*str = triggerConditionsItem.Value.Str.ValueString()
		} else {
			str = nil
		}
		if str != nil {
			value = &shared.TriggerConditionValue{
				Str: str,
			}
		}
		number := new(float64)
		if !triggerConditionsItem.Value.Number.IsUnknown() && !triggerConditionsItem.Value.Number.IsNull() {
			*number, _ = triggerConditionsItem.Value.Number.ValueBigFloat().Float64()
		} else {
			number = nil
		}
		if number != nil {
			value = &shared.TriggerConditionValue{
				Number: number,
			}
		}
		arrayOfStr := make([]string, 0)
		for _, arrayOfStrItem := range triggerConditionsItem.Value.ArrayOfStr {
			arrayOfStr = append(arrayOfStr, arrayOfStrItem.ValueString())
		}
		if arrayOfStr != nil {
			value = &shared.TriggerConditionValue{
				ArrayOfStr: arrayOfStr,
			}
		}
		arrayOfNumber := make([]float64, 0)
		for _, arrayOfNumberItem := range triggerConditionsItem.Value.ArrayOfNumber {
			arrayOfNumberTmp, _ := arrayOfNumberItem.ValueBigFloat().Float64()
			arrayOfNumber = append(arrayOfNumber, arrayOfNumberTmp)
		}
		if arrayOfNumber != nil {
			value = &shared.TriggerConditionValue{
				ArrayOfNumber: arrayOfNumber,
			}
		}
		triggerConditions = append(triggerConditions, shared.TriggerCondition{
			Comparison: comparison,
			Source:     source,
			Value:      value,
		})
	}
	triggers := make([]shared.AnyTrigger, 0)
	for _, triggersItem := range r.Triggers {
		if triggersItem.FrontendSubmitTrigger != nil {
			sourceID := new(string)
			if !triggersItem.FrontendSubmitTrigger.Configuration.SourceID.IsUnknown() && !triggersItem.FrontendSubmitTrigger.Configuration.SourceID.IsNull() {
				*sourceID = triggersItem.FrontendSubmitTrigger.Configuration.SourceID.ValueString()
			} else {
				sourceID = nil
			}
			configuration := shared.FrontendSubmitTriggerConfiguration{
				SourceID: sourceID,
			}
			type1 := shared.FrontendSubmitTriggerTypeEnum(triggersItem.FrontendSubmitTrigger.Type.ValueString())
			frontendSubmitTrigger := shared.FrontendSubmitTrigger{
				Configuration: configuration,
				Type:          type1,
			}
			triggers = append(triggers, shared.AnyTrigger{
				FrontendSubmitTrigger: &frontendSubmitTrigger,
			})
		}
		if triggersItem.JourneySubmitTrigger != nil {
			sourceId1 := triggersItem.JourneySubmitTrigger.Configuration.SourceID.ValueString()
			configuration1 := shared.JourneySubmitTriggerConfiguration{
				SourceID: sourceId1,
			}
			type2 := shared.JourneySubmitTriggerTypeEnum(triggersItem.JourneySubmitTrigger.Type.ValueString())
			journeySubmitTrigger := shared.JourneySubmitTrigger{
				Configuration: configuration1,
				Type:          type2,
			}
			triggers = append(triggers, shared.AnyTrigger{
				JourneySubmitTrigger: &journeySubmitTrigger,
			})
		}
		if triggersItem.APISubmissionTrigger != nil {
			sourceId2 := new(string)
			if !triggersItem.APISubmissionTrigger.Configuration.SourceID.IsUnknown() && !triggersItem.APISubmissionTrigger.Configuration.SourceID.IsNull() {
				*sourceId2 = triggersItem.APISubmissionTrigger.Configuration.SourceID.ValueString()
			} else {
				sourceId2 = nil
			}
			configuration2 := shared.APISubmissionTriggerConfiguration{
				SourceID: sourceId2,
			}
			type3 := shared.APISubmissionTriggerTypeEnum(triggersItem.APISubmissionTrigger.Type.ValueString())
			apiSubmissionTrigger := shared.APISubmissionTrigger{
				Configuration: configuration2,
				Type:          type3,
			}
			triggers = append(triggers, shared.AnyTrigger{
				APISubmissionTrigger: &apiSubmissionTrigger,
			})
		}
		if triggersItem.EntityOperationTrigger != nil {
			excludeActivities := make([]string, 0)
			for _, excludeActivitiesItem := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
				excludeActivities = append(excludeActivities, excludeActivitiesItem.ValueString())
			}
			includeActivities := make([]string, 0)
			for _, includeActivitiesItem := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
				includeActivities = append(includeActivities, includeActivitiesItem.ValueString())
			}
			operations := make([]shared.EntityOperationTriggerConfigurationOperationsEnum, 0)
			for _, operationsItem := range triggersItem.EntityOperationTrigger.Configuration.Operations {
				operations = append(operations, shared.EntityOperationTriggerConfigurationOperationsEnum(operationsItem.ValueString()))
			}
			schema := triggersItem.EntityOperationTrigger.Configuration.Schema.ValueString()
			configuration3 := shared.EntityOperationTriggerConfiguration{
				ExcludeActivities: excludeActivities,
				IncludeActivities: includeActivities,
				Operations:        operations,
				Schema:            schema,
			}
			type4 := shared.EntityOperationTriggerTypeEnum(triggersItem.EntityOperationTrigger.Type.ValueString())
			entityOperationTrigger := shared.EntityOperationTrigger{
				Configuration: configuration3,
				Type:          type4,
			}
			triggers = append(triggers, shared.AnyTrigger{
				EntityOperationTrigger: &entityOperationTrigger,
			})
		}
		if triggersItem.ActivityTrigger != nil {
			schema1 := new(string)
			if !triggersItem.ActivityTrigger.Configuration.Schema.IsUnknown() && !triggersItem.ActivityTrigger.Configuration.Schema.IsNull() {
				*schema1 = triggersItem.ActivityTrigger.Configuration.Schema.ValueString()
			} else {
				schema1 = nil
			}
			types := make([]shared.ActivityTriggerConfigurationTypesEnum, 0)
			for _, typesItem := range triggersItem.ActivityTrigger.Configuration.Types {
				types = append(types, shared.ActivityTriggerConfigurationTypesEnum(typesItem.ValueString()))
			}
			configuration4 := shared.ActivityTriggerConfiguration{
				Schema: schema1,
				Types:  types,
			}
			type5 := shared.ActivityTriggerTypeEnum(triggersItem.ActivityTrigger.Type.ValueString())
			activityTrigger := shared.ActivityTrigger{
				Configuration: configuration4,
				Type:          type5,
			}
			triggers = append(triggers, shared.AnyTrigger{
				ActivityTrigger: &activityTrigger,
			})
		}
		if triggersItem.EntityManualTrigger != nil {
			schema2 := new(string)
			if !triggersItem.EntityManualTrigger.Configuration.Schema.IsUnknown() && !triggersItem.EntityManualTrigger.Configuration.Schema.IsNull() {
				*schema2 = triggersItem.EntityManualTrigger.Configuration.Schema.ValueString()
			} else {
				schema2 = nil
			}
			configuration5 := shared.EntityManualTriggerConfiguration{
				Schema: schema2,
			}
			type6 := shared.EntityManualTriggerTypeEnum(triggersItem.EntityManualTrigger.Type.ValueString())
			entityManualTrigger := shared.EntityManualTrigger{
				Configuration: configuration5,
				Type:          type6,
			}
			triggers = append(triggers, shared.AnyTrigger{
				EntityManualTrigger: &entityManualTrigger,
			})
		}
		if triggersItem.ReceivedEmailTrigger != nil {
			messageType := new(shared.ReceivedEmailTriggerConfigurationMessageTypeEnum)
			if !triggersItem.ReceivedEmailTrigger.Configuration.MessageType.IsUnknown() && !triggersItem.ReceivedEmailTrigger.Configuration.MessageType.IsNull() {
				*messageType = shared.ReceivedEmailTriggerConfigurationMessageTypeEnum(triggersItem.ReceivedEmailTrigger.Configuration.MessageType.ValueString())
			} else {
				messageType = nil
			}
			configuration6 := shared.ReceivedEmailTriggerConfiguration{
				MessageType: messageType,
			}
			type7 := shared.ReceivedEmailTriggerTypeEnum(triggersItem.ReceivedEmailTrigger.Type.ValueString())
			receivedEmailTrigger := shared.ReceivedEmailTrigger{
				Configuration: configuration6,
				Type:          type7,
			}
			triggers = append(triggers, shared.AnyTrigger{
				ReceivedEmailTrigger: &receivedEmailTrigger,
			})
		}
	}
	out := shared.AutomationFlowInput{
		Enabled:           enabled,
		EntitySchema:      entitySchema,
		FlowName:          flowName,
		Runs:              runs,
		TriggerConditions: triggerConditions,
		Triggers:          triggers,
	}
	return &out

}

func (r *FlowResourceModel) RefreshFromSDKType(resp *shared.AutomationFlow) {
	r.Actions = nil
	for _, actionsItem := range resp.Actions {
		var actions1 AnyActionConfig
		if actionsItem.MapEntityActionConfig != nil {
			actions1.MapEntityActionConfig = &MapEntityActionConfig{}
			if actionsItem.MapEntityActionConfig.AllowFailure != nil {
				actions1.MapEntityActionConfig.AllowFailure = types.BoolValue(*actionsItem.MapEntityActionConfig.AllowFailure)
			} else {
				actions1.MapEntityActionConfig.AllowFailure = types.BoolNull()
			}
			if actionsItem.MapEntityActionConfig.Config == nil {
				actions1.MapEntityActionConfig.Config = nil
			} else {
				actions1.MapEntityActionConfig.Config = &MapEntityConfig{}
				if actionsItem.MapEntityActionConfig.Config.LinkbackRelationAttribute != nil {
					actions1.MapEntityActionConfig.Config.LinkbackRelationAttribute = types.StringValue(*actionsItem.MapEntityActionConfig.Config.LinkbackRelationAttribute)
				} else {
					actions1.MapEntityActionConfig.Config.LinkbackRelationAttribute = types.StringNull()
				}
				actions1.MapEntityActionConfig.Config.LinkbackRelationTags = nil
				for _, v := range actionsItem.MapEntityActionConfig.Config.LinkbackRelationTags {
					actions1.MapEntityActionConfig.Config.LinkbackRelationTags = append(actions1.MapEntityActionConfig.Config.LinkbackRelationTags, types.StringValue(v))
				}
				actions1.MapEntityActionConfig.Config.MappingAttributes = nil
				for _, mappingAttributesItem := range actionsItem.MapEntityActionConfig.Config.MappingAttributes {
					var mappingAttributes1 MapEntityConfigMappingAttributes
					if mappingAttributesItem.MappingAttributeV2 != nil {
						mappingAttributes1.MappingAttributeV2 = &MappingAttributeV2{}
						if mappingAttributesItem.MappingAttributeV2.Operation.MapOfAny != nil {
							mappingAttributes1.MappingAttributeV2.Operation.MapOfAny = make(map[string]types.String)
							for key, value := range mappingAttributesItem.MappingAttributeV2.Operation.MapOfAny {
								result, _ := json.Marshal(value)
								mappingAttributes1.MappingAttributeV2.Operation.MapOfAny[key] = types.StringValue(string(result))
							}
						}
						if mappingAttributesItem.MappingAttributeV2.Operation.Any != nil {
							anyResult, _ := json.Marshal(mappingAttributesItem.MappingAttributeV2.Operation.Any)
							mappingAttributes1.MappingAttributeV2.Operation.Any = types.StringValue(string(anyResult))
						}
						if mappingAttributesItem.MappingAttributeV2.Target != nil {
							mappingAttributes1.MappingAttributeV2.Target = types.StringValue(*mappingAttributesItem.MappingAttributeV2.Target)
						} else {
							mappingAttributes1.MappingAttributeV2.Target = types.StringNull()
						}
					}
					if mappingAttributesItem.MappingAttribute != nil {
						mappingAttributes1.MappingAttribute = &MappingAttribute{}
						if mappingAttributesItem.MappingAttribute.SetValueMapper != nil {
							mappingAttributes1.MappingAttribute.SetValueMapper = &SetValueMapper{}
							mappingAttributes1.MappingAttribute.SetValueMapper.Mode = types.StringValue(string(mappingAttributesItem.MappingAttribute.SetValueMapper.Mode))
							mappingAttributes1.MappingAttribute.SetValueMapper.Target = types.StringValue(mappingAttributesItem.MappingAttribute.SetValueMapper.Target)
							valueResult, _ := json.Marshal(mappingAttributesItem.MappingAttribute.SetValueMapper.Value)
							mappingAttributes1.MappingAttribute.SetValueMapper.Value = types.StringValue(string(valueResult))
						}
						if mappingAttributesItem.MappingAttribute.CopyValueMapper != nil {
							mappingAttributes1.MappingAttribute.CopyValueMapper = &CopyValueMapper{}
							mappingAttributes1.MappingAttribute.CopyValueMapper.Mode = types.StringValue(string(mappingAttributesItem.MappingAttribute.CopyValueMapper.Mode))
							mappingAttributes1.MappingAttribute.CopyValueMapper.Source = types.StringValue(mappingAttributesItem.MappingAttribute.CopyValueMapper.Source)
							mappingAttributes1.MappingAttribute.CopyValueMapper.Target = types.StringValue(mappingAttributesItem.MappingAttribute.CopyValueMapper.Target)
						}
						if mappingAttributesItem.MappingAttribute.AppendValueMapper != nil {
							mappingAttributes1.MappingAttribute.AppendValueMapper = &AppendValueMapper{}
							mappingAttributes1.MappingAttribute.AppendValueMapper.Mode = types.StringValue(string(mappingAttributesItem.MappingAttribute.AppendValueMapper.Mode))
							if mappingAttributesItem.MappingAttribute.AppendValueMapper.Source != nil {
								mappingAttributes1.MappingAttribute.AppendValueMapper.Source = types.StringValue(*mappingAttributesItem.MappingAttribute.AppendValueMapper.Source)
							} else {
								mappingAttributes1.MappingAttribute.AppendValueMapper.Source = types.StringNull()
							}
							mappingAttributes1.MappingAttribute.AppendValueMapper.Target = types.StringValue(mappingAttributesItem.MappingAttribute.AppendValueMapper.Target)
							mappingAttributes1.MappingAttribute.AppendValueMapper.TargetUnique = nil
							for _, v := range mappingAttributesItem.MappingAttribute.AppendValueMapper.TargetUnique {
								mappingAttributes1.MappingAttribute.AppendValueMapper.TargetUnique = append(mappingAttributes1.MappingAttribute.AppendValueMapper.TargetUnique, types.StringValue(v))
							}
							mappingAttributes1.MappingAttribute.AppendValueMapper.ValueJSON = types.StringValue(mappingAttributesItem.MappingAttribute.AppendValueMapper.ValueJSON)
						}
					}
					actions1.MapEntityActionConfig.Config.MappingAttributes = append(actions1.MapEntityActionConfig.Config.MappingAttributes, mappingAttributes1)
				}
				if actionsItem.MapEntityActionConfig.Config.MappingConfig == nil {
					actions1.MapEntityActionConfig.Config.MappingConfig = nil
				} else {
					actions1.MapEntityActionConfig.Config.MappingConfig = &MappingConfigRef{}
					actions1.MapEntityActionConfig.Config.MappingConfig.ConfigID = types.StringValue(actionsItem.MapEntityActionConfig.Config.MappingConfig.ConfigID)
					actions1.MapEntityActionConfig.Config.MappingConfig.TargetID = types.StringValue(actionsItem.MapEntityActionConfig.Config.MappingConfig.TargetID)
					if actionsItem.MapEntityActionConfig.Config.MappingConfig.Version != nil {
						actions1.MapEntityActionConfig.Config.MappingConfig.Version = types.NumberValue(big.NewFloat(*actionsItem.MapEntityActionConfig.Config.MappingConfig.Version))
					} else {
						actions1.MapEntityActionConfig.Config.MappingConfig.Version = types.NumberNull()
					}
				}
				actions1.MapEntityActionConfig.Config.RelationAttributes = nil
				for _, relationAttributesItem := range actionsItem.MapEntityActionConfig.Config.RelationAttributes {
					var relationAttributes1 RelationAttribute
					relationAttributes1.Mode = types.StringValue(string(relationAttributesItem.Mode))
					relationAttributes1.RelatedTo = make(map[string]types.String)
					for key1, value2 := range relationAttributesItem.RelatedTo {
						result1, _ := json.Marshal(value2)
						relationAttributes1.RelatedTo[key1] = types.StringValue(string(result1))
					}
					if relationAttributesItem.SourceFilter == nil {
						relationAttributes1.SourceFilter = nil
					} else {
						relationAttributes1.SourceFilter = &RelationAttributeSourceFilter{}
						if relationAttributesItem.SourceFilter.Attribute != nil {
							relationAttributes1.SourceFilter.Attribute = types.StringValue(*relationAttributesItem.SourceFilter.Attribute)
						} else {
							relationAttributes1.SourceFilter.Attribute = types.StringNull()
						}
						if relationAttributesItem.SourceFilter.Limit != nil {
							relationAttributes1.SourceFilter.Limit = types.Int64Value(*relationAttributesItem.SourceFilter.Limit)
						} else {
							relationAttributes1.SourceFilter.Limit = types.Int64Null()
						}
						if relationAttributesItem.SourceFilter.RelationTag != nil {
							relationAttributes1.SourceFilter.RelationTag = types.StringValue(*relationAttributesItem.SourceFilter.RelationTag)
						} else {
							relationAttributes1.SourceFilter.RelationTag = types.StringNull()
						}
						if relationAttributesItem.SourceFilter.Schema != nil {
							relationAttributes1.SourceFilter.Schema = types.StringValue(*relationAttributesItem.SourceFilter.Schema)
						} else {
							relationAttributes1.SourceFilter.Schema = types.StringNull()
						}
						if relationAttributesItem.SourceFilter.Self != nil {
							relationAttributes1.SourceFilter.Self = types.BoolValue(*relationAttributesItem.SourceFilter.Self)
						} else {
							relationAttributes1.SourceFilter.Self = types.BoolNull()
						}
						if relationAttributesItem.SourceFilter.Tag != nil {
							relationAttributes1.SourceFilter.Tag = types.StringValue(*relationAttributesItem.SourceFilter.Tag)
						} else {
							relationAttributes1.SourceFilter.Tag = types.StringNull()
						}
					}
					relationAttributes1.Target = types.StringValue(relationAttributesItem.Target)
					relationAttributes1.TargetTags = nil
					for _, v := range relationAttributesItem.TargetTags {
						relationAttributes1.TargetTags = append(relationAttributes1.TargetTags, types.StringValue(v))
					}
					if relationAttributesItem.TargetTagsIncludeSource != nil {
						relationAttributes1.TargetTagsIncludeSource = types.BoolValue(*relationAttributesItem.TargetTagsIncludeSource)
					} else {
						relationAttributes1.TargetTagsIncludeSource = types.BoolNull()
					}
					actions1.MapEntityActionConfig.Config.RelationAttributes = append(actions1.MapEntityActionConfig.Config.RelationAttributes, relationAttributes1)
				}
				actions1.MapEntityActionConfig.Config.TargetSchema = types.StringValue(actionsItem.MapEntityActionConfig.Config.TargetSchema)
				actions1.MapEntityActionConfig.Config.TargetUnique = nil
				for _, v := range actionsItem.MapEntityActionConfig.Config.TargetUnique {
					actions1.MapEntityActionConfig.Config.TargetUnique = append(actions1.MapEntityActionConfig.Config.TargetUnique, types.StringValue(v))
				}
			}
			if actionsItem.MapEntityActionConfig.CreatedAutomatically != nil {
				actions1.MapEntityActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.MapEntityActionConfig.CreatedAutomatically)
			} else {
				actions1.MapEntityActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.MapEntityActionConfig.FlowActionID != nil {
				actions1.MapEntityActionConfig.FlowActionID = types.StringValue(*actionsItem.MapEntityActionConfig.FlowActionID)
			} else {
				actions1.MapEntityActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.MapEntityActionConfig.ID != nil {
				actions1.MapEntityActionConfig.ID = types.StringValue(*actionsItem.MapEntityActionConfig.ID)
			} else {
				actions1.MapEntityActionConfig.ID = types.StringNull()
			}
			if actionsItem.MapEntityActionConfig.Name != nil {
				actions1.MapEntityActionConfig.Name = types.StringValue(*actionsItem.MapEntityActionConfig.Name)
			} else {
				actions1.MapEntityActionConfig.Name = types.StringNull()
			}
			if actionsItem.MapEntityActionConfig.Type != nil {
				actions1.MapEntityActionConfig.Type = types.StringValue(string(*actionsItem.MapEntityActionConfig.Type))
			} else {
				actions1.MapEntityActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.TriggerWorkflowActionConfig != nil {
			actions1.TriggerWorkflowActionConfig = &TriggerWorkflowActionConfig{}
			if actionsItem.TriggerWorkflowActionConfig.AllowFailure != nil {
				actions1.TriggerWorkflowActionConfig.AllowFailure = types.BoolValue(*actionsItem.TriggerWorkflowActionConfig.AllowFailure)
			} else {
				actions1.TriggerWorkflowActionConfig.AllowFailure = types.BoolNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.Config == nil {
				actions1.TriggerWorkflowActionConfig.Config = nil
			} else {
				actions1.TriggerWorkflowActionConfig.Config = &TriggerWorkflowConfig{}
				actions1.TriggerWorkflowActionConfig.Config.AssignSteps = nil
				for _, assignStepsItem := range actionsItem.TriggerWorkflowActionConfig.Config.AssignSteps {
					var assignSteps1 AssignUsersToStep
					if assignStepsItem.StepID != nil {
						assignSteps1.StepID = types.StringValue(*assignStepsItem.StepID)
					} else {
						assignSteps1.StepID = types.StringNull()
					}
					if assignStepsItem.StepName != nil {
						assignSteps1.StepName = types.StringValue(*assignStepsItem.StepName)
					} else {
						assignSteps1.StepName = types.StringNull()
					}
					// Not Implemented assignStepsItem.UserIds, {"Name":"","EnumValues":[],"BaseName":"","Extensions":{},"Example":null,"Discriminator":null,"AssociatedTypes":[],"RefType":"","Input":false,"ItemType":{"BaseName":"","Truncated":false,"Format":"","Scope":"","Type":"number","AssociatedTypes":[],"RefType":"","Discriminator":null,"Name":"","EnumValues":[],"Comments":null,"Input":false,"Extensions":{"Symbol":"UserIds"},"Example":null,"ItemType":null,"Output":false,"Fields":[]},"Comments":null,"Output":false,"Format":"","Type":"array","Fields":[],"Scope":"","Truncated":false}, true, , , assignSteps1.UserIds
					actions1.TriggerWorkflowActionConfig.Config.AssignSteps = append(actions1.TriggerWorkflowActionConfig.Config.AssignSteps, assignSteps1)
				}
				actions1.TriggerWorkflowActionConfig.Config.Assignees = nil
				for _, v := range actionsItem.TriggerWorkflowActionConfig.Config.Assignees {
					actions1.TriggerWorkflowActionConfig.Config.Assignees = append(actions1.TriggerWorkflowActionConfig.Config.Assignees, types.StringValue(v))
				}
				actions1.TriggerWorkflowActionConfig.Config.Conditions = nil
				for _, conditionsItem := range actionsItem.TriggerWorkflowActionConfig.Config.Conditions {
					var conditions1 TriggerWorkflowCondition
					conditions1.Comparison = types.StringValue(string(conditionsItem.Comparison))
					conditions1.Schema = types.StringValue(conditionsItem.Schema)
					conditions1.Source = types.StringValue(conditionsItem.Source)
					if conditionsItem.Value == nil {
						conditions1.Value = nil
					} else {
						conditions1.Value = &TriggerWorkflowConditionValue{}
						if conditionsItem.Value.Str != nil {
							if conditionsItem.Value.Str != nil {
								conditions1.Value.Str = types.StringValue(*conditionsItem.Value.Str)
							} else {
								conditions1.Value.Str = types.StringNull()
							}
						}
						if conditionsItem.Value.Number != nil {
							if conditionsItem.Value.Number != nil {
								conditions1.Value.Number = types.NumberValue(big.NewFloat(*conditionsItem.Value.Number))
							} else {
								conditions1.Value.Number = types.NumberNull()
							}
						}
						if conditionsItem.Value.ArrayOfStr != nil {
							conditions1.Value.ArrayOfStr = nil
							for _, v := range conditionsItem.Value.ArrayOfStr {
								conditions1.Value.ArrayOfStr = append(conditions1.Value.ArrayOfStr, types.StringValue(v))
							}
						}
						if conditionsItem.Value.ArrayOfNumber != nil {
							// Not Implemented conditionsItem.Value.ArrayOfNumber, {"RefType":"","Format":"","Fields":[],"Example":null,"ItemType":{"Name":"","Comments":null,"Extensions":{"Symbol":"UserIds"},"Format":"","Truncated":false,"Type":"number","Fields":[],"AssociatedTypes":[],"BaseName":"","ItemType":null,"EnumValues":[],"Example":null,"Discriminator":null,"Scope":"","RefType":"","Input":false,"Output":false},"Type":"array","AssociatedTypes":[],"Comments":null,"Input":false,"Output":false,"Extensions":{},"Discriminator":null,"Name":"arrayOfNumber","Scope":"","BaseName":"","Truncated":false,"EnumValues":[]}, false, , , conditions1.Value.ArrayOfNumber
						}
					}
					actions1.TriggerWorkflowActionConfig.Config.Conditions = append(actions1.TriggerWorkflowActionConfig.Config.Conditions, conditions1)
				}
				if actionsItem.TriggerWorkflowActionConfig.Config.TargetWorkflow != nil {
					actions1.TriggerWorkflowActionConfig.Config.TargetWorkflow = types.StringValue(*actionsItem.TriggerWorkflowActionConfig.Config.TargetWorkflow)
				} else {
					actions1.TriggerWorkflowActionConfig.Config.TargetWorkflow = types.StringNull()
				}
			}
			if actionsItem.TriggerWorkflowActionConfig.CreatedAutomatically != nil {
				actions1.TriggerWorkflowActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.TriggerWorkflowActionConfig.CreatedAutomatically)
			} else {
				actions1.TriggerWorkflowActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.FlowActionID != nil {
				actions1.TriggerWorkflowActionConfig.FlowActionID = types.StringValue(*actionsItem.TriggerWorkflowActionConfig.FlowActionID)
			} else {
				actions1.TriggerWorkflowActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.ID != nil {
				actions1.TriggerWorkflowActionConfig.ID = types.StringValue(*actionsItem.TriggerWorkflowActionConfig.ID)
			} else {
				actions1.TriggerWorkflowActionConfig.ID = types.StringNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.Name != nil {
				actions1.TriggerWorkflowActionConfig.Name = types.StringValue(*actionsItem.TriggerWorkflowActionConfig.Name)
			} else {
				actions1.TriggerWorkflowActionConfig.Name = types.StringNull()
			}
			if actionsItem.TriggerWorkflowActionConfig.Type != nil {
				actions1.TriggerWorkflowActionConfig.Type = types.StringValue(string(*actionsItem.TriggerWorkflowActionConfig.Type))
			} else {
				actions1.TriggerWorkflowActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.TriggerWebhookActionConfig != nil {
			actions1.TriggerWebhookActionConfig = &TriggerWebhookActionConfig{}
			if actionsItem.TriggerWebhookActionConfig.AllowFailure != nil {
				actions1.TriggerWebhookActionConfig.AllowFailure = types.BoolValue(*actionsItem.TriggerWebhookActionConfig.AllowFailure)
			} else {
				actions1.TriggerWebhookActionConfig.AllowFailure = types.BoolNull()
			}
			if actionsItem.TriggerWebhookActionConfig.Config == nil {
				actions1.TriggerWebhookActionConfig.Config = nil
			} else {
				actions1.TriggerWebhookActionConfig.Config = &TriggerWebhookConfig{}
				actions1.TriggerWebhookActionConfig.Config.EntitySources = nil
				for _, v := range actionsItem.TriggerWebhookActionConfig.Config.EntitySources {
					actions1.TriggerWebhookActionConfig.Config.EntitySources = append(actions1.TriggerWebhookActionConfig.Config.EntitySources, types.StringValue(v))
				}
				if actionsItem.TriggerWebhookActionConfig.Config.TargetWebhookID != nil {
					actions1.TriggerWebhookActionConfig.Config.TargetWebhookID = types.StringValue(*actionsItem.TriggerWebhookActionConfig.Config.TargetWebhookID)
				} else {
					actions1.TriggerWebhookActionConfig.Config.TargetWebhookID = types.StringNull()
				}
			}
			if actionsItem.TriggerWebhookActionConfig.CreatedAutomatically != nil {
				actions1.TriggerWebhookActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.TriggerWebhookActionConfig.CreatedAutomatically)
			} else {
				actions1.TriggerWebhookActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.TriggerWebhookActionConfig.FlowActionID != nil {
				actions1.TriggerWebhookActionConfig.FlowActionID = types.StringValue(*actionsItem.TriggerWebhookActionConfig.FlowActionID)
			} else {
				actions1.TriggerWebhookActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.TriggerWebhookActionConfig.ID != nil {
				actions1.TriggerWebhookActionConfig.ID = types.StringValue(*actionsItem.TriggerWebhookActionConfig.ID)
			} else {
				actions1.TriggerWebhookActionConfig.ID = types.StringNull()
			}
			if actionsItem.TriggerWebhookActionConfig.Name != nil {
				actions1.TriggerWebhookActionConfig.Name = types.StringValue(*actionsItem.TriggerWebhookActionConfig.Name)
			} else {
				actions1.TriggerWebhookActionConfig.Name = types.StringNull()
			}
			if actionsItem.TriggerWebhookActionConfig.Type != nil {
				actions1.TriggerWebhookActionConfig.Type = types.StringValue(string(*actionsItem.TriggerWebhookActionConfig.Type))
			} else {
				actions1.TriggerWebhookActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.CreateDocumentActionConfig != nil {
			actions1.CreateDocumentActionConfig = &CreateDocumentActionConfig{}
			if actionsItem.CreateDocumentActionConfig.AllowFailure != nil {
				actions1.CreateDocumentActionConfig.AllowFailure = types.BoolValue(*actionsItem.CreateDocumentActionConfig.AllowFailure)
			} else {
				actions1.CreateDocumentActionConfig.AllowFailure = types.BoolNull()
			}
			if actionsItem.CreateDocumentActionConfig.Config == nil {
				actions1.CreateDocumentActionConfig.Config = nil
			} else {
				actions1.CreateDocumentActionConfig.Config = &CreateDocumentConfig{}
				if actionsItem.CreateDocumentActionConfig.Config.Filename != nil {
					actions1.CreateDocumentActionConfig.Config.Filename = types.StringValue(*actionsItem.CreateDocumentActionConfig.Config.Filename)
				} else {
					actions1.CreateDocumentActionConfig.Config.Filename = types.StringNull()
				}
				if actionsItem.CreateDocumentActionConfig.Config.TemplateID != nil {
					actions1.CreateDocumentActionConfig.Config.TemplateID = types.StringValue(*actionsItem.CreateDocumentActionConfig.Config.TemplateID)
				} else {
					actions1.CreateDocumentActionConfig.Config.TemplateID = types.StringNull()
				}
			}
			if actionsItem.CreateDocumentActionConfig.CreatedAutomatically != nil {
				actions1.CreateDocumentActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.CreateDocumentActionConfig.CreatedAutomatically)
			} else {
				actions1.CreateDocumentActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.CreateDocumentActionConfig.FlowActionID != nil {
				actions1.CreateDocumentActionConfig.FlowActionID = types.StringValue(*actionsItem.CreateDocumentActionConfig.FlowActionID)
			} else {
				actions1.CreateDocumentActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.CreateDocumentActionConfig.ID != nil {
				actions1.CreateDocumentActionConfig.ID = types.StringValue(*actionsItem.CreateDocumentActionConfig.ID)
			} else {
				actions1.CreateDocumentActionConfig.ID = types.StringNull()
			}
			if actionsItem.CreateDocumentActionConfig.Name != nil {
				actions1.CreateDocumentActionConfig.Name = types.StringValue(*actionsItem.CreateDocumentActionConfig.Name)
			} else {
				actions1.CreateDocumentActionConfig.Name = types.StringNull()
			}
			if actionsItem.CreateDocumentActionConfig.Type != nil {
				actions1.CreateDocumentActionConfig.Type = types.StringValue(string(*actionsItem.CreateDocumentActionConfig.Type))
			} else {
				actions1.CreateDocumentActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.SendEmailActionConfig != nil {
			actions1.SendEmailActionConfig = &SendEmailActionConfig{}
			if actionsItem.SendEmailActionConfig.AllowFailure != nil {
				actions1.SendEmailActionConfig.AllowFailure = types.BoolValue(*actionsItem.SendEmailActionConfig.AllowFailure)
			} else {
				actions1.SendEmailActionConfig.AllowFailure = types.BoolNull()
			}
			if actionsItem.SendEmailActionConfig.Config == nil {
				actions1.SendEmailActionConfig.Config = nil
			} else {
				actions1.SendEmailActionConfig.Config = &SendEmailConfig{}
				actions1.SendEmailActionConfig.Config.Attachments = nil
				for _, attachmentsItem := range actionsItem.SendEmailActionConfig.Config.Attachments {
					var attachments1 SendEmailConfigAttachments
					if attachmentsItem.SourceFilter == nil {
						attachments1.SourceFilter = nil
					} else {
						attachments1.SourceFilter = &SendEmailConfigAttachmentsSourceFilter{}
						if attachmentsItem.SourceFilter.Attribute != nil {
							attachments1.SourceFilter.Attribute = types.StringValue(*attachmentsItem.SourceFilter.Attribute)
						} else {
							attachments1.SourceFilter.Attribute = types.StringNull()
						}
						if attachmentsItem.SourceFilter.DocumentType != nil {
							attachments1.SourceFilter.DocumentType = types.StringValue(string(*attachmentsItem.SourceFilter.DocumentType))
						} else {
							attachments1.SourceFilter.DocumentType = types.StringNull()
						}
						if attachmentsItem.SourceFilter.FilenameRegex != nil {
							attachments1.SourceFilter.FilenameRegex = types.StringValue(*attachmentsItem.SourceFilter.FilenameRegex)
						} else {
							attachments1.SourceFilter.FilenameRegex = types.StringNull()
						}
						if attachmentsItem.SourceFilter.Limit != nil {
							attachments1.SourceFilter.Limit = types.Int64Value(*attachmentsItem.SourceFilter.Limit)
						} else {
							attachments1.SourceFilter.Limit = types.Int64Null()
						}
						if attachmentsItem.SourceFilter.RelationTag != nil {
							attachments1.SourceFilter.RelationTag = types.StringValue(*attachmentsItem.SourceFilter.RelationTag)
						} else {
							attachments1.SourceFilter.RelationTag = types.StringNull()
						}
						if attachmentsItem.SourceFilter.Self != nil {
							attachments1.SourceFilter.Self = types.BoolValue(*attachmentsItem.SourceFilter.Self)
						} else {
							attachments1.SourceFilter.Self = types.BoolNull()
						}
						if attachmentsItem.SourceFilter.Tag != nil {
							attachments1.SourceFilter.Tag = types.StringValue(*attachmentsItem.SourceFilter.Tag)
						} else {
							attachments1.SourceFilter.Tag = types.StringNull()
						}
					}
					actions1.SendEmailActionConfig.Config.Attachments = append(actions1.SendEmailActionConfig.Config.Attachments, attachments1)
				}
				if actionsItem.SendEmailActionConfig.Config.EmailTemplateID != nil {
					actions1.SendEmailActionConfig.Config.EmailTemplateID = types.StringValue(*actionsItem.SendEmailActionConfig.Config.EmailTemplateID)
				} else {
					actions1.SendEmailActionConfig.Config.EmailTemplateID = types.StringNull()
				}
				if actionsItem.SendEmailActionConfig.Config.LanguageCode != nil {
					actions1.SendEmailActionConfig.Config.LanguageCode = types.StringValue(string(*actionsItem.SendEmailActionConfig.Config.LanguageCode))
				} else {
					actions1.SendEmailActionConfig.Config.LanguageCode = types.StringNull()
				}
			}
			if actionsItem.SendEmailActionConfig.CreatedAutomatically != nil {
				actions1.SendEmailActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.SendEmailActionConfig.CreatedAutomatically)
			} else {
				actions1.SendEmailActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.SendEmailActionConfig.FlowActionID != nil {
				actions1.SendEmailActionConfig.FlowActionID = types.StringValue(*actionsItem.SendEmailActionConfig.FlowActionID)
			} else {
				actions1.SendEmailActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.SendEmailActionConfig.ID != nil {
				actions1.SendEmailActionConfig.ID = types.StringValue(*actionsItem.SendEmailActionConfig.ID)
			} else {
				actions1.SendEmailActionConfig.ID = types.StringNull()
			}
			if actionsItem.SendEmailActionConfig.Name != nil {
				actions1.SendEmailActionConfig.Name = types.StringValue(*actionsItem.SendEmailActionConfig.Name)
			} else {
				actions1.SendEmailActionConfig.Name = types.StringNull()
			}
			if actionsItem.SendEmailActionConfig.Type != nil {
				actions1.SendEmailActionConfig.Type = types.StringValue(string(*actionsItem.SendEmailActionConfig.Type))
			} else {
				actions1.SendEmailActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.CartCheckoutActionConfig != nil {
			actions1.CartCheckoutActionConfig = &CartCheckoutActionConfig{}
			if actionsItem.CartCheckoutActionConfig.AllowFailure != nil {
				actions1.CartCheckoutActionConfig.AllowFailure = types.BoolValue(*actionsItem.CartCheckoutActionConfig.AllowFailure)
			} else {
				actions1.CartCheckoutActionConfig.AllowFailure = types.BoolNull()
			}
			if actionsItem.CartCheckoutActionConfig.Config == nil {
				actions1.CartCheckoutActionConfig.Config = nil
			} else {
				actions1.CartCheckoutActionConfig.Config = &CartCheckoutConfig{}
				if actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationAttribute != nil {
					actions1.CartCheckoutActionConfig.Config.LinkbackRelationAttribute = types.StringValue(*actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationAttribute)
				} else {
					actions1.CartCheckoutActionConfig.Config.LinkbackRelationAttribute = types.StringNull()
				}
				actions1.CartCheckoutActionConfig.Config.LinkbackRelationTags = nil
				for _, v := range actionsItem.CartCheckoutActionConfig.Config.LinkbackRelationTags {
					actions1.CartCheckoutActionConfig.Config.LinkbackRelationTags = append(actions1.CartCheckoutActionConfig.Config.LinkbackRelationTags, types.StringValue(v))
				}
				actions1.CartCheckoutActionConfig.Config.MappingAttributes = nil
				for _, mappingAttributesItem1 := range actionsItem.CartCheckoutActionConfig.Config.MappingAttributes {
					var mappingAttributes3 CartCheckoutConfigMappingAttributes
					if mappingAttributesItem1.MappingAttributeV2 != nil {
						mappingAttributes3.MappingAttributeV2 = &MappingAttributeV21{}
						if mappingAttributesItem1.MappingAttributeV2.Operation.MapOfAny != nil {
							mappingAttributes3.MappingAttributeV2.Operation.MapOfAny = make(map[string]types.String)
							for key2, value4 := range mappingAttributesItem1.MappingAttributeV2.Operation.MapOfAny {
								result2, _ := json.Marshal(value4)
								mappingAttributes3.MappingAttributeV2.Operation.MapOfAny[key2] = types.StringValue(string(result2))
							}
						}
						if mappingAttributesItem1.MappingAttributeV2.Operation.Any != nil {
							anyResult1, _ := json.Marshal(mappingAttributesItem1.MappingAttributeV2.Operation.Any)
							mappingAttributes3.MappingAttributeV2.Operation.Any = types.StringValue(string(anyResult1))
						}
						if mappingAttributesItem1.MappingAttributeV2.Target != nil {
							mappingAttributes3.MappingAttributeV2.Target = types.StringValue(*mappingAttributesItem1.MappingAttributeV2.Target)
						} else {
							mappingAttributes3.MappingAttributeV2.Target = types.StringNull()
						}
					}
					if mappingAttributesItem1.MappingAttribute != nil {
						mappingAttributes3.MappingAttribute = &MappingAttribute{}
						if mappingAttributesItem1.MappingAttribute.SetValueMapper != nil {
							mappingAttributes3.MappingAttribute.SetValueMapper = &SetValueMapper{}
							mappingAttributes3.MappingAttribute.SetValueMapper.Mode = types.StringValue(string(mappingAttributesItem1.MappingAttribute.SetValueMapper.Mode))
							mappingAttributes3.MappingAttribute.SetValueMapper.Target = types.StringValue(mappingAttributesItem1.MappingAttribute.SetValueMapper.Target)
							valueResult1, _ := json.Marshal(mappingAttributesItem1.MappingAttribute.SetValueMapper.Value)
							mappingAttributes3.MappingAttribute.SetValueMapper.Value = types.StringValue(string(valueResult1))
						}
						if mappingAttributesItem1.MappingAttribute.CopyValueMapper != nil {
							mappingAttributes3.MappingAttribute.CopyValueMapper = &CopyValueMapper{}
							mappingAttributes3.MappingAttribute.CopyValueMapper.Mode = types.StringValue(string(mappingAttributesItem1.MappingAttribute.CopyValueMapper.Mode))
							mappingAttributes3.MappingAttribute.CopyValueMapper.Source = types.StringValue(mappingAttributesItem1.MappingAttribute.CopyValueMapper.Source)
							mappingAttributes3.MappingAttribute.CopyValueMapper.Target = types.StringValue(mappingAttributesItem1.MappingAttribute.CopyValueMapper.Target)
						}
						if mappingAttributesItem1.MappingAttribute.AppendValueMapper != nil {
							mappingAttributes3.MappingAttribute.AppendValueMapper = &AppendValueMapper{}
							mappingAttributes3.MappingAttribute.AppendValueMapper.Mode = types.StringValue(string(mappingAttributesItem1.MappingAttribute.AppendValueMapper.Mode))
							if mappingAttributesItem1.MappingAttribute.AppendValueMapper.Source != nil {
								mappingAttributes3.MappingAttribute.AppendValueMapper.Source = types.StringValue(*mappingAttributesItem1.MappingAttribute.AppendValueMapper.Source)
							} else {
								mappingAttributes3.MappingAttribute.AppendValueMapper.Source = types.StringNull()
							}
							mappingAttributes3.MappingAttribute.AppendValueMapper.Target = types.StringValue(mappingAttributesItem1.MappingAttribute.AppendValueMapper.Target)
							mappingAttributes3.MappingAttribute.AppendValueMapper.TargetUnique = nil
							for _, v := range mappingAttributesItem1.MappingAttribute.AppendValueMapper.TargetUnique {
								mappingAttributes3.MappingAttribute.AppendValueMapper.TargetUnique = append(mappingAttributes3.MappingAttribute.AppendValueMapper.TargetUnique, types.StringValue(v))
							}
							mappingAttributes3.MappingAttribute.AppendValueMapper.ValueJSON = types.StringValue(mappingAttributesItem1.MappingAttribute.AppendValueMapper.ValueJSON)
						}
					}
					actions1.CartCheckoutActionConfig.Config.MappingAttributes = append(actions1.CartCheckoutActionConfig.Config.MappingAttributes, mappingAttributes3)
				}
				if actionsItem.CartCheckoutActionConfig.Config.MappingConfig == nil {
					actions1.CartCheckoutActionConfig.Config.MappingConfig = nil
				} else {
					actions1.CartCheckoutActionConfig.Config.MappingConfig = &MappingConfigRef{}
					actions1.CartCheckoutActionConfig.Config.MappingConfig.ConfigID = types.StringValue(actionsItem.CartCheckoutActionConfig.Config.MappingConfig.ConfigID)
					actions1.CartCheckoutActionConfig.Config.MappingConfig.TargetID = types.StringValue(actionsItem.CartCheckoutActionConfig.Config.MappingConfig.TargetID)
					if actionsItem.CartCheckoutActionConfig.Config.MappingConfig.Version != nil {
						actions1.CartCheckoutActionConfig.Config.MappingConfig.Version = types.NumberValue(big.NewFloat(*actionsItem.CartCheckoutActionConfig.Config.MappingConfig.Version))
					} else {
						actions1.CartCheckoutActionConfig.Config.MappingConfig.Version = types.NumberNull()
					}
				}
				actions1.CartCheckoutActionConfig.Config.RelationAttributes = nil
				for _, relationAttributesItem1 := range actionsItem.CartCheckoutActionConfig.Config.RelationAttributes {
					var relationAttributes3 RelationAttribute
					relationAttributes3.Mode = types.StringValue(string(relationAttributesItem1.Mode))
					relationAttributes3.RelatedTo = make(map[string]types.String)
					for key3, value6 := range relationAttributesItem1.RelatedTo {
						result3, _ := json.Marshal(value6)
						relationAttributes3.RelatedTo[key3] = types.StringValue(string(result3))
					}
					if relationAttributesItem1.SourceFilter == nil {
						relationAttributes3.SourceFilter = nil
					} else {
						relationAttributes3.SourceFilter = &RelationAttributeSourceFilter{}
						if relationAttributesItem1.SourceFilter.Attribute != nil {
							relationAttributes3.SourceFilter.Attribute = types.StringValue(*relationAttributesItem1.SourceFilter.Attribute)
						} else {
							relationAttributes3.SourceFilter.Attribute = types.StringNull()
						}
						if relationAttributesItem1.SourceFilter.Limit != nil {
							relationAttributes3.SourceFilter.Limit = types.Int64Value(*relationAttributesItem1.SourceFilter.Limit)
						} else {
							relationAttributes3.SourceFilter.Limit = types.Int64Null()
						}
						if relationAttributesItem1.SourceFilter.RelationTag != nil {
							relationAttributes3.SourceFilter.RelationTag = types.StringValue(*relationAttributesItem1.SourceFilter.RelationTag)
						} else {
							relationAttributes3.SourceFilter.RelationTag = types.StringNull()
						}
						if relationAttributesItem1.SourceFilter.Schema != nil {
							relationAttributes3.SourceFilter.Schema = types.StringValue(*relationAttributesItem1.SourceFilter.Schema)
						} else {
							relationAttributes3.SourceFilter.Schema = types.StringNull()
						}
						if relationAttributesItem1.SourceFilter.Self != nil {
							relationAttributes3.SourceFilter.Self = types.BoolValue(*relationAttributesItem1.SourceFilter.Self)
						} else {
							relationAttributes3.SourceFilter.Self = types.BoolNull()
						}
						if relationAttributesItem1.SourceFilter.Tag != nil {
							relationAttributes3.SourceFilter.Tag = types.StringValue(*relationAttributesItem1.SourceFilter.Tag)
						} else {
							relationAttributes3.SourceFilter.Tag = types.StringNull()
						}
					}
					relationAttributes3.Target = types.StringValue(relationAttributesItem1.Target)
					relationAttributes3.TargetTags = nil
					for _, v := range relationAttributesItem1.TargetTags {
						relationAttributes3.TargetTags = append(relationAttributes3.TargetTags, types.StringValue(v))
					}
					if relationAttributesItem1.TargetTagsIncludeSource != nil {
						relationAttributes3.TargetTagsIncludeSource = types.BoolValue(*relationAttributesItem1.TargetTagsIncludeSource)
					} else {
						relationAttributes3.TargetTagsIncludeSource = types.BoolNull()
					}
					actions1.CartCheckoutActionConfig.Config.RelationAttributes = append(actions1.CartCheckoutActionConfig.Config.RelationAttributes, relationAttributes3)
				}
				actions1.CartCheckoutActionConfig.Config.TargetUnique = nil
				for _, v := range actionsItem.CartCheckoutActionConfig.Config.TargetUnique {
					actions1.CartCheckoutActionConfig.Config.TargetUnique = append(actions1.CartCheckoutActionConfig.Config.TargetUnique, types.StringValue(v))
				}
				if actionsItem.CartCheckoutActionConfig.Config.Version != nil {
					actions1.CartCheckoutActionConfig.Config.Version = types.StringValue(*actionsItem.CartCheckoutActionConfig.Config.Version)
				} else {
					actions1.CartCheckoutActionConfig.Config.Version = types.StringNull()
				}
			}
			if actionsItem.CartCheckoutActionConfig.CreatedAutomatically != nil {
				actions1.CartCheckoutActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.CartCheckoutActionConfig.CreatedAutomatically)
			} else {
				actions1.CartCheckoutActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.CartCheckoutActionConfig.FlowActionID != nil {
				actions1.CartCheckoutActionConfig.FlowActionID = types.StringValue(*actionsItem.CartCheckoutActionConfig.FlowActionID)
			} else {
				actions1.CartCheckoutActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.CartCheckoutActionConfig.ID != nil {
				actions1.CartCheckoutActionConfig.ID = types.StringValue(*actionsItem.CartCheckoutActionConfig.ID)
			} else {
				actions1.CartCheckoutActionConfig.ID = types.StringNull()
			}
			if actionsItem.CartCheckoutActionConfig.Name != nil {
				actions1.CartCheckoutActionConfig.Name = types.StringValue(*actionsItem.CartCheckoutActionConfig.Name)
			} else {
				actions1.CartCheckoutActionConfig.Name = types.StringNull()
			}
			if actionsItem.CartCheckoutActionConfig.Type != nil {
				actions1.CartCheckoutActionConfig.Type = types.StringValue(string(*actionsItem.CartCheckoutActionConfig.Type))
			} else {
				actions1.CartCheckoutActionConfig.Type = types.StringNull()
			}
		}
		if actionsItem.AutomationActionConfig != nil {
			actions1.AutomationActionConfig = &AutomationActionConfig{}
			if actionsItem.AutomationActionConfig.AllowFailure != nil {
				actions1.AutomationActionConfig.AllowFailure = types.BoolValue(*actionsItem.AutomationActionConfig.AllowFailure)
			} else {
				actions1.AutomationActionConfig.AllowFailure = types.BoolNull()
			}
			actions1.AutomationActionConfig.Config = make(map[string]types.String)
			for key4, value7 := range actionsItem.AutomationActionConfig.Config {
				result4, _ := json.Marshal(value7)
				actions1.AutomationActionConfig.Config[key4] = types.StringValue(string(result4))
			}
			if actionsItem.AutomationActionConfig.CreatedAutomatically != nil {
				actions1.AutomationActionConfig.CreatedAutomatically = types.BoolValue(*actionsItem.AutomationActionConfig.CreatedAutomatically)
			} else {
				actions1.AutomationActionConfig.CreatedAutomatically = types.BoolNull()
			}
			if actionsItem.AutomationActionConfig.FlowActionID != nil {
				actions1.AutomationActionConfig.FlowActionID = types.StringValue(*actionsItem.AutomationActionConfig.FlowActionID)
			} else {
				actions1.AutomationActionConfig.FlowActionID = types.StringNull()
			}
			if actionsItem.AutomationActionConfig.ID != nil {
				actions1.AutomationActionConfig.ID = types.StringValue(*actionsItem.AutomationActionConfig.ID)
			} else {
				actions1.AutomationActionConfig.ID = types.StringNull()
			}
			if actionsItem.AutomationActionConfig.Name != nil {
				actions1.AutomationActionConfig.Name = types.StringValue(*actionsItem.AutomationActionConfig.Name)
			} else {
				actions1.AutomationActionConfig.Name = types.StringNull()
			}
			if actionsItem.AutomationActionConfig.Type != nil {
				actions1.AutomationActionConfig.Type = types.StringValue(*actionsItem.AutomationActionConfig.Type)
			} else {
				actions1.AutomationActionConfig.Type = types.StringNull()
			}
		}
		r.Actions = append(r.Actions, actions1)
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.CreatedBy != nil {
		r.CreatedBy = types.StringValue(*resp.CreatedBy)
	} else {
		r.CreatedBy = types.StringNull()
	}
	if resp.Enabled != nil {
		r.Enabled = types.BoolValue(*resp.Enabled)
	} else {
		r.Enabled = types.BoolNull()
	}
	if resp.EntitySchema != nil {
		r.EntitySchema = types.StringValue(*resp.EntitySchema)
	} else {
		r.EntitySchema = types.StringNull()
	}
	r.FlowName = types.StringValue(resp.FlowName)
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.LastUpdatedBy != nil {
		r.LastUpdatedBy = types.StringValue(*resp.LastUpdatedBy)
	} else {
		r.LastUpdatedBy = types.StringNull()
	}
	if resp.OrgID != nil {
		r.OrgID = types.StringValue(*resp.OrgID)
	} else {
		r.OrgID = types.StringNull()
	}
	if resp.Runs != nil {
		r.Runs = types.NumberValue(big.NewFloat(*resp.Runs))
	} else {
		r.Runs = types.NumberNull()
	}
	r.TriggerConditions = nil
	for _, triggerConditionsItem := range resp.TriggerConditions {
		var triggerConditions1 TriggerCondition
		triggerConditions1.Comparison = types.StringValue(string(triggerConditionsItem.Comparison))
		triggerConditions1.Source = types.StringValue(triggerConditionsItem.Source)
		if triggerConditionsItem.Value == nil {
			triggerConditions1.Value = nil
		} else {
			triggerConditions1.Value = &TriggerConditionValue{}
			if triggerConditionsItem.Value.Str != nil {
				if triggerConditionsItem.Value.Str != nil {
					triggerConditions1.Value.Str = types.StringValue(*triggerConditionsItem.Value.Str)
				} else {
					triggerConditions1.Value.Str = types.StringNull()
				}
			}
			if triggerConditionsItem.Value.Number != nil {
				if triggerConditionsItem.Value.Number != nil {
					triggerConditions1.Value.Number = types.NumberValue(big.NewFloat(*triggerConditionsItem.Value.Number))
				} else {
					triggerConditions1.Value.Number = types.NumberNull()
				}
			}
			if triggerConditionsItem.Value.ArrayOfStr != nil {
				triggerConditions1.Value.ArrayOfStr = nil
				for _, v := range triggerConditionsItem.Value.ArrayOfStr {
					triggerConditions1.Value.ArrayOfStr = append(triggerConditions1.Value.ArrayOfStr, types.StringValue(v))
				}
			}
			if triggerConditionsItem.Value.ArrayOfNumber != nil {
				// Not Implemented triggerConditionsItem.Value.ArrayOfNumber, {"Discriminator":null,"Name":"arrayOfNumber","Fields":[],"Output":false,"Example":null,"Scope":"","Comments":null,"Type":"array","ItemType":{"ItemType":null,"Fields":[],"Input":false,"Extensions":{"Symbol":"UserIds"},"Name":"","AssociatedTypes":[],"Scope":"","Output":false,"Example":null,"Format":"","Type":"number","RefType":"","Truncated":false,"Discriminator":null,"EnumValues":[],"BaseName":"","Comments":null},"AssociatedTypes":[],"EnumValues":[],"BaseName":"","RefType":"","Input":false,"Format":"","Truncated":false,"Extensions":{}}, false, , , triggerConditions1.Value.ArrayOfNumber
			}
		}
		r.TriggerConditions = append(r.TriggerConditions, triggerConditions1)
	}
	r.Triggers = nil
	for _, triggersItem := range resp.Triggers {
		var triggers1 AnyTrigger
		if triggersItem.FrontendSubmitTrigger != nil {
			triggers1.FrontendSubmitTrigger = &FrontendSubmitTrigger{}
			if triggersItem.FrontendSubmitTrigger.Configuration.SourceID != nil {
				triggers1.FrontendSubmitTrigger.Configuration.SourceID = types.StringValue(*triggersItem.FrontendSubmitTrigger.Configuration.SourceID)
			} else {
				triggers1.FrontendSubmitTrigger.Configuration.SourceID = types.StringNull()
			}
			triggers1.FrontendSubmitTrigger.Type = types.StringValue(string(triggersItem.FrontendSubmitTrigger.Type))
		}
		if triggersItem.JourneySubmitTrigger != nil {
			triggers1.JourneySubmitTrigger = &JourneySubmitTrigger{}
			triggers1.JourneySubmitTrigger.Configuration.SourceID = types.StringValue(triggersItem.JourneySubmitTrigger.Configuration.SourceID)
			triggers1.JourneySubmitTrigger.Type = types.StringValue(string(triggersItem.JourneySubmitTrigger.Type))
		}
		if triggersItem.APISubmissionTrigger != nil {
			triggers1.APISubmissionTrigger = &APISubmissionTrigger{}
			if triggersItem.APISubmissionTrigger.Configuration.SourceID != nil {
				triggers1.APISubmissionTrigger.Configuration.SourceID = types.StringValue(*triggersItem.APISubmissionTrigger.Configuration.SourceID)
			} else {
				triggers1.APISubmissionTrigger.Configuration.SourceID = types.StringNull()
			}
			triggers1.APISubmissionTrigger.Type = types.StringValue(string(triggersItem.APISubmissionTrigger.Type))
		}
		if triggersItem.EntityOperationTrigger != nil {
			triggers1.EntityOperationTrigger = &EntityOperationTrigger{}
			triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
				triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = append(triggers1.EntityOperationTrigger.Configuration.ExcludeActivities, types.StringValue(v))
			}
			triggers1.EntityOperationTrigger.Configuration.IncludeActivities = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
				triggers1.EntityOperationTrigger.Configuration.IncludeActivities = append(triggers1.EntityOperationTrigger.Configuration.IncludeActivities, types.StringValue(v))
			}
			triggers1.EntityOperationTrigger.Configuration.Operations = nil
			for _, v := range triggersItem.EntityOperationTrigger.Configuration.Operations {
				triggers1.EntityOperationTrigger.Configuration.Operations = append(triggers1.EntityOperationTrigger.Configuration.Operations, types.StringValue(string(v)))
			}
			triggers1.EntityOperationTrigger.Configuration.Schema = types.StringValue(triggersItem.EntityOperationTrigger.Configuration.Schema)
			triggers1.EntityOperationTrigger.Type = types.StringValue(string(triggersItem.EntityOperationTrigger.Type))
		}
		if triggersItem.ActivityTrigger != nil {
			triggers1.ActivityTrigger = &ActivityTrigger{}
			if triggersItem.ActivityTrigger.Configuration.Schema != nil {
				triggers1.ActivityTrigger.Configuration.Schema = types.StringValue(*triggersItem.ActivityTrigger.Configuration.Schema)
			} else {
				triggers1.ActivityTrigger.Configuration.Schema = types.StringNull()
			}
			triggers1.ActivityTrigger.Configuration.Types = nil
			for _, v := range triggersItem.ActivityTrigger.Configuration.Types {
				triggers1.ActivityTrigger.Configuration.Types = append(triggers1.ActivityTrigger.Configuration.Types, types.StringValue(string(v)))
			}
			triggers1.ActivityTrigger.Type = types.StringValue(string(triggersItem.ActivityTrigger.Type))
		}
		if triggersItem.EntityManualTrigger != nil {
			triggers1.EntityManualTrigger = &EntityManualTrigger{}
			if triggersItem.EntityManualTrigger.Configuration.Schema != nil {
				triggers1.EntityManualTrigger.Configuration.Schema = types.StringValue(*triggersItem.EntityManualTrigger.Configuration.Schema)
			} else {
				triggers1.EntityManualTrigger.Configuration.Schema = types.StringNull()
			}
			triggers1.EntityManualTrigger.Type = types.StringValue(string(triggersItem.EntityManualTrigger.Type))
		}
		if triggersItem.ReceivedEmailTrigger != nil {
			triggers1.ReceivedEmailTrigger = &ReceivedEmailTrigger{}
			if triggersItem.ReceivedEmailTrigger.Configuration.MessageType != nil {
				triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringValue(string(*triggersItem.ReceivedEmailTrigger.Configuration.MessageType))
			} else {
				triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringNull()
			}
			triggers1.ReceivedEmailTrigger.Type = types.StringValue(string(triggersItem.ReceivedEmailTrigger.Type))
		}
		r.Triggers = append(r.Triggers, triggers1)
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}

}
