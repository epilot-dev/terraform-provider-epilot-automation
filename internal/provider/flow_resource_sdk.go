// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-automation/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *FlowResourceModel) ToSharedAutomationFlowInput() *shared.AutomationFlowInput {
	var manifest []string = []string{}
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var actions []interface{} = []interface{}{}
	for _, actionsItem := range r.Actions {
		var actionsTmp interface{}
		_ = json.Unmarshal([]byte(actionsItem.ValueString()), &actionsTmp)
		actions = append(actions, actionsTmp)
	}
	var conditions []shared.ActionCondition = []shared.ActionCondition{}
	for _, conditionsItem := range r.Conditions {
		evaluationResult := new(bool)
		if !conditionsItem.EvaluationResult.IsUnknown() && !conditionsItem.EvaluationResult.IsNull() {
			*evaluationResult = conditionsItem.EvaluationResult.ValueBool()
		} else {
			evaluationResult = nil
		}
		id := new(string)
		if !conditionsItem.ID.IsUnknown() && !conditionsItem.ID.IsNull() {
			*id = conditionsItem.ID.ValueString()
		} else {
			id = nil
		}
		scheduleID := new(string)
		if !conditionsItem.ScheduleID.IsUnknown() && !conditionsItem.ScheduleID.IsNull() {
			*scheduleID = conditionsItem.ScheduleID.ValueString()
		} else {
			scheduleID = nil
		}
		var statements []shared.ConditionStatement = []shared.ConditionStatement{}
		for _, statementsItem := range conditionsItem.Statements {
			id1 := new(string)
			if !statementsItem.ID.IsUnknown() && !statementsItem.ID.IsNull() {
				*id1 = statementsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			operation := new(shared.Operation)
			if !statementsItem.Operation.IsUnknown() && !statementsItem.Operation.IsNull() {
				*operation = shared.Operation(statementsItem.Operation.ValueString())
			} else {
				operation = nil
			}
			var source *shared.Source
			if statementsItem.Source != nil {
				attribute := new(string)
				if !statementsItem.Source.Attribute.IsUnknown() && !statementsItem.Source.Attribute.IsNull() {
					*attribute = statementsItem.Source.Attribute.ValueString()
				} else {
					attribute = nil
				}
				attributeOperation := new(shared.AttributeOperation)
				if !statementsItem.Source.AttributeOperation.IsUnknown() && !statementsItem.Source.AttributeOperation.IsNull() {
					*attributeOperation = shared.AttributeOperation(statementsItem.Source.AttributeOperation.ValueString())
				} else {
					attributeOperation = nil
				}
				attributeRepeatable := new(bool)
				if !statementsItem.Source.AttributeRepeatable.IsUnknown() && !statementsItem.Source.AttributeRepeatable.IsNull() {
					*attributeRepeatable = statementsItem.Source.AttributeRepeatable.ValueBool()
				} else {
					attributeRepeatable = nil
				}
				attributeType := new(shared.AttributeType)
				if !statementsItem.Source.AttributeType.IsUnknown() && !statementsItem.Source.AttributeType.IsNull() {
					*attributeType = shared.AttributeType(statementsItem.Source.AttributeType.ValueString())
				} else {
					attributeType = nil
				}
				id2 := new(string)
				if !statementsItem.Source.ID.IsUnknown() && !statementsItem.Source.ID.IsNull() {
					*id2 = statementsItem.Source.ID.ValueString()
				} else {
					id2 = nil
				}
				origin := new(shared.ConditionStatementOrigin)
				if !statementsItem.Source.Origin.IsUnknown() && !statementsItem.Source.Origin.IsNull() {
					*origin = shared.ConditionStatementOrigin(statementsItem.Source.Origin.ValueString())
				} else {
					origin = nil
				}
				originType := new(shared.OriginType)
				if !statementsItem.Source.OriginType.IsUnknown() && !statementsItem.Source.OriginType.IsNull() {
					*originType = shared.OriginType(statementsItem.Source.OriginType.ValueString())
				} else {
					originType = nil
				}
				schema := new(string)
				if !statementsItem.Source.Schema.IsUnknown() && !statementsItem.Source.Schema.IsNull() {
					*schema = statementsItem.Source.Schema.ValueString()
				} else {
					schema = nil
				}
				source = &shared.Source{
					Attribute:           attribute,
					AttributeOperation:  attributeOperation,
					AttributeRepeatable: attributeRepeatable,
					AttributeType:       attributeType,
					ID:                  id2,
					Origin:              origin,
					OriginType:          originType,
					Schema:              schema,
				}
			}
			var values []string = []string{}
			for _, valuesItem := range statementsItem.Values {
				values = append(values, valuesItem.ValueString())
			}
			statements = append(statements, shared.ConditionStatement{
				ID:        id1,
				Operation: operation,
				Source:    source,
				Values:    values,
			})
		}
		conditions = append(conditions, shared.ActionCondition{
			EvaluationResult: evaluationResult,
			ID:               id,
			ScheduleID:       scheduleID,
			Statements:       statements,
		})
	}
	var disableDetails *shared.DisableDetails
	if r.DisableDetails != nil {
		disabledAt, _ := time.Parse(time.RFC3339Nano, r.DisableDetails.DisabledAt.ValueString())
		disabledBy := shared.DisabledBy(r.DisableDetails.DisabledBy.ValueString())
		disableDetails = &shared.DisableDetails{
			DisabledAt: disabledAt,
			DisabledBy: disabledBy,
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	entitySchema := new(string)
	if !r.EntitySchema.IsUnknown() && !r.EntitySchema.IsNull() {
		*entitySchema = r.EntitySchema.ValueString()
	} else {
		entitySchema = nil
	}
	var flowName string
	flowName = r.FlowName.ValueString()

	var schedules []shared.ActionSchedule = []shared.ActionSchedule{}
	for _, schedulesItem := range r.Schedules {
		var id3 string
		id3 = schedulesItem.ID.ValueString()

		numberOfUnits := new(float64)
		if !schedulesItem.NumberOfUnits.IsUnknown() && !schedulesItem.NumberOfUnits.IsNull() {
			*numberOfUnits, _ = schedulesItem.NumberOfUnits.ValueBigFloat().Float64()
		} else {
			numberOfUnits = nil
		}
		scheduleAPIID := new(string)
		if !schedulesItem.ScheduleAPIID.IsUnknown() && !schedulesItem.ScheduleAPIID.IsNull() {
			*scheduleAPIID = schedulesItem.ScheduleAPIID.ValueString()
		} else {
			scheduleAPIID = nil
		}
		var attribute1 string
		attribute1 = schedulesItem.Source.Attribute.ValueString()

		var id4 string
		id4 = schedulesItem.Source.ID.ValueString()

		origin1 := shared.Origin(schedulesItem.Source.Origin.ValueString())
		var schema1 string
		schema1 = schedulesItem.Source.Schema.ValueString()

		source1 := shared.ActionScheduleSource{
			Attribute: attribute1,
			ID:        id4,
			Origin:    origin1,
			Schema:    schema1,
		}
		timePeriod := new(shared.TimePeriod)
		if !schedulesItem.TimePeriod.IsUnknown() && !schedulesItem.TimePeriod.IsNull() {
			*timePeriod = shared.TimePeriod(schedulesItem.TimePeriod.ValueString())
		} else {
			timePeriod = nil
		}
		timeRelation := new(shared.TimeRelation)
		if !schedulesItem.TimeRelation.IsUnknown() && !schedulesItem.TimeRelation.IsNull() {
			*timeRelation = shared.TimeRelation(schedulesItem.TimeRelation.ValueString())
		} else {
			timeRelation = nil
		}
		schedules = append(schedules, shared.ActionSchedule{
			ID:            id3,
			NumberOfUnits: numberOfUnits,
			ScheduleAPIID: scheduleAPIID,
			Source:        source1,
			TimePeriod:    timePeriod,
			TimeRelation:  timeRelation,
		})
	}
	systemFlow := new(bool)
	if !r.SystemFlow.IsUnknown() && !r.SystemFlow.IsNull() {
		*systemFlow = r.SystemFlow.ValueBool()
	} else {
		systemFlow = nil
	}
	var triggerConditions []interface{} = []interface{}{}
	for _, triggerConditionsItem := range r.TriggerConditions {
		var triggerConditionsTmp interface{}
		_ = json.Unmarshal([]byte(triggerConditionsItem.ValueString()), &triggerConditionsTmp)
		triggerConditions = append(triggerConditions, triggerConditionsTmp)
	}
	var triggers []shared.AnyTrigger = []shared.AnyTrigger{}
	for _, triggersItem := range r.Triggers {
		if triggersItem.FrontendSubmitTrigger != nil {
			sourceID := new(string)
			if !triggersItem.FrontendSubmitTrigger.Configuration.SourceID.IsUnknown() && !triggersItem.FrontendSubmitTrigger.Configuration.SourceID.IsNull() {
				*sourceID = triggersItem.FrontendSubmitTrigger.Configuration.SourceID.ValueString()
			} else {
				sourceID = nil
			}
			configuration := shared.FrontendSubmitTriggerConfiguration{
				SourceID: sourceID,
			}
			id5 := new(string)
			if !triggersItem.FrontendSubmitTrigger.ID.IsUnknown() && !triggersItem.FrontendSubmitTrigger.ID.IsNull() {
				*id5 = triggersItem.FrontendSubmitTrigger.ID.ValueString()
			} else {
				id5 = nil
			}
			typeVar := shared.FrontendSubmitTriggerType(triggersItem.FrontendSubmitTrigger.Type.ValueString())
			frontendSubmitTrigger := shared.FrontendSubmitTrigger{
				Configuration: configuration,
				ID:            id5,
				Type:          typeVar,
			}
			triggers = append(triggers, shared.AnyTrigger{
				FrontendSubmitTrigger: &frontendSubmitTrigger,
			})
		}
		if triggersItem.JourneySubmitTrigger != nil {
			var sourceId1 string
			sourceId1 = triggersItem.JourneySubmitTrigger.Configuration.SourceID.ValueString()

			configuration1 := shared.JourneySubmitTriggerConfiguration{
				SourceID: sourceId1,
			}
			id6 := new(string)
			if !triggersItem.JourneySubmitTrigger.ID.IsUnknown() && !triggersItem.JourneySubmitTrigger.ID.IsNull() {
				*id6 = triggersItem.JourneySubmitTrigger.ID.ValueString()
			} else {
				id6 = nil
			}
			typeVar1 := shared.JourneySubmitTriggerType(triggersItem.JourneySubmitTrigger.Type.ValueString())
			journeySubmitTrigger := shared.JourneySubmitTrigger{
				Configuration: configuration1,
				ID:            id6,
				Type:          typeVar1,
			}
			triggers = append(triggers, shared.AnyTrigger{
				JourneySubmitTrigger: &journeySubmitTrigger,
			})
		}
		if triggersItem.APISubmissionTrigger != nil {
			sourceId2 := new(string)
			if !triggersItem.APISubmissionTrigger.Configuration.SourceID.IsUnknown() && !triggersItem.APISubmissionTrigger.Configuration.SourceID.IsNull() {
				*sourceId2 = triggersItem.APISubmissionTrigger.Configuration.SourceID.ValueString()
			} else {
				sourceId2 = nil
			}
			configuration2 := shared.Configuration{
				SourceID: sourceId2,
			}
			id7 := new(string)
			if !triggersItem.APISubmissionTrigger.ID.IsUnknown() && !triggersItem.APISubmissionTrigger.ID.IsNull() {
				*id7 = triggersItem.APISubmissionTrigger.ID.ValueString()
			} else {
				id7 = nil
			}
			typeVar2 := shared.Type(triggersItem.APISubmissionTrigger.Type.ValueString())
			apiSubmissionTrigger := shared.APISubmissionTrigger{
				Configuration: configuration2,
				ID:            id7,
				Type:          typeVar2,
			}
			triggers = append(triggers, shared.AnyTrigger{
				APISubmissionTrigger: &apiSubmissionTrigger,
			})
		}
		if triggersItem.EntityOperationTrigger != nil {
			var ecpConfig *shared.EcpConfig
			if triggersItem.EntityOperationTrigger.Configuration.EcpConfig != nil {
				var fileConfig *shared.FileConfig
				if triggersItem.EntityOperationTrigger.Configuration.EcpConfig.FileConfig != nil {
					sharedWithEndCustomer := new(bool)
					if !triggersItem.EntityOperationTrigger.Configuration.EcpConfig.FileConfig.SharedWithEndCustomer.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.EcpConfig.FileConfig.SharedWithEndCustomer.IsNull() {
						*sharedWithEndCustomer = triggersItem.EntityOperationTrigger.Configuration.EcpConfig.FileConfig.SharedWithEndCustomer.ValueBool()
					} else {
						sharedWithEndCustomer = nil
					}
					fileConfig = &shared.FileConfig{
						SharedWithEndCustomer: sharedWithEndCustomer,
					}
				}
				origin2 := new(string)
				if !triggersItem.EntityOperationTrigger.Configuration.EcpConfig.Origin.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.EcpConfig.Origin.IsNull() {
					*origin2 = triggersItem.EntityOperationTrigger.Configuration.EcpConfig.Origin.ValueString()
				} else {
					origin2 = nil
				}
				ecpConfig = &shared.EcpConfig{
					FileConfig: fileConfig,
					Origin:     origin2,
				}
			}
			var excludeActivities []string = []string{}
			for _, excludeActivitiesItem := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
				excludeActivities = append(excludeActivities, excludeActivitiesItem.ValueString())
			}
			var filterConfig *shared.FilterConfig
			if triggersItem.EntityOperationTrigger.Configuration.FilterConfig != nil {
				var activity *shared.Activity
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity != nil {
					var typeVar3 []shared.EntityOperationTriggerSchemasType = []shared.EntityOperationTriggerSchemasType{}
					for _, typeItem := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type {
						if !typeItem.Str.IsUnknown() && !typeItem.Str.IsNull() {
							var str string
							str = typeItem.Str.ValueString()

							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								Str: &str,
							})
						}
						if typeItem.EqualsIgnoreCaseCondition != nil {
							equalsIgnoreCase := new(string)
							if !typeItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase.IsUnknown() && !typeItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase.IsNull() {
								*equalsIgnoreCase = typeItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase.ValueString()
							} else {
								equalsIgnoreCase = nil
							}
							equalsIgnoreCaseCondition := shared.EqualsIgnoreCaseCondition{
								EqualsIgnoreCase: equalsIgnoreCase,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								EqualsIgnoreCaseCondition: &equalsIgnoreCaseCondition,
							})
						}
						if typeItem.AnythingButCondition != nil {
							var anythingBut []string = []string{}
							for _, anythingButItem := range typeItem.AnythingButCondition.AnythingBut {
								anythingBut = append(anythingBut, anythingButItem.ValueString())
							}
							anythingButCondition := shared.AnythingButCondition{
								AnythingBut: anythingBut,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								AnythingButCondition: &anythingButCondition,
							})
						}
						if typeItem.ExistsCondition != nil {
							exists := new(bool)
							if !typeItem.ExistsCondition.Exists.IsUnknown() && !typeItem.ExistsCondition.Exists.IsNull() {
								*exists = typeItem.ExistsCondition.Exists.ValueBool()
							} else {
								exists = nil
							}
							existsCondition := shared.ExistsCondition{
								Exists: exists,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								ExistsCondition: &existsCondition,
							})
						}
						if typeItem.PrefixCondition != nil {
							prefix := new(string)
							if !typeItem.PrefixCondition.Prefix.IsUnknown() && !typeItem.PrefixCondition.Prefix.IsNull() {
								*prefix = typeItem.PrefixCondition.Prefix.ValueString()
							} else {
								prefix = nil
							}
							prefixCondition := shared.PrefixCondition{
								Prefix: prefix,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								PrefixCondition: &prefixCondition,
							})
						}
						if typeItem.SuffixCondition != nil {
							suffix := new(string)
							if !typeItem.SuffixCondition.Suffix.IsUnknown() && !typeItem.SuffixCondition.Suffix.IsNull() {
								*suffix = typeItem.SuffixCondition.Suffix.ValueString()
							} else {
								suffix = nil
							}
							suffixCondition := shared.SuffixCondition{
								Suffix: suffix,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								SuffixCondition: &suffixCondition,
							})
						}
						if typeItem.WildcardCondition != nil {
							wildcard := new(string)
							if !typeItem.WildcardCondition.Wildcard.IsUnknown() && !typeItem.WildcardCondition.Wildcard.IsNull() {
								*wildcard = typeItem.WildcardCondition.Wildcard.ValueString()
							} else {
								wildcard = nil
							}
							wildcardCondition := shared.WildcardCondition{
								Wildcard: wildcard,
							}
							typeVar3 = append(typeVar3, shared.EntityOperationTriggerSchemasType{
								WildcardCondition: &wildcardCondition,
							})
						}
					}
					activity = &shared.Activity{
						Type: typeVar3,
					}
				}
				var operation1 *shared.EntityOperationTriggerOperation
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation != nil {
					var diff interface{}
					if !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.IsNull() {
						_ = json.Unmarshal([]byte(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff.ValueString()), &diff)
					}
					var operation2 []shared.EntityOperation = []shared.EntityOperation{}
					for _, operationItem := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation {
						operation2 = append(operation2, shared.EntityOperation(operationItem.ValueString()))
					}
					var payload interface{}
					if !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload.IsNull() {
						_ = json.Unmarshal([]byte(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload.ValueString()), &payload)
					}
					operation1 = &shared.EntityOperationTriggerOperation{
						Diff:      diff,
						Operation: operation2,
						Payload:   payload,
					}
				}
				filterConfig = &shared.FilterConfig{
					Activity:  activity,
					Operation: operation1,
				}
			}
			var includeActivities []string = []string{}
			for _, includeActivitiesItem := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
				includeActivities = append(includeActivities, includeActivitiesItem.ValueString())
			}
			var operationsVar []shared.EntityOperation = []shared.EntityOperation{}
			for _, operationsItem := range triggersItem.EntityOperationTrigger.Configuration.Operations {
				operationsVar = append(operationsVar, shared.EntityOperation(operationsItem.ValueString()))
			}
			schema2 := new(string)
			if !triggersItem.EntityOperationTrigger.Configuration.Schema.IsUnknown() && !triggersItem.EntityOperationTrigger.Configuration.Schema.IsNull() {
				*schema2 = triggersItem.EntityOperationTrigger.Configuration.Schema.ValueString()
			} else {
				schema2 = nil
			}
			configuration3 := shared.EntityOperationTriggerConfiguration{
				EcpConfig:         ecpConfig,
				ExcludeActivities: excludeActivities,
				FilterConfig:      filterConfig,
				IncludeActivities: includeActivities,
				Operations:        operationsVar,
				Schema:            schema2,
			}
			id8 := new(string)
			if !triggersItem.EntityOperationTrigger.ID.IsUnknown() && !triggersItem.EntityOperationTrigger.ID.IsNull() {
				*id8 = triggersItem.EntityOperationTrigger.ID.ValueString()
			} else {
				id8 = nil
			}
			typeVar4 := shared.EntityOperationTriggerType(triggersItem.EntityOperationTrigger.Type.ValueString())
			entityOperationTrigger := shared.EntityOperationTrigger{
				Configuration: configuration3,
				ID:            id8,
				Type:          typeVar4,
			}
			triggers = append(triggers, shared.AnyTrigger{
				EntityOperationTrigger: &entityOperationTrigger,
			})
		}
		if !triggersItem.Any.IsUnknown() && !triggersItem.Any.IsNull() {
			var anyVar interface{}
			_ = json.Unmarshal([]byte(triggersItem.Any.ValueString()), &anyVar)
			triggers = append(triggers, shared.AnyTrigger{
				Any: &anyVar,
			})
		}
		if triggersItem.EntityManualTrigger != nil {
			schema3 := new(string)
			if !triggersItem.EntityManualTrigger.Configuration.Schema.IsUnknown() && !triggersItem.EntityManualTrigger.Configuration.Schema.IsNull() {
				*schema3 = triggersItem.EntityManualTrigger.Configuration.Schema.ValueString()
			} else {
				schema3 = nil
			}
			configuration4 := shared.EntityManualTriggerConfiguration{
				Schema: schema3,
			}
			id9 := new(string)
			if !triggersItem.EntityManualTrigger.ID.IsUnknown() && !triggersItem.EntityManualTrigger.ID.IsNull() {
				*id9 = triggersItem.EntityManualTrigger.ID.ValueString()
			} else {
				id9 = nil
			}
			typeVar5 := shared.EntityManualTriggerType(triggersItem.EntityManualTrigger.Type.ValueString())
			entityManualTrigger := shared.EntityManualTrigger{
				Configuration: configuration4,
				ID:            id9,
				Type:          typeVar5,
			}
			triggers = append(triggers, shared.AnyTrigger{
				EntityManualTrigger: &entityManualTrigger,
			})
		}
		if triggersItem.ReceivedEmailTrigger != nil {
			messageType := new(shared.MessageType)
			if !triggersItem.ReceivedEmailTrigger.Configuration.MessageType.IsUnknown() && !triggersItem.ReceivedEmailTrigger.Configuration.MessageType.IsNull() {
				*messageType = shared.MessageType(triggersItem.ReceivedEmailTrigger.Configuration.MessageType.ValueString())
			} else {
				messageType = nil
			}
			configuration5 := shared.ReceivedEmailTriggerConfiguration{
				MessageType: messageType,
			}
			id10 := new(string)
			if !triggersItem.ReceivedEmailTrigger.ID.IsUnknown() && !triggersItem.ReceivedEmailTrigger.ID.IsNull() {
				*id10 = triggersItem.ReceivedEmailTrigger.ID.ValueString()
			} else {
				id10 = nil
			}
			typeVar6 := shared.ReceivedEmailTriggerType(triggersItem.ReceivedEmailTrigger.Type.ValueString())
			receivedEmailTrigger := shared.ReceivedEmailTrigger{
				Configuration: configuration5,
				ID:            id10,
				Type:          typeVar6,
			}
			triggers = append(triggers, shared.AnyTrigger{
				ReceivedEmailTrigger: &receivedEmailTrigger,
			})
		}
	}
	version := new(float64)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version, _ = r.Version.ValueBigFloat().Float64()
	} else {
		version = nil
	}
	out := shared.AutomationFlowInput{
		Manifest:          manifest,
		Actions:           actions,
		Conditions:        conditions,
		DisableDetails:    disableDetails,
		Enabled:           enabled,
		EntitySchema:      entitySchema,
		FlowName:          flowName,
		Schedules:         schedules,
		SystemFlow:        systemFlow,
		TriggerConditions: triggerConditions,
		Triggers:          triggers,
		Version:           version,
	}
	return &out
}

func (r *FlowResourceModel) RefreshFromSharedAutomationFlow(resp *shared.AutomationFlow) {
	if resp != nil {
		r.Manifest = []types.String{}
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Actions = nil
		for _, actionsItem := range resp.Actions {
			var actions1 types.String
			actions1Result, _ := json.Marshal(actionsItem)
			actions1 = types.StringValue(string(actions1Result))
			r.Actions = append(r.Actions, actions1)
		}
		r.Conditions = []tfTypes.ActionCondition{}
		if len(r.Conditions) > len(resp.Conditions) {
			r.Conditions = r.Conditions[:len(resp.Conditions)]
		}
		for conditionsCount, conditionsItem := range resp.Conditions {
			var conditions1 tfTypes.ActionCondition
			conditions1.EvaluationResult = types.BoolPointerValue(conditionsItem.EvaluationResult)
			conditions1.ID = types.StringPointerValue(conditionsItem.ID)
			conditions1.ScheduleID = types.StringPointerValue(conditionsItem.ScheduleID)
			conditions1.Statements = []tfTypes.ConditionStatement{}
			for statementsCount, statementsItem := range conditionsItem.Statements {
				var statements1 tfTypes.ConditionStatement
				statements1.ID = types.StringPointerValue(statementsItem.ID)
				if statementsItem.Operation != nil {
					statements1.Operation = types.StringValue(string(*statementsItem.Operation))
				} else {
					statements1.Operation = types.StringNull()
				}
				if statementsItem.Source == nil {
					statements1.Source = nil
				} else {
					statements1.Source = &tfTypes.Source{}
					statements1.Source.Attribute = types.StringPointerValue(statementsItem.Source.Attribute)
					if statementsItem.Source.AttributeOperation != nil {
						statements1.Source.AttributeOperation = types.StringValue(string(*statementsItem.Source.AttributeOperation))
					} else {
						statements1.Source.AttributeOperation = types.StringNull()
					}
					statements1.Source.AttributeRepeatable = types.BoolPointerValue(statementsItem.Source.AttributeRepeatable)
					if statementsItem.Source.AttributeType != nil {
						statements1.Source.AttributeType = types.StringValue(string(*statementsItem.Source.AttributeType))
					} else {
						statements1.Source.AttributeType = types.StringNull()
					}
					statements1.Source.ID = types.StringPointerValue(statementsItem.Source.ID)
					if statementsItem.Source.Origin != nil {
						statements1.Source.Origin = types.StringValue(string(*statementsItem.Source.Origin))
					} else {
						statements1.Source.Origin = types.StringNull()
					}
					if statementsItem.Source.OriginType != nil {
						statements1.Source.OriginType = types.StringValue(string(*statementsItem.Source.OriginType))
					} else {
						statements1.Source.OriginType = types.StringNull()
					}
					statements1.Source.Schema = types.StringPointerValue(statementsItem.Source.Schema)
				}
				statements1.Values = []types.String{}
				for _, v := range statementsItem.Values {
					statements1.Values = append(statements1.Values, types.StringValue(v))
				}
				if statementsCount+1 > len(conditions1.Statements) {
					conditions1.Statements = append(conditions1.Statements, statements1)
				} else {
					conditions1.Statements[statementsCount].ID = statements1.ID
					conditions1.Statements[statementsCount].Operation = statements1.Operation
					conditions1.Statements[statementsCount].Source = statements1.Source
					conditions1.Statements[statementsCount].Values = statements1.Values
				}
			}
			if conditionsCount+1 > len(r.Conditions) {
				r.Conditions = append(r.Conditions, conditions1)
			} else {
				r.Conditions[conditionsCount].EvaluationResult = conditions1.EvaluationResult
				r.Conditions[conditionsCount].ID = conditions1.ID
				r.Conditions[conditionsCount].ScheduleID = conditions1.ScheduleID
				r.Conditions[conditionsCount].Statements = conditions1.Statements
			}
		}
		if resp.DisableDetails == nil {
			r.DisableDetails = nil
		} else {
			r.DisableDetails = &tfTypes.DisableDetails{}
			r.DisableDetails.DisabledAt = types.StringValue(resp.DisableDetails.DisabledAt.Format(time.RFC3339Nano))
			r.DisableDetails.DisabledBy = types.StringValue(string(resp.DisableDetails.DisabledBy))
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EntitySchema = types.StringPointerValue(resp.EntitySchema)
		r.FlowName = types.StringValue(resp.FlowName)
		r.ID = types.StringPointerValue(resp.ID)
		r.Schedules = []tfTypes.ActionSchedule{}
		if len(r.Schedules) > len(resp.Schedules) {
			r.Schedules = r.Schedules[:len(resp.Schedules)]
		}
		for schedulesCount, schedulesItem := range resp.Schedules {
			var schedules1 tfTypes.ActionSchedule
			schedules1.ID = types.StringValue(schedulesItem.ID)
			if schedulesItem.NumberOfUnits != nil {
				schedules1.NumberOfUnits = types.NumberValue(big.NewFloat(float64(*schedulesItem.NumberOfUnits)))
			} else {
				schedules1.NumberOfUnits = types.NumberNull()
			}
			schedules1.ScheduleAPIID = types.StringPointerValue(schedulesItem.ScheduleAPIID)
			schedules1.Source.Attribute = types.StringValue(schedulesItem.Source.Attribute)
			schedules1.Source.ID = types.StringValue(schedulesItem.Source.ID)
			schedules1.Source.Origin = types.StringValue(string(schedulesItem.Source.Origin))
			schedules1.Source.Schema = types.StringValue(schedulesItem.Source.Schema)
			if schedulesItem.TimePeriod != nil {
				schedules1.TimePeriod = types.StringValue(string(*schedulesItem.TimePeriod))
			} else {
				schedules1.TimePeriod = types.StringNull()
			}
			if schedulesItem.TimeRelation != nil {
				schedules1.TimeRelation = types.StringValue(string(*schedulesItem.TimeRelation))
			} else {
				schedules1.TimeRelation = types.StringNull()
			}
			if schedulesCount+1 > len(r.Schedules) {
				r.Schedules = append(r.Schedules, schedules1)
			} else {
				r.Schedules[schedulesCount].ID = schedules1.ID
				r.Schedules[schedulesCount].NumberOfUnits = schedules1.NumberOfUnits
				r.Schedules[schedulesCount].ScheduleAPIID = schedules1.ScheduleAPIID
				r.Schedules[schedulesCount].Source = schedules1.Source
				r.Schedules[schedulesCount].TimePeriod = schedules1.TimePeriod
				r.Schedules[schedulesCount].TimeRelation = schedules1.TimeRelation
			}
		}
		r.SystemFlow = types.BoolPointerValue(resp.SystemFlow)
		r.TriggerConditions = nil
		for _, triggerConditionsItem := range resp.TriggerConditions {
			var triggerConditions1 types.String
			triggerConditions1Result, _ := json.Marshal(triggerConditionsItem)
			triggerConditions1 = types.StringValue(string(triggerConditions1Result))
			r.TriggerConditions = append(r.TriggerConditions, triggerConditions1)
		}
		r.Triggers = []tfTypes.AnyTrigger{}
		if len(r.Triggers) > len(resp.Triggers) {
			r.Triggers = r.Triggers[:len(resp.Triggers)]
		}
		for triggersCount, triggersItem := range resp.Triggers {
			var triggers1 tfTypes.AnyTrigger
			if triggersItem.Any != nil {
				anyResult, _ := json.Marshal(triggersItem.Any)
				triggers1.Any = types.StringValue(string(anyResult))
			}
			if triggersItem.APISubmissionTrigger != nil {
				triggers1.APISubmissionTrigger = &tfTypes.APISubmissionTrigger{}
				triggers1.APISubmissionTrigger.Configuration.SourceID = types.StringPointerValue(triggersItem.APISubmissionTrigger.Configuration.SourceID)
				triggers1.APISubmissionTrigger.ID = types.StringPointerValue(triggersItem.APISubmissionTrigger.ID)
				triggers1.APISubmissionTrigger.Type = types.StringValue(string(triggersItem.APISubmissionTrigger.Type))
			}
			if triggersItem.EntityManualTrigger != nil {
				triggers1.EntityManualTrigger = &tfTypes.EntityManualTrigger{}
				triggers1.EntityManualTrigger.Configuration.Schema = types.StringPointerValue(triggersItem.EntityManualTrigger.Configuration.Schema)
				triggers1.EntityManualTrigger.ID = types.StringPointerValue(triggersItem.EntityManualTrigger.ID)
				triggers1.EntityManualTrigger.Type = types.StringValue(string(triggersItem.EntityManualTrigger.Type))
			}
			if triggersItem.EntityOperationTrigger != nil {
				triggers1.EntityOperationTrigger = &tfTypes.EntityOperationTrigger{}
				if triggersItem.EntityOperationTrigger.Configuration.EcpConfig == nil {
					triggers1.EntityOperationTrigger.Configuration.EcpConfig = nil
				} else {
					triggers1.EntityOperationTrigger.Configuration.EcpConfig = &tfTypes.EcpConfig{}
					if triggersItem.EntityOperationTrigger.Configuration.EcpConfig.FileConfig == nil {
						triggers1.EntityOperationTrigger.Configuration.EcpConfig.FileConfig = nil
					} else {
						triggers1.EntityOperationTrigger.Configuration.EcpConfig.FileConfig = &tfTypes.FileConfig{}
						triggers1.EntityOperationTrigger.Configuration.EcpConfig.FileConfig.SharedWithEndCustomer = types.BoolPointerValue(triggersItem.EntityOperationTrigger.Configuration.EcpConfig.FileConfig.SharedWithEndCustomer)
					}
					triggers1.EntityOperationTrigger.Configuration.EcpConfig.Origin = types.StringPointerValue(triggersItem.EntityOperationTrigger.Configuration.EcpConfig.Origin)
				}
				triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = []types.String{}
				for _, v := range triggersItem.EntityOperationTrigger.Configuration.ExcludeActivities {
					triggers1.EntityOperationTrigger.Configuration.ExcludeActivities = append(triggers1.EntityOperationTrigger.Configuration.ExcludeActivities, types.StringValue(v))
				}
				if triggersItem.EntityOperationTrigger.Configuration.FilterConfig == nil {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig = nil
				} else {
					triggers1.EntityOperationTrigger.Configuration.FilterConfig = &tfTypes.FilterConfig{}
					if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity == nil {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity = nil
					} else {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity = &tfTypes.Activity{}
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type = []tfTypes.EntityOperationTriggerSchemasType{}
						for typeVarCount, typeVarItem := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type {
							var typeVar1 tfTypes.EntityOperationTriggerSchemasType
							if typeVarItem.Str != nil {
								typeVar1.Str = types.StringPointerValue(typeVarItem.Str)
							}
							if typeVarItem.AnythingButCondition != nil {
								typeVar1.AnythingButCondition = &tfTypes.AnythingButCondition{}
								typeVar1.AnythingButCondition.AnythingBut = []types.String{}
								for _, v := range typeVarItem.AnythingButCondition.AnythingBut {
									typeVar1.AnythingButCondition.AnythingBut = append(typeVar1.AnythingButCondition.AnythingBut, types.StringValue(v))
								}
							}
							if typeVarItem.EqualsIgnoreCaseCondition != nil {
								typeVar1.EqualsIgnoreCaseCondition = &tfTypes.EqualsIgnoreCaseCondition{}
								typeVar1.EqualsIgnoreCaseCondition.EqualsIgnoreCase = types.StringPointerValue(typeVarItem.EqualsIgnoreCaseCondition.EqualsIgnoreCase)
							}
							if typeVarItem.ExistsCondition != nil {
								typeVar1.ExistsCondition = &tfTypes.ExistsCondition{}
								typeVar1.ExistsCondition.Exists = types.BoolPointerValue(typeVarItem.ExistsCondition.Exists)
							}
							if typeVarItem.PrefixCondition != nil {
								typeVar1.PrefixCondition = &tfTypes.PrefixCondition{}
								typeVar1.PrefixCondition.Prefix = types.StringPointerValue(typeVarItem.PrefixCondition.Prefix)
							}
							if typeVarItem.SuffixCondition != nil {
								typeVar1.SuffixCondition = &tfTypes.SuffixCondition{}
								typeVar1.SuffixCondition.Suffix = types.StringPointerValue(typeVarItem.SuffixCondition.Suffix)
							}
							if typeVarItem.WildcardCondition != nil {
								typeVar1.WildcardCondition = &tfTypes.WildcardCondition{}
								typeVar1.WildcardCondition.Wildcard = types.StringPointerValue(typeVarItem.WildcardCondition.Wildcard)
							}
							if typeVarCount+1 > len(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type) {
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type = append(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type, typeVar1)
							} else {
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type[typeVarCount].Str = typeVar1.Str
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type[typeVarCount].AnythingButCondition = typeVar1.AnythingButCondition
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type[typeVarCount].EqualsIgnoreCaseCondition = typeVar1.EqualsIgnoreCaseCondition
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type[typeVarCount].ExistsCondition = typeVar1.ExistsCondition
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type[typeVarCount].PrefixCondition = typeVar1.PrefixCondition
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type[typeVarCount].SuffixCondition = typeVar1.SuffixCondition
								triggers1.EntityOperationTrigger.Configuration.FilterConfig.Activity.Type[typeVarCount].WildcardCondition = typeVar1.WildcardCondition
							}
						}
					}
					if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation == nil {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation = nil
					} else {
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation = &tfTypes.EntityOperationTriggerOperation{}
						if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff == nil {
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff = types.StringNull()
						} else {
							diffResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff)
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Diff = types.StringValue(string(diffResult))
						}
						triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation = []types.String{}
						for _, v := range triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation {
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation = append(triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Operation, types.StringValue(string(v)))
						}
						if triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload == nil {
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload = types.StringNull()
						} else {
							payloadResult, _ := json.Marshal(triggersItem.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload)
							triggers1.EntityOperationTrigger.Configuration.FilterConfig.Operation.Payload = types.StringValue(string(payloadResult))
						}
					}
				}
				triggers1.EntityOperationTrigger.Configuration.IncludeActivities = []types.String{}
				for _, v := range triggersItem.EntityOperationTrigger.Configuration.IncludeActivities {
					triggers1.EntityOperationTrigger.Configuration.IncludeActivities = append(triggers1.EntityOperationTrigger.Configuration.IncludeActivities, types.StringValue(v))
				}
				triggers1.EntityOperationTrigger.Configuration.Operations = []types.String{}
				for _, v := range triggersItem.EntityOperationTrigger.Configuration.Operations {
					triggers1.EntityOperationTrigger.Configuration.Operations = append(triggers1.EntityOperationTrigger.Configuration.Operations, types.StringValue(string(v)))
				}
				triggers1.EntityOperationTrigger.Configuration.Schema = types.StringPointerValue(triggersItem.EntityOperationTrigger.Configuration.Schema)
				triggers1.EntityOperationTrigger.ID = types.StringPointerValue(triggersItem.EntityOperationTrigger.ID)
				triggers1.EntityOperationTrigger.Type = types.StringValue(string(triggersItem.EntityOperationTrigger.Type))
			}
			if triggersItem.FrontendSubmitTrigger != nil {
				triggers1.FrontendSubmitTrigger = &tfTypes.FrontendSubmitTrigger{}
				triggers1.FrontendSubmitTrigger.Configuration.SourceID = types.StringPointerValue(triggersItem.FrontendSubmitTrigger.Configuration.SourceID)
				triggers1.FrontendSubmitTrigger.ID = types.StringPointerValue(triggersItem.FrontendSubmitTrigger.ID)
				triggers1.FrontendSubmitTrigger.Type = types.StringValue(string(triggersItem.FrontendSubmitTrigger.Type))
			}
			if triggersItem.JourneySubmitTrigger != nil {
				triggers1.JourneySubmitTrigger = &tfTypes.JourneySubmitTrigger{}
				triggers1.JourneySubmitTrigger.Configuration.SourceID = types.StringValue(triggersItem.JourneySubmitTrigger.Configuration.SourceID)
				triggers1.JourneySubmitTrigger.ID = types.StringPointerValue(triggersItem.JourneySubmitTrigger.ID)
				triggers1.JourneySubmitTrigger.Type = types.StringValue(string(triggersItem.JourneySubmitTrigger.Type))
			}
			if triggersItem.ReceivedEmailTrigger != nil {
				triggers1.ReceivedEmailTrigger = &tfTypes.ReceivedEmailTrigger{}
				if triggersItem.ReceivedEmailTrigger.Configuration.MessageType != nil {
					triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringValue(string(*triggersItem.ReceivedEmailTrigger.Configuration.MessageType))
				} else {
					triggers1.ReceivedEmailTrigger.Configuration.MessageType = types.StringNull()
				}
				triggers1.ReceivedEmailTrigger.ID = types.StringPointerValue(triggersItem.ReceivedEmailTrigger.ID)
				triggers1.ReceivedEmailTrigger.Type = types.StringValue(string(triggersItem.ReceivedEmailTrigger.Type))
			}
			if triggersCount+1 > len(r.Triggers) {
				r.Triggers = append(r.Triggers, triggers1)
			} else {
				r.Triggers[triggersCount].Any = triggers1.Any
				r.Triggers[triggersCount].APISubmissionTrigger = triggers1.APISubmissionTrigger
				r.Triggers[triggersCount].EntityManualTrigger = triggers1.EntityManualTrigger
				r.Triggers[triggersCount].EntityOperationTrigger = triggers1.EntityOperationTrigger
				r.Triggers[triggersCount].FrontendSubmitTrigger = triggers1.FrontendSubmitTrigger
				r.Triggers[triggersCount].JourneySubmitTrigger = triggers1.JourneySubmitTrigger
				r.Triggers[triggersCount].ReceivedEmailTrigger = triggers1.ReceivedEmailTrigger
			}
		}
		if resp.Version != nil {
			r.Version = types.NumberValue(big.NewFloat(float64(*resp.Version)))
		} else {
			r.Version = types.NumberNull()
		}
	}
}
