// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-automation/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *FlowResourceModel) ToSharedAutomationFlowInput() *shared.AutomationFlowInput {
	var actions []interface{} = []interface{}{}
	for _, actionsItem := range r.Actions {
		var actionsTmp interface{}
		_ = json.Unmarshal([]byte(actionsItem.ValueString()), &actionsTmp)
		actions = append(actions, actionsTmp)
	}
	var conditions []shared.ActionCondition = []shared.ActionCondition{}
	for _, conditionsItem := range r.Conditions {
		var conditions1 []shared.Condition = []shared.Condition{}
		for _, conditionsItem1 := range conditionsItem.Conditions {
			id := new(string)
			if !conditionsItem1.ID.IsUnknown() && !conditionsItem1.ID.IsNull() {
				*id = conditionsItem1.ID.ValueString()
			} else {
				id = nil
			}
			operation := new(shared.Operation)
			if !conditionsItem1.Operation.IsUnknown() && !conditionsItem1.Operation.IsNull() {
				*operation = shared.Operation(conditionsItem1.Operation.ValueString())
			} else {
				operation = nil
			}
			var source *shared.Source
			if conditionsItem1.Source != nil {
				attribute := new(string)
				if !conditionsItem1.Source.Attribute.IsUnknown() && !conditionsItem1.Source.Attribute.IsNull() {
					*attribute = conditionsItem1.Source.Attribute.ValueString()
				} else {
					attribute = nil
				}
				attributeType := new(shared.AttributeType)
				if !conditionsItem1.Source.AttributeType.IsUnknown() && !conditionsItem1.Source.AttributeType.IsNull() {
					*attributeType = shared.AttributeType(conditionsItem1.Source.AttributeType.ValueString())
				} else {
					attributeType = nil
				}
				id1 := new(string)
				if !conditionsItem1.Source.ID.IsUnknown() && !conditionsItem1.Source.ID.IsNull() {
					*id1 = conditionsItem1.Source.ID.ValueString()
				} else {
					id1 = nil
				}
				origin := new(shared.Origin)
				if !conditionsItem1.Source.Origin.IsUnknown() && !conditionsItem1.Source.Origin.IsNull() {
					*origin = shared.Origin(conditionsItem1.Source.Origin.ValueString())
				} else {
					origin = nil
				}
				originType := new(shared.OriginType)
				if !conditionsItem1.Source.OriginType.IsUnknown() && !conditionsItem1.Source.OriginType.IsNull() {
					*originType = shared.OriginType(conditionsItem1.Source.OriginType.ValueString())
				} else {
					originType = nil
				}
				schema := new(string)
				if !conditionsItem1.Source.Schema.IsUnknown() && !conditionsItem1.Source.Schema.IsNull() {
					*schema = conditionsItem1.Source.Schema.ValueString()
				} else {
					schema = nil
				}
				source = &shared.Source{
					Attribute:     attribute,
					AttributeType: attributeType,
					ID:            id1,
					Origin:        origin,
					OriginType:    originType,
					Schema:        schema,
				}
			}
			var values []string = []string{}
			for _, valuesItem := range conditionsItem1.Values {
				values = append(values, valuesItem.ValueString())
			}
			conditions1 = append(conditions1, shared.Condition{
				ID:        id,
				Operation: operation,
				Source:    source,
				Values:    values,
			})
		}
		evaluationResult := new(bool)
		if !conditionsItem.EvaluationResult.IsUnknown() && !conditionsItem.EvaluationResult.IsNull() {
			*evaluationResult = conditionsItem.EvaluationResult.ValueBool()
		} else {
			evaluationResult = nil
		}
		id2 := new(string)
		if !conditionsItem.ID.IsUnknown() && !conditionsItem.ID.IsNull() {
			*id2 = conditionsItem.ID.ValueString()
		} else {
			id2 = nil
		}
		conditions = append(conditions, shared.ActionCondition{
			Conditions:       conditions1,
			EvaluationResult: evaluationResult,
			ID:               id2,
		})
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	entitySchema := new(string)
	if !r.EntitySchema.IsUnknown() && !r.EntitySchema.IsNull() {
		*entitySchema = r.EntitySchema.ValueString()
	} else {
		entitySchema = nil
	}
	flowName := r.FlowName.ValueString()
	systemFlow := new(bool)
	if !r.SystemFlow.IsUnknown() && !r.SystemFlow.IsNull() {
		*systemFlow = r.SystemFlow.ValueBool()
	} else {
		systemFlow = nil
	}
	var triggerConditions []interface{} = []interface{}{}
	for _, triggerConditionsItem := range r.TriggerConditions {
		var triggerConditionsTmp interface{}
		_ = json.Unmarshal([]byte(triggerConditionsItem.ValueString()), &triggerConditionsTmp)
		triggerConditions = append(triggerConditions, triggerConditionsTmp)
	}
	var triggers []interface{} = []interface{}{}
	for _, triggersItem := range r.Triggers {
		var triggersTmp interface{}
		_ = json.Unmarshal([]byte(triggersItem.ValueString()), &triggersTmp)
		triggers = append(triggers, triggersTmp)
	}
	version := new(float64)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version, _ = r.Version.ValueBigFloat().Float64()
	} else {
		version = nil
	}
	out := shared.AutomationFlowInput{
		Actions:           actions,
		Conditions:        conditions,
		Enabled:           enabled,
		EntitySchema:      entitySchema,
		FlowName:          flowName,
		SystemFlow:        systemFlow,
		TriggerConditions: triggerConditions,
		Triggers:          triggers,
		Version:           version,
	}
	return &out
}

func (r *FlowResourceModel) RefreshFromSharedAutomationFlow(resp *shared.AutomationFlow) {
	if resp != nil {
		r.Actions = nil
		for _, actionsItem := range resp.Actions {
			var actions1 types.String
			actions1Result, _ := json.Marshal(actionsItem)
			actions1 = types.StringValue(string(actions1Result))
			r.Actions = append(r.Actions, actions1)
		}
		r.Conditions = []tfTypes.ActionCondition{}
		if len(r.Conditions) > len(resp.Conditions) {
			r.Conditions = r.Conditions[:len(resp.Conditions)]
		}
		for conditionsCount, conditionsItem := range resp.Conditions {
			var conditions1 tfTypes.ActionCondition
			conditions1.Conditions = []tfTypes.Condition{}
			for conditionsCount1, conditionsItem1 := range conditionsItem.Conditions {
				var conditions3 tfTypes.Condition
				conditions3.ID = types.StringPointerValue(conditionsItem1.ID)
				if conditionsItem1.Operation != nil {
					conditions3.Operation = types.StringValue(string(*conditionsItem1.Operation))
				} else {
					conditions3.Operation = types.StringNull()
				}
				if conditionsItem1.Source == nil {
					conditions3.Source = nil
				} else {
					conditions3.Source = &tfTypes.Source{}
					conditions3.Source.Attribute = types.StringPointerValue(conditionsItem1.Source.Attribute)
					if conditionsItem1.Source.AttributeType != nil {
						conditions3.Source.AttributeType = types.StringValue(string(*conditionsItem1.Source.AttributeType))
					} else {
						conditions3.Source.AttributeType = types.StringNull()
					}
					conditions3.Source.ID = types.StringPointerValue(conditionsItem1.Source.ID)
					if conditionsItem1.Source.Origin != nil {
						conditions3.Source.Origin = types.StringValue(string(*conditionsItem1.Source.Origin))
					} else {
						conditions3.Source.Origin = types.StringNull()
					}
					if conditionsItem1.Source.OriginType != nil {
						conditions3.Source.OriginType = types.StringValue(string(*conditionsItem1.Source.OriginType))
					} else {
						conditions3.Source.OriginType = types.StringNull()
					}
					conditions3.Source.Schema = types.StringPointerValue(conditionsItem1.Source.Schema)
				}
				conditions3.Values = []types.String{}
				for _, v := range conditionsItem1.Values {
					conditions3.Values = append(conditions3.Values, types.StringValue(v))
				}
				if conditionsCount1+1 > len(conditions1.Conditions) {
					conditions1.Conditions = append(conditions1.Conditions, conditions3)
				} else {
					conditions1.Conditions[conditionsCount1].ID = conditions3.ID
					conditions1.Conditions[conditionsCount1].Operation = conditions3.Operation
					conditions1.Conditions[conditionsCount1].Source = conditions3.Source
					conditions1.Conditions[conditionsCount1].Values = conditions3.Values
				}
			}
			conditions1.EvaluationResult = types.BoolPointerValue(conditionsItem.EvaluationResult)
			conditions1.ID = types.StringPointerValue(conditionsItem.ID)
			if conditionsCount+1 > len(r.Conditions) {
				r.Conditions = append(r.Conditions, conditions1)
			} else {
				r.Conditions[conditionsCount].Conditions = conditions1.Conditions
				r.Conditions[conditionsCount].EvaluationResult = conditions1.EvaluationResult
				r.Conditions[conditionsCount].ID = conditions1.ID
			}
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EntitySchema = types.StringPointerValue(resp.EntitySchema)
		r.FlowName = types.StringValue(resp.FlowName)
		r.ID = types.StringPointerValue(resp.ID)
		r.SystemFlow = types.BoolPointerValue(resp.SystemFlow)
		r.TriggerConditions = nil
		for _, triggerConditionsItem := range resp.TriggerConditions {
			var triggerConditions1 types.String
			triggerConditions1Result, _ := json.Marshal(triggerConditionsItem)
			triggerConditions1 = types.StringValue(string(triggerConditions1Result))
			r.TriggerConditions = append(r.TriggerConditions, triggerConditions1)
		}
		r.Triggers = nil
		for _, triggersItem := range resp.Triggers {
			var triggers1 types.String
			triggers1Result, _ := json.Marshal(triggersItem)
			triggers1 = types.StringValue(string(triggers1Result))
			r.Triggers = append(r.Triggers, triggers1)
		}
		if resp.Version != nil {
			r.Version = types.NumberValue(big.NewFloat(float64(*resp.Version)))
		} else {
			r.Version = types.NumberNull()
		}
	}
}
