// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-automation/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &FlowResource{}
var _ resource.ResourceWithImportState = &FlowResource{}

func NewFlowResource() resource.Resource {
	return &FlowResource{}
}

// FlowResource defines the resource implementation.
type FlowResource struct {
	client *sdk.SDK
}

// FlowResourceModel describes the resource data model.
type FlowResourceModel struct {
	Actions           []types.String            `tfsdk:"actions"`
	Conditions        []tfTypes.ActionCondition `tfsdk:"conditions"`
	Enabled           types.Bool                `tfsdk:"enabled"`
	EntitySchema      types.String              `tfsdk:"entity_schema"`
	FlowName          types.String              `tfsdk:"flow_name"`
	ID                types.String              `tfsdk:"id"`
	SystemFlow        types.Bool                `tfsdk:"system_flow"`
	TriggerConditions []types.String            `tfsdk:"trigger_conditions"`
	Triggers          []types.String            `tfsdk:"triggers"`
	Version           types.Number              `tfsdk:"version"`
}

func (r *FlowResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_flow"
}

func (r *FlowResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Flow Resource",
		Attributes: map[string]schema.Attribute{
			"actions": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
				Description: `The actions (nodes) of the automation flow`,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"conditions": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"conditions": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"operation": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be one of ["equals", "not_equals", "any_of", "none_of", "contains", "not_contains", "starts_with", "ends_with", "greater_than", "less_than", "greater_than_or_equals", "less_than_or_equals", "is_empty", "is_not_empty"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"equals",
												"not_equals",
												"any_of",
												"none_of",
												"contains",
												"not_contains",
												"starts_with",
												"ends_with",
												"greater_than",
												"less_than",
												"greater_than_or_equals",
												"less_than_or_equals",
												"is_empty",
												"is_not_empty",
											),
										},
									},
									"source": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"attribute": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"attribute_type": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `must be one of ["string", "text", "number", "boolean", "date", "datetime", "tag", "country", "email", "phone", "product", "price", "status", "relation", "multiselect", "select", "radio", "relation_user"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"string",
														"text",
														"number",
														"boolean",
														"date",
														"datetime",
														"tag",
														"country",
														"email",
														"phone",
														"product",
														"price",
														"status",
														"relation",
														"multiselect",
														"select",
														"radio",
														"relation_user",
													),
												},
											},
											"id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"origin": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `must be one of ["trigger", "action"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"trigger",
														"action",
													),
												},
											},
											"origin_type": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `must be one of ["entity", "workflow", "journey_block"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"entity",
														"workflow",
														"journey_block",
													),
												},
											},
											"schema": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
									"values": schema.ListAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
									},
								},
							},
						},
						"evaluation_result": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Result of the condition evaluation`,
						},
						"id": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Whether the automation is enabled or not. Default: true`,
			},
			"entity_schema": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The triggering entity schema`,
			},
			"flow_name": schema.StringAttribute{
				Required:    true,
				Description: `A descriptive name for the Automation`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Automation Workflow ID`,
			},
			"system_flow": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Determines if the flow is a system generated flow`,
			},
			"trigger_conditions": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"triggers": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"version": schema.NumberAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Version of the flow`,
			},
		},
	}
}

func (r *FlowResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FlowResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *FlowResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToSharedAutomationFlowInput()
	res, err := r.client.Flows.CreateFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AutomationFlow != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAutomationFlow(res.AutomationFlow)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *FlowResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	flowID := data.ID.ValueString()
	request := operations.GetFlowRequest{
		FlowID: flowID,
	}
	res, err := r.client.Flows.GetFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AutomationFlow != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAutomationFlow(res.AutomationFlow)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *FlowResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	automationFlow := data.ToSharedAutomationFlowInput()
	flowID := data.ID.ValueString()
	request := operations.PutFlowRequest{
		AutomationFlow: automationFlow,
		FlowID:         flowID,
	}
	res, err := r.client.Flows.PutFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AutomationFlow != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAutomationFlow(res.AutomationFlow)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *FlowResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	flowID := data.ID.ValueString()
	request := operations.DeleteFlowRequest{
		FlowID: flowID,
	}
	res, err := r.client.Flows.DeleteFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *FlowResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
