// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"epilot-automation/internal/sdk"
	"epilot-automation/internal/sdk/pkg/models/operations"
	"fmt"

	"epilot-automation/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &FlowResource{}
var _ resource.ResourceWithImportState = &FlowResource{}

func NewFlowResource() resource.Resource {
	return &FlowResource{}
}

// FlowResource defines the resource implementation.
type FlowResource struct {
	client *sdk.SDK
}

// FlowResourceModel describes the resource data model.
type FlowResourceModel struct {
	Actions           []AnyActionConfig  `tfsdk:"actions"`
	CreatedAt         types.String       `tfsdk:"created_at"`
	CreatedBy         types.String       `tfsdk:"created_by"`
	Enabled           types.Bool         `tfsdk:"enabled"`
	EntitySchema      types.String       `tfsdk:"entity_schema"`
	FlowName          types.String       `tfsdk:"flow_name"`
	ID                types.String       `tfsdk:"id"`
	LastUpdatedBy     types.String       `tfsdk:"last_updated_by"`
	OrgID             types.String       `tfsdk:"org_id"`
	Runs              types.Number       `tfsdk:"runs"`
	TriggerConditions []TriggerCondition `tfsdk:"trigger_conditions"`
	Triggers          []AnyTrigger       `tfsdk:"triggers"`
	UpdatedAt         types.String       `tfsdk:"updated_at"`
}

func (r *FlowResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_flow"
}

func (r *FlowResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Flow Resource",

		Attributes: map[string]schema.Attribute{
			"actions": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"map_entity_action_config": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"allow_failure": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"linkback_relation_attribute": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"linkback_relation_tags": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"mapping_attributes": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"mapping_attribute_v2": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"operation": schema.SingleNestedAttribute{
																Required: true,
																Attributes: map[string]schema.Attribute{
																	"operation_object_node": schema.SingleNestedAttribute{
																		Computed: true,
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"append": schema.ListAttribute{
																				Computed:    true,
																				Optional:    true,
																				ElementType: types.StringType,
																				Validators: []validator.List{
																					listvalidator.ValueStringsAre(validators.IsValidJSON()),
																				},
																			},
																			"copy": schema.StringAttribute{
																				Computed: true,
																				Optional: true,
																			},
																			"set": schema.StringAttribute{
																				Computed: true,
																				Optional: true,
																				Validators: []validator.String{
																					validators.IsValidJSON(),
																				},
																				Description: `Parsed as JSON.`,
																			},
																			"uniq": schema.SingleNestedAttribute{
																				Computed: true,
																				Optional: true,
																				Attributes: map[string]schema.Attribute{
																					"boolean": schema.BoolAttribute{
																						Computed: true,
																						Optional: true,
																					},
																					"array_of_str": schema.ListAttribute{
																						Computed:    true,
																						Optional:    true,
																						ElementType: types.StringType,
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																			"additional_properties": schema.MapAttribute{
																				Computed:    true,
																				Optional:    true,
																				ElementType: types.StringType,
																				Validators: []validator.Map{
																					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
																				},
																			},
																		},
																		Description: `Mapping operation nodes are either primitive values or operation node objects`,
																	},
																	"any": schema.StringAttribute{
																		Computed: true,
																		Optional: true,
																		Validators: []validator.String{
																			validators.IsValidJSON(),
																		},
																		Description: `Parsed as JSON.`,
																	},
																},
																Validators: []validator.Object{
																	validators.ExactlyOneChild(),
																},
															},
															"target": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
														},
													},
													"mapping_attribute": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"set_value_mapper": schema.SingleNestedAttribute{
																Computed: true,
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"mode": schema.StringAttribute{
																		Required: true,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"copy_if_exists",
																				"append_if_exists",
																				"set_value",
																			),
																		},
																		MarkdownDescription: `- copy_if_exists - it replaces the target attribute with the source value - append_if_exists - it currently replaces target attribute with array like values. Useful when you have multiple values to be added into one attribute. - set_value - it sets a value to a predefined value. Must be used together with value property.` + "\n" +
																			``,
																	},
																	"target": schema.StringAttribute{
																		Required: true,
																	},
																	"value": schema.StringAttribute{
																		Required: true,
																		Validators: []validator.String{
																			validators.IsValidJSON(),
																		},
																		Description: `Parsed as JSON.`,
																	},
																},
															},
															"copy_value_mapper": schema.SingleNestedAttribute{
																Computed: true,
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"mode": schema.StringAttribute{
																		Required: true,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"copy_if_exists",
																				"append_if_exists",
																				"set_value",
																			),
																		},
																		MarkdownDescription: `- copy_if_exists - it replaces the target attribute with the source value - append_if_exists - it currently replaces target attribute with array like values. Useful when you have multiple values to be added into one attribute. - set_value - it sets a value to a predefined value. Must be used together with value property.` + "\n" +
																			``,
																	},
																	"source": schema.StringAttribute{
																		Required: true,
																	},
																	"target": schema.StringAttribute{
																		Required: true,
																	},
																},
															},
															"append_value_mapper": schema.SingleNestedAttribute{
																Computed: true,
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"mode": schema.StringAttribute{
																		Required: true,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"copy_if_exists",
																				"append_if_exists",
																				"set_value",
																			),
																		},
																		MarkdownDescription: `- copy_if_exists - it replaces the target attribute with the source value - append_if_exists - it currently replaces target attribute with array like values. Useful when you have multiple values to be added into one attribute. - set_value - it sets a value to a predefined value. Must be used together with value property.` + "\n" +
																			``,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																		Optional: true,
																	},
																	"target": schema.StringAttribute{
																		Required: true,
																	},
																	"target_unique": schema.ListAttribute{
																		Computed:    true,
																		Optional:    true,
																		ElementType: types.StringType,
																	},
																	"value_json": schema.StringAttribute{
																		Required: true,
																	},
																},
															},
														},
														Validators: []validator.Object{
															validators.ExactlyOneChild(),
														},
													},
												},
												Validators: []validator.Object{
													validators.ExactlyOneChild(),
												},
											},
										},
										"mapping_config": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"config_id": schema.StringAttribute{
													Required: true,
												},
												"target_id": schema.StringAttribute{
													Required: true,
												},
												"version": schema.NumberAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"relation_attributes": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"mode": schema.StringAttribute{
														Required: true,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"append",
																"prepend",
																"set",
															),
														},
													},
													"related_to": schema.MapAttribute{
														Computed:    true,
														Optional:    true,
														ElementType: types.StringType,
														Validators: []validator.Map{
															mapvalidator.ValueStringsAre(validators.IsValidJSON()),
														},
													},
													"source_filter": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"attribute": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"limit": schema.Int64Attribute{
																Computed: true,
																Optional: true,
															},
															"relation_tag": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"schema": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"self": schema.BoolAttribute{
																Computed: true,
																Optional: true,
															},
															"tag": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
														},
														Description: `A filter to identify which source entities to pick as relations from main entity`,
													},
													"target": schema.StringAttribute{
														Required: true,
													},
													"target_tags": schema.ListAttribute{
														Computed:    true,
														Optional:    true,
														ElementType: types.StringType,
													},
													"target_tags_include_source": schema.BoolAttribute{
														Computed: true,
														Optional: true,
													},
												},
											},
										},
										"target_schema": schema.StringAttribute{
											Required: true,
										},
										"target_unique": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
									},
								},
								"created_automatically": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"flow_action_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
							},
						},
						"trigger_workflow_action_config": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"allow_failure": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"assign_steps": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"step_id": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
													"step_name": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
													"user_ids": schema.ListAttribute{
														Computed:    true,
														Optional:    true,
														ElementType: types.NumberType,
													},
												},
											},
										},
										"assignees": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"conditions": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"comparison": schema.StringAttribute{
														Required: true,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"equals",
																"any_of",
																"not_empty",
																"is_empty",
															),
														},
													},
													"schema": schema.StringAttribute{
														Required: true,
													},
													"source": schema.StringAttribute{
														Required: true,
													},
													"value": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"str": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"number": schema.NumberAttribute{
																Computed: true,
																Optional: true,
															},
															"array_of_str": schema.ListAttribute{
																Computed:    true,
																Optional:    true,
																ElementType: types.StringType,
															},
															"array_of_number": schema.ListAttribute{
																Computed:    true,
																Optional:    true,
																ElementType: types.NumberType,
															},
														},
														Validators: []validator.Object{
															validators.ExactlyOneChild(),
														},
													},
												},
											},
										},
										"target_workflow": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"created_automatically": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"flow_action_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
							},
						},
						"trigger_webhook_action_config": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"allow_failure": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"entity_sources": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"target_webhook_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"created_automatically": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"flow_action_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
							},
						},
						"create_document_action_config": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"allow_failure": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"filename": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"template_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"created_automatically": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"flow_action_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
							},
						},
						"send_email_action_config": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"allow_failure": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"attachments": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"source_filter": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"attribute": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"document_type": schema.StringAttribute{
																Computed: true,
																Optional: true,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"document",
																		"text",
																		"image",
																		"video",
																		"audio",
																		"spreadsheet",
																		"presentation",
																		"font",
																		"archive",
																		"application",
																		"unknown",
																	),
																},
																Description: `Filter by a specific document type (e.g. document)`,
															},
															"filename_regex": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"limit": schema.Int64Attribute{
																Computed: true,
																Optional: true,
															},
															"relation_tag": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"self": schema.BoolAttribute{
																Computed: true,
																Optional: true,
															},
															"tag": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
														},
														Description: `Specify filters to match file entities related to main entity`,
													},
												},
											},
										},
										"email_template_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"language_code": schema.StringAttribute{
											Computed: true,
											Optional: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"de",
													"en",
												),
											},
										},
									},
								},
								"created_automatically": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"flow_action_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
							},
						},
						"cart_checkout_action_config": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"allow_failure": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"linkback_relation_attribute": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"linkback_relation_tags": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"mapping_attributes": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"mapping_attribute_v2": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"operation": schema.SingleNestedAttribute{
																Required: true,
																Attributes: map[string]schema.Attribute{
																	"operation_object_node": schema.SingleNestedAttribute{
																		Computed: true,
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"append": schema.ListAttribute{
																				Computed:    true,
																				Optional:    true,
																				ElementType: types.StringType,
																				Validators: []validator.List{
																					listvalidator.ValueStringsAre(validators.IsValidJSON()),
																				},
																			},
																			"copy": schema.StringAttribute{
																				Computed: true,
																				Optional: true,
																			},
																			"set": schema.StringAttribute{
																				Computed: true,
																				Optional: true,
																				Validators: []validator.String{
																					validators.IsValidJSON(),
																				},
																				Description: `Parsed as JSON.`,
																			},
																			"uniq": schema.SingleNestedAttribute{
																				Computed: true,
																				Optional: true,
																				Attributes: map[string]schema.Attribute{
																					"boolean": schema.BoolAttribute{
																						Computed: true,
																						Optional: true,
																					},
																					"array_of_str": schema.ListAttribute{
																						Computed:    true,
																						Optional:    true,
																						ElementType: types.StringType,
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																			"additional_properties": schema.MapAttribute{
																				Computed:    true,
																				Optional:    true,
																				ElementType: types.StringType,
																				Validators: []validator.Map{
																					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
																				},
																			},
																		},
																		Description: `Mapping operation nodes are either primitive values or operation node objects`,
																	},
																	"any": schema.StringAttribute{
																		Computed: true,
																		Optional: true,
																		Validators: []validator.String{
																			validators.IsValidJSON(),
																		},
																		Description: `Parsed as JSON.`,
																	},
																},
																Validators: []validator.Object{
																	validators.ExactlyOneChild(),
																},
															},
															"target": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
														},
													},
													"mapping_attribute": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"set_value_mapper": schema.SingleNestedAttribute{
																Computed: true,
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"mode": schema.StringAttribute{
																		Required: true,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"copy_if_exists",
																				"append_if_exists",
																				"set_value",
																			),
																		},
																		MarkdownDescription: `- copy_if_exists - it replaces the target attribute with the source value - append_if_exists - it currently replaces target attribute with array like values. Useful when you have multiple values to be added into one attribute. - set_value - it sets a value to a predefined value. Must be used together with value property.` + "\n" +
																			``,
																	},
																	"target": schema.StringAttribute{
																		Required: true,
																	},
																	"value": schema.StringAttribute{
																		Required: true,
																		Validators: []validator.String{
																			validators.IsValidJSON(),
																		},
																		Description: `Parsed as JSON.`,
																	},
																},
															},
															"copy_value_mapper": schema.SingleNestedAttribute{
																Computed: true,
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"mode": schema.StringAttribute{
																		Required: true,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"copy_if_exists",
																				"append_if_exists",
																				"set_value",
																			),
																		},
																		MarkdownDescription: `- copy_if_exists - it replaces the target attribute with the source value - append_if_exists - it currently replaces target attribute with array like values. Useful when you have multiple values to be added into one attribute. - set_value - it sets a value to a predefined value. Must be used together with value property.` + "\n" +
																			``,
																	},
																	"source": schema.StringAttribute{
																		Required: true,
																	},
																	"target": schema.StringAttribute{
																		Required: true,
																	},
																},
															},
															"append_value_mapper": schema.SingleNestedAttribute{
																Computed: true,
																Optional: true,
																Attributes: map[string]schema.Attribute{
																	"mode": schema.StringAttribute{
																		Required: true,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"copy_if_exists",
																				"append_if_exists",
																				"set_value",
																			),
																		},
																		MarkdownDescription: `- copy_if_exists - it replaces the target attribute with the source value - append_if_exists - it currently replaces target attribute with array like values. Useful when you have multiple values to be added into one attribute. - set_value - it sets a value to a predefined value. Must be used together with value property.` + "\n" +
																			``,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																		Optional: true,
																	},
																	"target": schema.StringAttribute{
																		Required: true,
																	},
																	"target_unique": schema.ListAttribute{
																		Computed:    true,
																		Optional:    true,
																		ElementType: types.StringType,
																	},
																	"value_json": schema.StringAttribute{
																		Required: true,
																	},
																},
															},
														},
														Validators: []validator.Object{
															validators.ExactlyOneChild(),
														},
													},
												},
												Validators: []validator.Object{
													validators.ExactlyOneChild(),
												},
											},
										},
										"mapping_config": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"config_id": schema.StringAttribute{
													Required: true,
												},
												"target_id": schema.StringAttribute{
													Required: true,
												},
												"version": schema.NumberAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"relation_attributes": schema.ListNestedAttribute{
											Computed: true,
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"mode": schema.StringAttribute{
														Required: true,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"append",
																"prepend",
																"set",
															),
														},
													},
													"related_to": schema.MapAttribute{
														Computed:    true,
														Optional:    true,
														ElementType: types.StringType,
														Validators: []validator.Map{
															mapvalidator.ValueStringsAre(validators.IsValidJSON()),
														},
													},
													"source_filter": schema.SingleNestedAttribute{
														Computed: true,
														Optional: true,
														Attributes: map[string]schema.Attribute{
															"attribute": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"limit": schema.Int64Attribute{
																Computed: true,
																Optional: true,
															},
															"relation_tag": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"schema": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
															"self": schema.BoolAttribute{
																Computed: true,
																Optional: true,
															},
															"tag": schema.StringAttribute{
																Computed: true,
																Optional: true,
															},
														},
														Description: `A filter to identify which source entities to pick as relations from main entity`,
													},
													"target": schema.StringAttribute{
														Required: true,
													},
													"target_tags": schema.ListAttribute{
														Computed:    true,
														Optional:    true,
														ElementType: types.StringType,
													},
													"target_tags_include_source": schema.BoolAttribute{
														Computed: true,
														Optional: true,
													},
												},
											},
										},
										"target_unique": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"version": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"created_automatically": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"flow_action_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
							},
							Description: `Creates an order entity with prices from journey`,
						},
						"automation_action_config": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"allow_failure": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"config": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"created_automatically": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"flow_action_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"created_by": schema.StringAttribute{
				Computed: true,
			},
			"enabled": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"entity_schema": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"flow_name": schema.StringAttribute{
				Required: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"last_updated_by": schema.StringAttribute{
				Computed: true,
			},
			"org_id": schema.StringAttribute{
				Computed: true,
			},
			"runs": schema.NumberAttribute{
				Computed: true,
				Optional: true,
			},
			"trigger_conditions": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"comparison": schema.StringAttribute{
							Required: true,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"equals",
									"any_of",
									"not_empty",
									"is_empty",
								),
							},
						},
						"source": schema.StringAttribute{
							Required: true,
						},
						"value": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"str": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"number": schema.NumberAttribute{
									Computed: true,
									Optional: true,
								},
								"array_of_str": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"array_of_number": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.NumberType,
								},
							},
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
					},
				},
			},
			"triggers": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"frontend_submit_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Required: true,
									Attributes: map[string]schema.Attribute{
										"source_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"frontend_submission",
										),
									},
								},
							},
						},
						"journey_submit_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Required: true,
									Attributes: map[string]schema.Attribute{
										"source_id": schema.StringAttribute{
											Required: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"journey_submission",
										),
									},
								},
							},
						},
						"api_submission_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Required: true,
									Attributes: map[string]schema.Attribute{
										"source_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"api_submission",
										),
									},
								},
							},
						},
						"entity_operation_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Required: true,
									Attributes: map[string]schema.Attribute{
										"exclude_activities": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"include_activities": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"operations": schema.ListAttribute{
											Required:    true,
											ElementType: types.StringType,
										},
										"schema": schema.StringAttribute{
											Required: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"entity_operation",
										),
									},
								},
							},
						},
						"activity_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Required: true,
									Attributes: map[string]schema.Attribute{
										"schema": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"types": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
									},
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"activity",
										),
									},
								},
							},
						},
						"entity_manual_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Required: true,
									Attributes: map[string]schema.Attribute{
										"schema": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"entity_manual",
										),
									},
								},
							},
						},
						"received_email_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Required: true,
									Attributes: map[string]schema.Attribute{
										"message_type": schema.StringAttribute{
											Computed: true,
											Optional: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"RECEIVED",
												),
											},
										},
									},
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"received_email",
										),
									},
								},
							},
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
		},
	}
}

func (r *FlowResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FlowResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *FlowResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	automationFlowInput := data.ToSDKType()
	flowID := data.ID.ValueString()
	request := operations.PutFlowRequest{
		AutomationFlowInput: automationFlowInput,
		FlowID:              flowID,
	}
	res, err := r.client.Flows.PutFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AutomationFlow == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.AutomationFlow)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *FlowResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	flowID := data.ID.ValueString()
	request := operations.GetFlowRequest{
		FlowID: flowID,
	}
	res, err := r.client.Flows.GetFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AutomationFlow == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.AutomationFlow)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *FlowResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	automationFlowInput := data.ToSDKType()
	flowID := data.ID.ValueString()
	request := operations.PutFlowRequest{
		AutomationFlowInput: automationFlowInput,
		FlowID:              flowID,
	}
	res, err := r.client.Flows.PutFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AutomationFlow == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.AutomationFlow)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *FlowResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	flowID := data.ID.ValueString()
	request := operations.DeleteFlowRequest{
		FlowID: flowID,
	}
	res, err := r.client.Flows.DeleteFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *FlowResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
