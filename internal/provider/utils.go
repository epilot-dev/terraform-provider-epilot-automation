// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httputil"
	"reflect"
)

func debugResponse(response *http.Response) string {
	dumpReq, err := httputil.DumpRequest(response.Request, false)
	if err != nil {
		return err.Error()
	}
	dumpRes, err := httputil.DumpResponse(response, true)
	if err != nil {
		dumpRes, err = httputil.DumpResponse(response, false)
		if err != nil {
			return err.Error()
		}
	}
	return fmt.Sprintf("**Request**:\n%s\n**Response**:\n%s", string(dumpReq), string(dumpRes))
}

func reflectJSONKey(data any, key string) reflect.Value {
	jsonIfied, err := json.Marshal(data)
	if err != nil {
		panic(fmt.Errorf("failed to marshal data: %w", err))
	}
	var jsonMap map[string]interface{}
	err = json.Unmarshal(jsonIfied, &jsonMap)
	if err != nil {
		panic(fmt.Errorf("failed to unmarshal data: %w", err))
	}
	return reflect.ValueOf(jsonMap[key])
}
