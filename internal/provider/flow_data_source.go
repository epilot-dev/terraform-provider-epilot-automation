// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/pkg/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &FlowDataSource{}
var _ datasource.DataSourceWithConfigure = &FlowDataSource{}

func NewFlowDataSource() datasource.DataSource {
	return &FlowDataSource{}
}

// FlowDataSource is the data source implementation.
type FlowDataSource struct {
	client *sdk.SDK
}

// FlowDataSourceModel describes the data model.
type FlowDataSourceModel struct {
	Actions           []types.String `tfsdk:"actions"`
	Enabled           types.Bool     `tfsdk:"enabled"`
	EntitySchema      types.String   `tfsdk:"entity_schema"`
	FlowName          types.String   `tfsdk:"flow_name"`
	ID                types.String   `tfsdk:"id"`
	SystemFlow        types.Bool     `tfsdk:"system_flow"`
	TriggerConditions []types.String `tfsdk:"trigger_conditions"`
	Triggers          []AnyTrigger   `tfsdk:"triggers"`
}

// Metadata returns the data source type name.
func (r *FlowDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_flow"
}

// Schema defines the schema for the data source.
func (r *FlowDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Flow DataSource",

		Attributes: map[string]schema.Attribute{
			"actions": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the automation is enabled or not. Default: true`,
			},
			"entity_schema": schema.StringAttribute{
				Computed:    true,
				Description: `The triggering entity schema`,
			},
			"flow_name": schema.StringAttribute{
				Computed:    true,
				Description: `A descriptive name for the Automation`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Automation Workflow ID`,
			},
			"system_flow": schema.BoolAttribute{
				Computed:    true,
				Description: `Determines if the flow is a system generated flow`,
			},
			"trigger_conditions": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"triggers": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"activity_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"schema": schema.StringAttribute{
											Computed: true,
										},
										"types": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["activity"]`,
								},
							},
						},
						"api_submission_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"source_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["api_submission"]`,
								},
							},
						},
						"entity_manual_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"schema": schema.StringAttribute{
											Computed:    true,
											Description: `Which entity type can this automation be triggered from`,
										},
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["entity_manual"]`,
								},
							},
						},
						"entity_operation_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"exclude_activities": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"filter_config": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"activity": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"type": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"str": schema.StringAttribute{
																		Computed: true,
																	},
																	"anything_but_condition": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"anything_but": schema.ListAttribute{
																				Computed:    true,
																				ElementType: types.StringType,
																			},
																		},
																	},
																	"equals_ignore_case_condition": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"equals_ignore_case": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"exists_condition": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"exists": schema.BoolAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"prefix_condition": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"prefix": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"suffix_condition": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"suffix": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"wildcard_condition": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"wildcard": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
															},
															MarkdownDescription: `Filter on activity type. If not specified, all activities will be matched on execution.` + "\n" +
																`Example:` + "\n" +
																`  1. Filter the events when an entity is updated from portal` + "\n" +
																`    ` + "```" + `` + "\n" +
																`      {` + "\n" +
																`        "activity":{` + "\n" +
																`          "type": ["EntityUpdatedFromPortal"]` + "\n" +
																`        }` + "\n" +
																`      }` + "\n" +
																`    ` + "```" + `` + "\n" +
																`  2. Filter the events when either a doc is uploaded/removed on an entity from a portal` + "\n" +
																`    ` + "```" + `` + "\n" +
																`      {` + "\n" +
																`        "activity":{` + "\n" +
																`          "type": ["DocUploadedFromPortal", "DocRemovedFromPortal"]` + "\n" +
																`        }` + "\n" +
																`      }` + "\n" +
																`    ` + "```" + `` + "\n" +
																``,
														},
													},
												},
												"operation": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"diff": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"any": schema.StringAttribute{
																	Computed:    true,
																	Description: `Parsed as JSON.`,
																},
																"two": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"added": schema.StringAttribute{
																			Computed:    true,
																			Description: `Parsed as JSON.`,
																		},
																		"deleted": schema.StringAttribute{
																			Computed:    true,
																			Description: `Parsed as JSON.`,
																		},
																		"updated": schema.StringAttribute{
																			Computed:    true,
																			Description: `Parsed as JSON.`,
																		},
																	},
																	Description: `Diff to it's prior state when an entity is updated`,
																},
															},
														},
														"operation": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
															MarkdownDescription: `Filter on operation type. If not specified, all operations will be matched on execution.` + "\n" +
																`Example:` + "\n" +
																`  1. Filter all the createEntity/updateEntity operations` + "\n" +
																`  ` + "```" + `` + "\n" +
																`    {` + "\n" +
																`      "operation":{` + "\n" +
																`        "operation": ["createEntity", "updateEntity"]` + "\n" +
																`      }` + "\n" +
																`    }` + "\n" +
																`  ` + "```" + `` + "\n" +
																``,
														},
														"payload": schema.StringAttribute{
															Computed:    true,
															Description: `Parsed as JSON.`,
														},
													},
												},
											},
										},
										"include_activities": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"operations": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"schema": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["entity_operation"]`,
								},
							},
							MarkdownDescription: `- If provides filter_config, executes an automation based on the filtered configuration when an entity event occurs.` + "\n" +
								`- The conditions on a filter follows the event bridge patterns - ` + "`" + `https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html` + "`" + `` + "\n" +
								`  | Comparison             | Example                                             | Rule syntax                                              |` + "\n" +
								`  |------------------------|-----------------------------------------------------|----------------------------------------------------------|` + "\n" +
								`  | Null                   | first_name is null                                  | ` + "`" + `"first_name": [ null ]` + "`" + `                                 |` + "\n" +
								`  | Empty                  | last_name is empty                                  | ` + "`" + `"last_name": [""]` + "`" + `                                      |` + "\n" +
								`  | Equals                 | email is "j.doe@email.com"                          | ` + "`" + `"email": [ "j.doe@email.com" ]` + "`" + `                         |` + "\n" +
								`  | Equals (ignore case)   | first_name is "John"                                | ` + "`" + `"first_name": [ { "equals-ignore-case": "john" } ]` + "`" + `     |` + "\n" +
								`  | And                    | fist_name is "John" and last_name is "Doe"          | ` + "`" + `"first_name": [ "John" ], "last_name": ["Doe"]` + "`" + `         |` + "\n" +
								`  | Or                     | PaymentType is "Invoice" or "SEPA"                  | ` + "`" + `"PaymentType": [ "invoice", "sepa"]` + "`" + `                    |` + "\n" +
								`  | Or (multiple fields)   | first_name is "John", or last_name is "Doe".        | ` + "`" + `"$or": [ { "first_name": [ "John" ] }, { "last_name": [ "Doe" ] } ]` + "`" + ` |` + "\n" +
								`  | Not                    | status is anything but "cancelled"                  | ` + "`" + `"status": [ { "anything-but": [ "cancelled" ] } ]` + "`" + `      |` + "\n" +
								`  | Numeric (equals)       | Price is 100                                        | ` + "`" + `"Price": [ { "numeric": [ "=", 100 ] } ]` + "`" + `               |` + "\n" +
								`  | Numeric (range)        | Price is more than 10, and less than or equal to 20 | ` + "`" + `"Price": [ { "numeric": [ ">", 10, "<=", 20 ] } ]` + "`" + `      |` + "\n" +
								`  | Exists                 | ProductName exists                                  | ` + "`" + `"ProductName": [ { "exists": true } ]` + "`" + `                  |` + "\n" +
								`  | Does not exist         | ProductName does not exist                          | ` + "`" + `"ProductName": [ { "exists": false } ]` + "`" + `                 |` + "\n" +
								`  | Begins with            | OpportunityNumber starts with OPP-                  | ` + "`" + `"opportunity_number": [ { "prefix": "OPP-" } ]` + "`" + `         |` + "\n" +
								`  | Ends with              | FileName ends with a .png extension                 | ` + "`" + `"filename": [ { "suffix": ".png" } ]` + "`" + `                   |` + "\n" +
								`  | Wildcard               | search a string using a wildcard                    | ` + "`" + `"email": [ { "wildcard": "*@doe.com" } ]` + "`" + `               |` + "\n" +
								`  - To run the execution on all update events` + "\n" +
								`    ` + "```" + `` + "\n" +
								`      {` + "\n" +
								`        "type": "filter_entity_event",` + "\n" +
								`        "configuration": {` + "\n" +
								`          "operation": {` + "\n" +
								`            "operation": ["updateEntity"]` + "\n" +
								`          }` + "\n" +
								`        }` + "\n" +
								`      }` + "\n" +
								`    ` + "```" + `` + "\n" +
								`  - To run the execution only when the updates are from a portal user` + "\n" +
								`    ` + "```" + `` + "\n" +
								`      {` + "\n" +
								`        "type": "filter_entity_event",` + "\n" +
								`        "configuration": {` + "\n" +
								`          "operation": {` + "\n" +
								`            "operation": ["updateEntity"]` + "\n" +
								`          },` + "\n" +
								`          "activity": {` + "\n" +
								`            "type": "EntityUpdatedFromPortal"` + "\n" +
								`          }` + "\n" +
								`        }` + "\n" +
								`      }` + "\n" +
								`    ` + "```" + `` + "\n" +
								`  - To run the execution only when there is an update on a specific attribute` + "\n" +
								`    ` + "```" + `` + "\n" +
								`      Only starts the automation when the email on a contact is changed` + "\n" +
								`      {` + "\n" +
								`        "type": "filter_entity_event",` + "\n" +
								`        "configuration": {` + "\n" +
								`          "operation": {` + "\n" +
								`            "operation": ["updateEntity"],` + "\n" +
								`            "payload": {` + "\n" +
								`              "_schema": ["contact"]` + "\n" +
								`            },` + "\n" +
								`            "diff": {` + "\n" +
								`              "updated": {` + "\n" +
								`                "email": [{ "exists": true }]` + "\n" +
								`              }` + "\n" +
								`            }` + "\n" +
								`          }` + "\n" +
								`        }` + "\n" +
								`      }` + "\n" +
								`    ` + "```" + `` + "\n" +
								`    - To run the execution only when a specific attribute is altered(created/updated/deleted)` + "\n" +
								`      ` + "```" + `` + "\n" +
								`        Only starts the automation when a price is altered on a contract` + "\n" +
								`        {` + "\n" +
								`          "type": "filter_entity_event",` + "\n" +
								`          "configuration": {` + "\n" +
								`            "operation": {` + "\n" +
								`              "payload": {` + "\n" +
								`                "_schema": ["contract"]` + "\n" +
								`              },` + "\n" +
								`              "diff": {` + "\n" +
								`                // Whether he first_name has been added, updated, or removed` + "\n" +
								`                $or: [` + "\n" +
								`                  {` + "\n" +
								`                    'added.first_name': [{ exists: true }]` + "\n" +
								`                  },` + "\n" +
								`                  {` + "\n" +
								`                    'updated.first_name': [{ exists: true }]` + "\n" +
								`                  },` + "\n" +
								`                  {` + "\n" +
								`                    'deleted.first_name': [{ exists: true }]` + "\n" +
								`                  }` + "\n" +
								`                ]` + "\n" +
								`              }` + "\n" +
								`            }` + "\n" +
								`          }` + "\n" +
								`        }` + "\n" +
								`      ` + "```" + `` + "\n" +
								`    - To run the execution if an attribute is changed from one state to another` + "\n" +
								`      ` + "```" + `` + "\n" +
								`        Only starts the automation when the order status changes from ` + "`" + `open_for_acceptance` + "`" + ` to ` + "`" + `placed` + "`" + `` + "\n" +
								`        {` + "\n" +
								`          "type": "filter_entity_event",` + "\n" +
								`          "configuration": {` + "\n" +
								`            "operation": {` + "\n" +
								`              "operation": ["updateEntity"],` + "\n" +
								`              "payload": {` + "\n" +
								`                "_schema": ["order"],` + "\n" +
								`                "status": ["placed"]` + "\n" +
								`              },` + "\n" +
								`              "diff": {` + "\n" +
								`                "updated": {` + "\n" +
								`                  "status": ["open_for_acceptance"]` + "\n" +
								`                }` + "\n" +
								`              }` + "\n" +
								`            }` + "\n" +
								`          }` + "\n" +
								`        }` + "\n" +
								`      ` + "```" + `` + "\n" +
								``,
						},
						"frontend_submit_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"source_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["frontend_submission"]`,
								},
							},
						},
						"journey_submit_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"source_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["journey_submission"]`,
								},
							},
						},
						"received_email_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"message_type": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["RECEIVED"]`,
										},
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["received_email"]`,
								},
							},
						},
					},
				},
			},
		},
	}
}

func (r *FlowDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FlowDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *FlowDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	flowID := data.ID.ValueString()
	request := operations.GetFlowRequest{
		FlowID: flowID,
	}
	res, err := r.client.Flows.GetFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AutomationFlow == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAutomationFlow(res.AutomationFlow)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
