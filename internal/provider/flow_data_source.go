// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-automation/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &FlowDataSource{}
var _ datasource.DataSourceWithConfigure = &FlowDataSource{}

func NewFlowDataSource() datasource.DataSource {
	return &FlowDataSource{}
}

// FlowDataSource is the data source implementation.
type FlowDataSource struct {
	client *sdk.SDK
}

// FlowDataSourceModel describes the data model.
type FlowDataSourceModel struct {
	Actions           []types.String            `tfsdk:"actions"`
	Conditions        []tfTypes.ActionCondition `tfsdk:"conditions"`
	Enabled           types.Bool                `tfsdk:"enabled"`
	EntitySchema      types.String              `tfsdk:"entity_schema"`
	FlowName          types.String              `tfsdk:"flow_name"`
	ID                types.String              `tfsdk:"id"`
	SystemFlow        types.Bool                `tfsdk:"system_flow"`
	TriggerConditions []types.String            `tfsdk:"trigger_conditions"`
	Triggers          []types.String            `tfsdk:"triggers"`
	Version           types.Number              `tfsdk:"version"`
}

// Metadata returns the data source type name.
func (r *FlowDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_flow"
}

// Schema defines the schema for the data source.
func (r *FlowDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Flow DataSource",

		Attributes: map[string]schema.Attribute{
			"actions": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The actions (nodes) of the automation flow`,
			},
			"conditions": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"conditions": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"operation": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["equals", "not_equals", "any_of", "none_of", "contains", "not_contains", "starts_with", "ends_with", "greater_than", "less_than", "greater_than_or_equals", "less_than_or_equals", "is_empty", "is_not_empty"]`,
									},
									"source": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"attribute": schema.StringAttribute{
												Computed: true,
											},
											"attribute_type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["string", "text", "number", "boolean", "date", "datetime", "tag", "country", "email", "phone", "product", "price", "status", "relation", "multiselect", "select", "radio", "relation_user"]`,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"origin": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["trigger", "action"]`,
											},
											"origin_type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["entity", "workflow", "journey_block"]`,
											},
											"schema": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"values": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
								},
							},
						},
						"evaluation_result": schema.BoolAttribute{
							Computed:    true,
							Description: `Result of the condition evaluation`,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the automation is enabled or not`,
			},
			"entity_schema": schema.StringAttribute{
				Computed:    true,
				Description: `The triggering entity schema`,
			},
			"flow_name": schema.StringAttribute{
				Computed:    true,
				Description: `A descriptive name for the Automation`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Automation Workflow ID`,
			},
			"system_flow": schema.BoolAttribute{
				Computed:    true,
				Description: `Determines if the flow is a system generated flow`,
			},
			"trigger_conditions": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"triggers": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"version": schema.NumberAttribute{
				Computed:    true,
				Description: `Version of the flow`,
			},
		},
	}
}

func (r *FlowDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FlowDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *FlowDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	flowID := data.ID.ValueString()
	request := operations.GetFlowRequest{
		FlowID: flowID,
	}
	res, err := r.client.Flows.GetFlow(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AutomationFlow != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAutomationFlow(res.AutomationFlow)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
