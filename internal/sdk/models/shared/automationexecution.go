// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/internal/utils"
	"time"
)

type TriggerEventType string

const (
	TriggerEventTypeTriggerEventManual          TriggerEventType = "TriggerEventManual"
	TriggerEventTypeTriggerEventEntityActivity  TriggerEventType = "TriggerEventEntityActivity"
	TriggerEventTypeTriggerEventEntityOperation TriggerEventType = "TriggerEventEntityOperation"
)

type TriggerEvent struct {
	TriggerEventManual          *TriggerEventManual
	TriggerEventEntityActivity  *TriggerEventEntityActivity
	TriggerEventEntityOperation *TriggerEventEntityOperation

	Type TriggerEventType
}

func CreateTriggerEventTriggerEventManual(triggerEventManual TriggerEventManual) TriggerEvent {
	typ := TriggerEventTypeTriggerEventManual

	return TriggerEvent{
		TriggerEventManual: &triggerEventManual,
		Type:               typ,
	}
}

func CreateTriggerEventTriggerEventEntityActivity(triggerEventEntityActivity TriggerEventEntityActivity) TriggerEvent {
	typ := TriggerEventTypeTriggerEventEntityActivity

	return TriggerEvent{
		TriggerEventEntityActivity: &triggerEventEntityActivity,
		Type:                       typ,
	}
}

func CreateTriggerEventTriggerEventEntityOperation(triggerEventEntityOperation TriggerEventEntityOperation) TriggerEvent {
	typ := TriggerEventTypeTriggerEventEntityOperation

	return TriggerEvent{
		TriggerEventEntityOperation: &triggerEventEntityOperation,
		Type:                        typ,
	}
}

func (u *TriggerEvent) UnmarshalJSON(data []byte) error {

	var triggerEventManual TriggerEventManual = TriggerEventManual{}
	if err := utils.UnmarshalJSON(data, &triggerEventManual, "", true, false); err == nil {
		u.TriggerEventManual = &triggerEventManual
		u.Type = TriggerEventTypeTriggerEventManual
		return nil
	}

	var triggerEventEntityActivity TriggerEventEntityActivity = TriggerEventEntityActivity{}
	if err := utils.UnmarshalJSON(data, &triggerEventEntityActivity, "", true, false); err == nil {
		u.TriggerEventEntityActivity = &triggerEventEntityActivity
		u.Type = TriggerEventTypeTriggerEventEntityActivity
		return nil
	}

	var triggerEventEntityOperation TriggerEventEntityOperation = TriggerEventEntityOperation{}
	if err := utils.UnmarshalJSON(data, &triggerEventEntityOperation, "", true, false); err == nil {
		u.TriggerEventEntityOperation = &triggerEventEntityOperation
		u.Type = TriggerEventTypeTriggerEventEntityOperation
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TriggerEvent", string(data))
}

func (u TriggerEvent) MarshalJSON() ([]byte, error) {
	if u.TriggerEventManual != nil {
		return utils.MarshalJSON(u.TriggerEventManual, "", true)
	}

	if u.TriggerEventEntityActivity != nil {
		return utils.MarshalJSON(u.TriggerEventEntityActivity, "", true)
	}

	if u.TriggerEventEntityOperation != nil {
		return utils.MarshalJSON(u.TriggerEventEntityOperation, "", true)
	}

	return nil, errors.New("could not marshal union type TriggerEvent: all fields are null")
}

type AutomationExecution struct {
	Actions         []AnyAction         `json:"actions"`
	ActivityID      *string             `json:"activity_id,omitempty"`
	Conditions      []ActionCondition   `json:"conditions,omitempty"`
	CreatedAt       *time.Time          `json:"created_at,omitempty"`
	CurrentActionID *string             `json:"current_action_id,omitempty"`
	EntityID        string              `json:"entity_id"`
	EntitySnapshot  *EntityItemSnapshot `json:"entity_snapshot,omitempty"`
	ExecutionStatus *ExecutionStatus    `json:"execution_status,omitempty"`
	FlowID          string              `json:"flow_id"`
	FlowName        *string             `json:"flow_name,omitempty"`
	ID              string              `json:"id"`
	OrgID           string              `json:"org_id"`
	// A unique token to resume a paused automation execution
	ResumeToken  *string       `json:"resume_token,omitempty"`
	TriggerEvent *TriggerEvent `json:"trigger_event,omitempty"`
	UpdatedAt    *time.Time    `json:"updated_at,omitempty"`
	// Version of the flow
	Version *float64 `json:"version,omitempty"`
}

func (a AutomationExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AutomationExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AutomationExecution) GetActions() []AnyAction {
	if o == nil {
		return []AnyAction{}
	}
	return o.Actions
}

func (o *AutomationExecution) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *AutomationExecution) GetConditions() []ActionCondition {
	if o == nil {
		return nil
	}
	return o.Conditions
}

func (o *AutomationExecution) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AutomationExecution) GetCurrentActionID() *string {
	if o == nil {
		return nil
	}
	return o.CurrentActionID
}

func (o *AutomationExecution) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *AutomationExecution) GetEntitySnapshot() *EntityItemSnapshot {
	if o == nil {
		return nil
	}
	return o.EntitySnapshot
}

func (o *AutomationExecution) GetExecutionStatus() *ExecutionStatus {
	if o == nil {
		return nil
	}
	return o.ExecutionStatus
}

func (o *AutomationExecution) GetFlowID() string {
	if o == nil {
		return ""
	}
	return o.FlowID
}

func (o *AutomationExecution) GetFlowName() *string {
	if o == nil {
		return nil
	}
	return o.FlowName
}

func (o *AutomationExecution) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AutomationExecution) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *AutomationExecution) GetResumeToken() *string {
	if o == nil {
		return nil
	}
	return o.ResumeToken
}

func (o *AutomationExecution) GetTriggerEvent() *TriggerEvent {
	if o == nil {
		return nil
	}
	return o.TriggerEvent
}

func (o *AutomationExecution) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AutomationExecution) GetVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.Version
}
