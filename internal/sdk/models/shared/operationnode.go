// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/internal/utils"
)

type OperationNodeType string

const (
	OperationNodeTypeOperationObjectNode OperationNodeType = "OperationObjectNode"
	OperationNodeTypeAny                 OperationNodeType = "any"
)

// OperationNode - Mapping operation nodes are either primitive values or operation node objects
type OperationNode struct {
	OperationObjectNode *OperationObjectNode
	Any                 any

	Type OperationNodeType
}

func CreateOperationNodeOperationObjectNode(operationObjectNode OperationObjectNode) OperationNode {
	typ := OperationNodeTypeOperationObjectNode

	return OperationNode{
		OperationObjectNode: &operationObjectNode,
		Type:                typ,
	}
}

func CreateOperationNodeAny(any any) OperationNode {
	typ := OperationNodeTypeAny

	return OperationNode{
		Any:  any,
		Type: typ,
	}
}

func (u *OperationNode) UnmarshalJSON(data []byte) error {

	var operationObjectNode OperationObjectNode = OperationObjectNode{}
	if err := utils.UnmarshalJSON(data, &operationObjectNode, "", true, false); err == nil {
		u.OperationObjectNode = &operationObjectNode
		u.Type = OperationNodeTypeOperationObjectNode
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, false); err == nil {
		u.Any = any
		u.Type = OperationNodeTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OperationNode", string(data))
}

func (u OperationNode) MarshalJSON() ([]byte, error) {
	if u.OperationObjectNode != nil {
		return utils.MarshalJSON(u.OperationObjectNode, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type OperationNode: all fields are null")
}
