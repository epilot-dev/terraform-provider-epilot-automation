// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/internal/utils"
	"time"
)

// Status of the bulk trigger automation job
// * approval: Waiting for user approval to start the bulk trigger automation
// * starting: Starting automation executions
// * in_progress: Automation execution are currently running
// * send_report: Automation executions finished running. Report is being created & sent to the user who initiated the bulk trigger automation
// * finished: Automation executions finished running. Some may have failed. Check the status of each entity.
// * failed: Bulk trigger automation execution failed. Some executions might have started. Check the status of each entity.
// * cancelled: Bulk trigger automation execution was cancelled
type Status string

const (
	StatusApproval   Status = "approval"
	StatusStarting   Status = "starting"
	StatusInProgress Status = "in_progress"
	StatusSendReport Status = "send_report"
	StatusFinished   Status = "finished"
	StatusFailed     Status = "failed"
	StatusCancelled  Status = "cancelled"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approval":
		fallthrough
	case "starting":
		fallthrough
	case "in_progress":
		fallthrough
	case "send_report":
		fallthrough
	case "finished":
		fallthrough
	case "failed":
		fallthrough
	case "cancelled":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type BulkTriggerJob struct {
	// Time when the bulk trigger automation executions job was approved
	ApprovedAt *time.Time `json:"approved_at,omitempty"`
	CreatedAt  time.Time  `json:"created_at"`
	// User ID who created the bulk trigger automation job
	CreatedBy string `json:"created_by"`
	// List of entities & their automation execution id & status
	ExecutionSummary []ExecItem `json:"execution_summary"`
	FlowID           string     `json:"flow_id"`
	// Job ID for tracking the status of bulk trigger automation executions
	JobID string `json:"job_id"`
	OrgID string `json:"org_id"`
	// Entity ID of the report file entity
	ReportFileEntityID *string `json:"report_file_entity_id,omitempty"`
	// Status of the bulk trigger automation job
	// * approval: Waiting for user approval to start the bulk trigger automation
	// * starting: Starting automation executions
	// * in_progress: Automation execution are currently running
	// * send_report: Automation executions finished running. Report is being created & sent to the user who initiated the bulk trigger automation
	// * finished: Automation executions finished running. Some may have failed. Check the status of each entity.
	// * failed: Bulk trigger automation execution failed. Some executions might have started. Check the status of each entity.
	// * cancelled: Bulk trigger automation execution was cancelled
	//
	Status Status `json:"status"`
	// Task token to approve/cancel the bulk automation job
	TaskToken *string   `json:"task_token,omitempty"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (b BulkTriggerJob) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BulkTriggerJob) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BulkTriggerJob) GetApprovedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ApprovedAt
}

func (o *BulkTriggerJob) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *BulkTriggerJob) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *BulkTriggerJob) GetExecutionSummary() []ExecItem {
	if o == nil {
		return []ExecItem{}
	}
	return o.ExecutionSummary
}

func (o *BulkTriggerJob) GetFlowID() string {
	if o == nil {
		return ""
	}
	return o.FlowID
}

func (o *BulkTriggerJob) GetJobID() string {
	if o == nil {
		return ""
	}
	return o.JobID
}

func (o *BulkTriggerJob) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *BulkTriggerJob) GetReportFileEntityID() *string {
	if o == nil {
		return nil
	}
	return o.ReportFileEntityID
}

func (o *BulkTriggerJob) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *BulkTriggerJob) GetTaskToken() *string {
	if o == nil {
		return nil
	}
	return o.TaskToken
}

func (o *BulkTriggerJob) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
