// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/internal/utils"
)

type AnyTriggerType string

const (
	AnyTriggerTypeFrontendSubmitTrigger  AnyTriggerType = "FrontendSubmitTrigger"
	AnyTriggerTypeJourneySubmitTrigger   AnyTriggerType = "JourneySubmitTrigger"
	AnyTriggerTypeAPISubmissionTrigger   AnyTriggerType = "ApiSubmissionTrigger"
	AnyTriggerTypeEntityOperationTrigger AnyTriggerType = "EntityOperationTrigger"
	AnyTriggerTypeActivityTrigger        AnyTriggerType = "ActivityTrigger"
	AnyTriggerTypeEntityManualTrigger    AnyTriggerType = "EntityManualTrigger"
	AnyTriggerTypeReceivedEmailTrigger   AnyTriggerType = "ReceivedEmailTrigger"
)

type AnyTrigger struct {
	FrontendSubmitTrigger  *FrontendSubmitTrigger
	JourneySubmitTrigger   *JourneySubmitTrigger
	APISubmissionTrigger   *APISubmissionTrigger
	EntityOperationTrigger *EntityOperationTrigger
	ActivityTrigger        *ActivityTrigger
	EntityManualTrigger    *EntityManualTrigger
	ReceivedEmailTrigger   *ReceivedEmailTrigger

	Type AnyTriggerType
}

func CreateAnyTriggerFrontendSubmitTrigger(frontendSubmitTrigger FrontendSubmitTrigger) AnyTrigger {
	typ := AnyTriggerTypeFrontendSubmitTrigger

	return AnyTrigger{
		FrontendSubmitTrigger: &frontendSubmitTrigger,
		Type:                  typ,
	}
}

func CreateAnyTriggerJourneySubmitTrigger(journeySubmitTrigger JourneySubmitTrigger) AnyTrigger {
	typ := AnyTriggerTypeJourneySubmitTrigger

	return AnyTrigger{
		JourneySubmitTrigger: &journeySubmitTrigger,
		Type:                 typ,
	}
}

func CreateAnyTriggerAPISubmissionTrigger(apiSubmissionTrigger APISubmissionTrigger) AnyTrigger {
	typ := AnyTriggerTypeAPISubmissionTrigger

	return AnyTrigger{
		APISubmissionTrigger: &apiSubmissionTrigger,
		Type:                 typ,
	}
}

func CreateAnyTriggerEntityOperationTrigger(entityOperationTrigger EntityOperationTrigger) AnyTrigger {
	typ := AnyTriggerTypeEntityOperationTrigger

	return AnyTrigger{
		EntityOperationTrigger: &entityOperationTrigger,
		Type:                   typ,
	}
}

func CreateAnyTriggerActivityTrigger(activityTrigger ActivityTrigger) AnyTrigger {
	typ := AnyTriggerTypeActivityTrigger

	return AnyTrigger{
		ActivityTrigger: &activityTrigger,
		Type:            typ,
	}
}

func CreateAnyTriggerEntityManualTrigger(entityManualTrigger EntityManualTrigger) AnyTrigger {
	typ := AnyTriggerTypeEntityManualTrigger

	return AnyTrigger{
		EntityManualTrigger: &entityManualTrigger,
		Type:                typ,
	}
}

func CreateAnyTriggerReceivedEmailTrigger(receivedEmailTrigger ReceivedEmailTrigger) AnyTrigger {
	typ := AnyTriggerTypeReceivedEmailTrigger

	return AnyTrigger{
		ReceivedEmailTrigger: &receivedEmailTrigger,
		Type:                 typ,
	}
}

func (u *AnyTrigger) UnmarshalJSON(data []byte) error {

	var frontendSubmitTrigger FrontendSubmitTrigger = FrontendSubmitTrigger{}
	if err := utils.UnmarshalJSON(data, &frontendSubmitTrigger, "", true, true); err == nil {
		u.FrontendSubmitTrigger = &frontendSubmitTrigger
		u.Type = AnyTriggerTypeFrontendSubmitTrigger
		return nil
	}

	var journeySubmitTrigger JourneySubmitTrigger = JourneySubmitTrigger{}
	if err := utils.UnmarshalJSON(data, &journeySubmitTrigger, "", true, true); err == nil {
		u.JourneySubmitTrigger = &journeySubmitTrigger
		u.Type = AnyTriggerTypeJourneySubmitTrigger
		return nil
	}

	var apiSubmissionTrigger APISubmissionTrigger = APISubmissionTrigger{}
	if err := utils.UnmarshalJSON(data, &apiSubmissionTrigger, "", true, true); err == nil {
		u.APISubmissionTrigger = &apiSubmissionTrigger
		u.Type = AnyTriggerTypeAPISubmissionTrigger
		return nil
	}

	var entityOperationTrigger EntityOperationTrigger = EntityOperationTrigger{}
	if err := utils.UnmarshalJSON(data, &entityOperationTrigger, "", true, true); err == nil {
		u.EntityOperationTrigger = &entityOperationTrigger
		u.Type = AnyTriggerTypeEntityOperationTrigger
		return nil
	}

	var activityTrigger ActivityTrigger = ActivityTrigger{}
	if err := utils.UnmarshalJSON(data, &activityTrigger, "", true, true); err == nil {
		u.ActivityTrigger = &activityTrigger
		u.Type = AnyTriggerTypeActivityTrigger
		return nil
	}

	var entityManualTrigger EntityManualTrigger = EntityManualTrigger{}
	if err := utils.UnmarshalJSON(data, &entityManualTrigger, "", true, true); err == nil {
		u.EntityManualTrigger = &entityManualTrigger
		u.Type = AnyTriggerTypeEntityManualTrigger
		return nil
	}

	var receivedEmailTrigger ReceivedEmailTrigger = ReceivedEmailTrigger{}
	if err := utils.UnmarshalJSON(data, &receivedEmailTrigger, "", true, true); err == nil {
		u.ReceivedEmailTrigger = &receivedEmailTrigger
		u.Type = AnyTriggerTypeReceivedEmailTrigger
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AnyTrigger", string(data))
}

func (u AnyTrigger) MarshalJSON() ([]byte, error) {
	if u.FrontendSubmitTrigger != nil {
		return utils.MarshalJSON(u.FrontendSubmitTrigger, "", true)
	}

	if u.JourneySubmitTrigger != nil {
		return utils.MarshalJSON(u.JourneySubmitTrigger, "", true)
	}

	if u.APISubmissionTrigger != nil {
		return utils.MarshalJSON(u.APISubmissionTrigger, "", true)
	}

	if u.EntityOperationTrigger != nil {
		return utils.MarshalJSON(u.EntityOperationTrigger, "", true)
	}

	if u.ActivityTrigger != nil {
		return utils.MarshalJSON(u.ActivityTrigger, "", true)
	}

	if u.EntityManualTrigger != nil {
		return utils.MarshalJSON(u.EntityManualTrigger, "", true)
	}

	if u.ReceivedEmailTrigger != nil {
		return utils.MarshalJSON(u.ReceivedEmailTrigger, "", true)
	}

	return nil, errors.New("could not marshal union type AnyTrigger: all fields are null")
}
