// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/internal/utils"
)

type MapEntityConfigMappingAttributesType string

const (
	MapEntityConfigMappingAttributesTypeMappingAttributeV2 MapEntityConfigMappingAttributesType = "MappingAttributeV2"
	MapEntityConfigMappingAttributesTypeMappingAttribute   MapEntityConfigMappingAttributesType = "MappingAttribute"
)

type MapEntityConfigMappingAttributes struct {
	MappingAttributeV2 *MappingAttributeV2
	MappingAttribute   *MappingAttribute

	Type MapEntityConfigMappingAttributesType
}

func CreateMapEntityConfigMappingAttributesMappingAttributeV2(mappingAttributeV2 MappingAttributeV2) MapEntityConfigMappingAttributes {
	typ := MapEntityConfigMappingAttributesTypeMappingAttributeV2

	return MapEntityConfigMappingAttributes{
		MappingAttributeV2: &mappingAttributeV2,
		Type:               typ,
	}
}

func CreateMapEntityConfigMappingAttributesMappingAttribute(mappingAttribute MappingAttribute) MapEntityConfigMappingAttributes {
	typ := MapEntityConfigMappingAttributesTypeMappingAttribute

	return MapEntityConfigMappingAttributes{
		MappingAttribute: &mappingAttribute,
		Type:             typ,
	}
}

func (u *MapEntityConfigMappingAttributes) UnmarshalJSON(data []byte) error {

	var mappingAttributeV2 MappingAttributeV2 = MappingAttributeV2{}
	if err := utils.UnmarshalJSON(data, &mappingAttributeV2, "", true, false); err == nil {
		u.MappingAttributeV2 = &mappingAttributeV2
		u.Type = MapEntityConfigMappingAttributesTypeMappingAttributeV2
		return nil
	}

	var mappingAttribute MappingAttribute = MappingAttribute{}
	if err := utils.UnmarshalJSON(data, &mappingAttribute, "", true, false); err == nil {
		u.MappingAttribute = &mappingAttribute
		u.Type = MapEntityConfigMappingAttributesTypeMappingAttribute
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MapEntityConfigMappingAttributes", string(data))
}

func (u MapEntityConfigMappingAttributes) MarshalJSON() ([]byte, error) {
	if u.MappingAttributeV2 != nil {
		return utils.MarshalJSON(u.MappingAttributeV2, "", true)
	}

	if u.MappingAttribute != nil {
		return utils.MarshalJSON(u.MappingAttribute, "", true)
	}

	return nil, errors.New("could not marshal union type MapEntityConfigMappingAttributes: all fields are null")
}

type MapEntityConfig struct {
	// Relation attribute on the main entity where the target entity will be linked. Set to false to disable linkback
	//
	LinkbackRelationAttribute *string `default:"mapped_entities" json:"linkback_relation_attribute"`
	// Relation tags (labels) to include in main entity linkback relation attribute
	LinkbackRelationTags []string `json:"linkback_relation_tags,omitempty"`
	// Attribute mappings
	MappingAttributes []MapEntityConfigMappingAttributes `json:"mapping_attributes,omitempty"`
	MappingConfig     *MappingConfigRef                  `json:"mapping_config,omitempty"`
	// Relation mappings
	RelationAttributes []RelationAttribute `json:"relation_attributes,omitempty"`
	// Schema of target entity
	TargetSchema string `json:"target_schema"`
	// Unique key for target entity (see upsertEntity of Entity API)
	TargetUnique []string `json:"target_unique,omitempty"`
}

func (m MapEntityConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MapEntityConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MapEntityConfig) GetLinkbackRelationAttribute() *string {
	if o == nil {
		return nil
	}
	return o.LinkbackRelationAttribute
}

func (o *MapEntityConfig) GetLinkbackRelationTags() []string {
	if o == nil {
		return nil
	}
	return o.LinkbackRelationTags
}

func (o *MapEntityConfig) GetMappingAttributes() []MapEntityConfigMappingAttributes {
	if o == nil {
		return nil
	}
	return o.MappingAttributes
}

func (o *MapEntityConfig) GetMappingConfig() *MappingConfigRef {
	if o == nil {
		return nil
	}
	return o.MappingConfig
}

func (o *MapEntityConfig) GetRelationAttributes() []RelationAttribute {
	if o == nil {
		return nil
	}
	return o.RelationAttributes
}

func (o *MapEntityConfig) GetTargetSchema() string {
	if o == nil {
		return ""
	}
	return o.TargetSchema
}

func (o *MapEntityConfig) GetTargetUnique() []string {
	if o == nil {
		return nil
	}
	return o.TargetUnique
}
