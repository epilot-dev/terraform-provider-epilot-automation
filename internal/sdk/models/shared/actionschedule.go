// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TimePeriod string

const (
	TimePeriodMinutes TimePeriod = "minutes"
	TimePeriodHours   TimePeriod = "hours"
	TimePeriodDays    TimePeriod = "days"
	TimePeriodWeeks   TimePeriod = "weeks"
	TimePeriodMonths  TimePeriod = "months"
)

func (e TimePeriod) ToPointer() *TimePeriod {
	return &e
}
func (e *TimePeriod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = TimePeriod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimePeriod: %v", v)
	}
}

type TimeRelation string

const (
	TimeRelationAfter  TimeRelation = "after"
	TimeRelationBefore TimeRelation = "before"
)

func (e TimeRelation) ToPointer() *TimeRelation {
	return &e
}
func (e *TimeRelation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "after":
		fallthrough
	case "before":
		*e = TimeRelation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeRelation: %v", v)
	}
}

type ActionSchedule struct {
	// The id of the configured scheduler which will be added on automation triggered
	ConfiguredScheduleID *string `json:"configuredScheduleId,omitempty"`
	// Schedule Id
	ID            string   `json:"id"`
	NumberOfUnits *float64 `json:"numberOfUnits,omitempty"`
	// The source of the schedule_at timestamp that will be used to schedule the action
	Source       ActionScheduleSource `json:"source"`
	TimePeriod   *TimePeriod          `json:"timePeriod,omitempty"`
	TimeRelation *TimeRelation        `json:"timeRelation,omitempty"`
}

func (o *ActionSchedule) GetConfiguredScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.ConfiguredScheduleID
}

func (o *ActionSchedule) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ActionSchedule) GetNumberOfUnits() *float64 {
	if o == nil {
		return nil
	}
	return o.NumberOfUnits
}

func (o *ActionSchedule) GetSource() ActionScheduleSource {
	if o == nil {
		return ActionScheduleSource{}
	}
	return o.Source
}

func (o *ActionSchedule) GetTimePeriod() *TimePeriod {
	if o == nil {
		return nil
	}
	return o.TimePeriod
}

func (o *ActionSchedule) GetTimeRelation() *TimeRelation {
	if o == nil {
		return nil
	}
	return o.TimeRelation
}
