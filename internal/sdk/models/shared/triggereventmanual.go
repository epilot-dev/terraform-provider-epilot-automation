// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TriggerEventManualType string

const (
	TriggerEventManualTypeManual TriggerEventManualType = "manual"
)

func (e TriggerEventManualType) ToPointer() *TriggerEventManualType {
	return &e
}
func (e *TriggerEventManualType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		*e = TriggerEventManualType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerEventManualType: %v", v)
	}
}

type TriggerEventManual struct {
	Caller   *APICallerContext       `json:"caller,omitempty"`
	EntityID string                  `json:"entity_id"`
	OrgID    string                  `json:"org_id"`
	Type     *TriggerEventManualType `json:"type,omitempty"`
}

func (o *TriggerEventManual) GetCaller() *APICallerContext {
	if o == nil {
		return nil
	}
	return o.Caller
}

func (o *TriggerEventManual) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *TriggerEventManual) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *TriggerEventManual) GetType() *TriggerEventManualType {
	if o == nil {
		return nil
	}
	return o.Type
}
