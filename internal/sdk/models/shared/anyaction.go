// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/internal/utils"
)

type AnyActionType string

const (
	AnyActionTypeMapEntityAction       AnyActionType = "MapEntityAction"
	AnyActionTypeTriggerWorkflowAction AnyActionType = "TriggerWorkflowAction"
	AnyActionTypeTriggerWebhookAction  AnyActionType = "TriggerWebhookAction"
	AnyActionTypeCreateDocumentAction  AnyActionType = "CreateDocumentAction"
	AnyActionTypeSendEmailAction       AnyActionType = "SendEmailAction"
	AnyActionTypeCartCheckoutAction    AnyActionType = "CartCheckoutAction"
	AnyActionTypeAutomationAction      AnyActionType = "AutomationAction"
)

type AnyAction struct {
	MapEntityAction       *MapEntityAction
	TriggerWorkflowAction *TriggerWorkflowAction
	TriggerWebhookAction  *TriggerWebhookAction
	CreateDocumentAction  *CreateDocumentAction
	SendEmailAction       *SendEmailAction
	CartCheckoutAction    *CartCheckoutAction
	AutomationAction      *AutomationAction

	Type AnyActionType
}

func CreateAnyActionMapEntityAction(mapEntityAction MapEntityAction) AnyAction {
	typ := AnyActionTypeMapEntityAction

	return AnyAction{
		MapEntityAction: &mapEntityAction,
		Type:            typ,
	}
}

func CreateAnyActionTriggerWorkflowAction(triggerWorkflowAction TriggerWorkflowAction) AnyAction {
	typ := AnyActionTypeTriggerWorkflowAction

	return AnyAction{
		TriggerWorkflowAction: &triggerWorkflowAction,
		Type:                  typ,
	}
}

func CreateAnyActionTriggerWebhookAction(triggerWebhookAction TriggerWebhookAction) AnyAction {
	typ := AnyActionTypeTriggerWebhookAction

	return AnyAction{
		TriggerWebhookAction: &triggerWebhookAction,
		Type:                 typ,
	}
}

func CreateAnyActionCreateDocumentAction(createDocumentAction CreateDocumentAction) AnyAction {
	typ := AnyActionTypeCreateDocumentAction

	return AnyAction{
		CreateDocumentAction: &createDocumentAction,
		Type:                 typ,
	}
}

func CreateAnyActionSendEmailAction(sendEmailAction SendEmailAction) AnyAction {
	typ := AnyActionTypeSendEmailAction

	return AnyAction{
		SendEmailAction: &sendEmailAction,
		Type:            typ,
	}
}

func CreateAnyActionCartCheckoutAction(cartCheckoutAction CartCheckoutAction) AnyAction {
	typ := AnyActionTypeCartCheckoutAction

	return AnyAction{
		CartCheckoutAction: &cartCheckoutAction,
		Type:               typ,
	}
}

func CreateAnyActionAutomationAction(automationAction AutomationAction) AnyAction {
	typ := AnyActionTypeAutomationAction

	return AnyAction{
		AutomationAction: &automationAction,
		Type:             typ,
	}
}

func (u *AnyAction) UnmarshalJSON(data []byte) error {

	var mapEntityAction MapEntityAction = MapEntityAction{}
	if err := utils.UnmarshalJSON(data, &mapEntityAction, "", true, false); err == nil {
		u.MapEntityAction = &mapEntityAction
		u.Type = AnyActionTypeMapEntityAction
		return nil
	}

	var triggerWorkflowAction TriggerWorkflowAction = TriggerWorkflowAction{}
	if err := utils.UnmarshalJSON(data, &triggerWorkflowAction, "", true, false); err == nil {
		u.TriggerWorkflowAction = &triggerWorkflowAction
		u.Type = AnyActionTypeTriggerWorkflowAction
		return nil
	}

	var triggerWebhookAction TriggerWebhookAction = TriggerWebhookAction{}
	if err := utils.UnmarshalJSON(data, &triggerWebhookAction, "", true, false); err == nil {
		u.TriggerWebhookAction = &triggerWebhookAction
		u.Type = AnyActionTypeTriggerWebhookAction
		return nil
	}

	var createDocumentAction CreateDocumentAction = CreateDocumentAction{}
	if err := utils.UnmarshalJSON(data, &createDocumentAction, "", true, false); err == nil {
		u.CreateDocumentAction = &createDocumentAction
		u.Type = AnyActionTypeCreateDocumentAction
		return nil
	}

	var sendEmailAction SendEmailAction = SendEmailAction{}
	if err := utils.UnmarshalJSON(data, &sendEmailAction, "", true, false); err == nil {
		u.SendEmailAction = &sendEmailAction
		u.Type = AnyActionTypeSendEmailAction
		return nil
	}

	var cartCheckoutAction CartCheckoutAction = CartCheckoutAction{}
	if err := utils.UnmarshalJSON(data, &cartCheckoutAction, "", true, false); err == nil {
		u.CartCheckoutAction = &cartCheckoutAction
		u.Type = AnyActionTypeCartCheckoutAction
		return nil
	}

	var automationAction AutomationAction = AutomationAction{}
	if err := utils.UnmarshalJSON(data, &automationAction, "", true, false); err == nil {
		u.AutomationAction = &automationAction
		u.Type = AnyActionTypeAutomationAction
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AnyAction", string(data))
}

func (u AnyAction) MarshalJSON() ([]byte, error) {
	if u.MapEntityAction != nil {
		return utils.MarshalJSON(u.MapEntityAction, "", true)
	}

	if u.TriggerWorkflowAction != nil {
		return utils.MarshalJSON(u.TriggerWorkflowAction, "", true)
	}

	if u.TriggerWebhookAction != nil {
		return utils.MarshalJSON(u.TriggerWebhookAction, "", true)
	}

	if u.CreateDocumentAction != nil {
		return utils.MarshalJSON(u.CreateDocumentAction, "", true)
	}

	if u.SendEmailAction != nil {
		return utils.MarshalJSON(u.SendEmailAction, "", true)
	}

	if u.CartCheckoutAction != nil {
		return utils.MarshalJSON(u.CartCheckoutAction, "", true)
	}

	if u.AutomationAction != nil {
		return utils.MarshalJSON(u.AutomationAction, "", true)
	}

	return nil, errors.New("could not marshal union type AnyAction: all fields are null")
}
