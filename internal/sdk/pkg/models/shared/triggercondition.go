// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type TriggerConditionValueType string

const (
	TriggerConditionValueTypeStr           TriggerConditionValueType = "str"
	TriggerConditionValueTypeNumber        TriggerConditionValueType = "number"
	TriggerConditionValueTypeArrayOfStr    TriggerConditionValueType = "arrayOfStr"
	TriggerConditionValueTypeArrayOfNumber TriggerConditionValueType = "arrayOfNumber"
)

type TriggerConditionValue struct {
	Str           *string
	Number        *float64
	ArrayOfStr    []string
	ArrayOfNumber []float64

	Type TriggerConditionValueType
}

func CreateTriggerConditionValueStr(str string) TriggerConditionValue {
	typ := TriggerConditionValueTypeStr

	return TriggerConditionValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateTriggerConditionValueNumber(number float64) TriggerConditionValue {
	typ := TriggerConditionValueTypeNumber

	return TriggerConditionValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateTriggerConditionValueArrayOfStr(arrayOfStr []string) TriggerConditionValue {
	typ := TriggerConditionValueTypeArrayOfStr

	return TriggerConditionValue{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateTriggerConditionValueArrayOfNumber(arrayOfNumber []float64) TriggerConditionValue {
	typ := TriggerConditionValueTypeArrayOfNumber

	return TriggerConditionValue{
		ArrayOfNumber: arrayOfNumber,
		Type:          typ,
	}
}

func (u *TriggerConditionValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = TriggerConditionValueTypeStr
		return nil
	}

	number := new(float64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&number); err == nil {
		u.Number = number
		u.Type = TriggerConditionValueTypeNumber
		return nil
	}

	arrayOfStr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfStr); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = TriggerConditionValueTypeArrayOfStr
		return nil
	}

	arrayOfNumber := []float64{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfNumber); err == nil {
		u.ArrayOfNumber = arrayOfNumber
		u.Type = TriggerConditionValueTypeArrayOfNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TriggerConditionValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Number != nil {
		return json.Marshal(u.Number)
	}

	if u.ArrayOfStr != nil {
		return json.Marshal(u.ArrayOfStr)
	}

	if u.ArrayOfNumber != nil {
		return json.Marshal(u.ArrayOfNumber)
	}

	return nil, nil
}

type TriggerCondition struct {
	Comparison ComparisonEnum         `json:"comparison"`
	Source     string                 `json:"source"`
	Value      *TriggerConditionValue `json:"value,omitempty"`
}
