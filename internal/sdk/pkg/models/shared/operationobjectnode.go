// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type OperationObjectNodeUniqType string

const (
	OperationObjectNodeUniqTypeBoolean    OperationObjectNodeUniqType = "boolean"
	OperationObjectNodeUniqTypeArrayOfstr OperationObjectNodeUniqType = "arrayOfstr"
)

type OperationObjectNodeUniq struct {
	Boolean    *bool
	ArrayOfstr []string

	Type OperationObjectNodeUniqType
}

func CreateOperationObjectNodeUniqBoolean(boolean bool) OperationObjectNodeUniq {
	typ := OperationObjectNodeUniqTypeBoolean

	return OperationObjectNodeUniq{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateOperationObjectNodeUniqArrayOfstr(arrayOfstr []string) OperationObjectNodeUniq {
	typ := OperationObjectNodeUniqTypeArrayOfstr

	return OperationObjectNodeUniq{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *OperationObjectNodeUniq) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = OperationObjectNodeUniqTypeBoolean
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = OperationObjectNodeUniqTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OperationObjectNodeUniq) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

// OperationObjectNode - Mapping operation nodes are either primitive values or operation node objects
type OperationObjectNode struct {
	// Append to array
	Append []interface{} `json:"_append,omitempty"`
	// Copy JSONPath value from source entity context
	Copy *string     `json:"_copy,omitempty"`
	Set  interface{} `json:"_set,omitempty"`
	// Unique array
	Uniq *OperationObjectNodeUniq `json:"_uniq,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _OperationObjectNode OperationObjectNode

func (c *OperationObjectNode) UnmarshalJSON(bs []byte) error {
	data := _OperationObjectNode{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = OperationObjectNode(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "_append")
	delete(additionalFields, "_copy")
	delete(additionalFields, "_set")
	delete(additionalFields, "_uniq")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c OperationObjectNode) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_OperationObjectNode(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
