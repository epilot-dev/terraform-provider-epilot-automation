// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Configuration struct {
	Schema *string       `json:"schema,omitempty"`
	Types  []interface{} `json:"types,omitempty"`
}

func (o *Configuration) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *Configuration) GetTypes() []interface{} {
	if o == nil {
		return nil
	}
	return o.Types
}

type Type string

const (
	TypeActivity Type = "activity"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "activity":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type ActivityTrigger struct {
	Configuration Configuration `json:"configuration"`
	Type          Type          `json:"type"`
}

func (o *ActivityTrigger) GetConfiguration() Configuration {
	if o == nil {
		return Configuration{}
	}
	return o.Configuration
}

func (o *ActivityTrigger) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}
