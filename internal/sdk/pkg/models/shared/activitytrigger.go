// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ActivityTriggerConfigurationTypes string

const (
	ActivityTriggerConfigurationTypesCreateMeterReading ActivityTriggerConfigurationTypes = "CreateMeterReading"
	ActivityTriggerConfigurationTypesUpdateMeterReading ActivityTriggerConfigurationTypes = "UpdateMeterReading"
	ActivityTriggerConfigurationTypesMessageActivity    ActivityTriggerConfigurationTypes = "MessageActivity"
	ActivityTriggerConfigurationTypesSyncActivity       ActivityTriggerConfigurationTypes = "SyncActivity"
)

func (e ActivityTriggerConfigurationTypes) ToPointer() *ActivityTriggerConfigurationTypes {
	return &e
}

func (e *ActivityTriggerConfigurationTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateMeterReading":
		fallthrough
	case "UpdateMeterReading":
		fallthrough
	case "MessageActivity":
		fallthrough
	case "SyncActivity":
		*e = ActivityTriggerConfigurationTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityTriggerConfigurationTypes: %v", v)
	}
}

type ActivityTriggerConfiguration struct {
	Schema *string                             `json:"schema,omitempty"`
	Types  []ActivityTriggerConfigurationTypes `json:"types,omitempty"`
}

type ActivityTriggerType string

const (
	ActivityTriggerTypeActivity ActivityTriggerType = "activity"
)

func (e ActivityTriggerType) ToPointer() *ActivityTriggerType {
	return &e
}

func (e *ActivityTriggerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "activity":
		*e = ActivityTriggerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityTriggerType: %v", v)
	}
}

type ActivityTrigger struct {
	Configuration ActivityTriggerConfiguration `json:"configuration"`
	Type          ActivityTriggerType          `json:"type"`
}
