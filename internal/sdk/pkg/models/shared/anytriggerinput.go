// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/pkg/utils"
)

type AnyTriggerInputType string

const (
	AnyTriggerInputTypeFrontendSubmitTrigger  AnyTriggerInputType = "FrontendSubmitTrigger"
	AnyTriggerInputTypeJourneySubmitTrigger   AnyTriggerInputType = "JourneySubmitTrigger"
	AnyTriggerInputTypeAPISubmissionTrigger   AnyTriggerInputType = "ApiSubmissionTrigger"
	AnyTriggerInputTypeEntityOperationTrigger AnyTriggerInputType = "EntityOperationTrigger"
	AnyTriggerInputTypeActivityTrigger        AnyTriggerInputType = "ActivityTrigger"
	AnyTriggerInputTypeEntityManualTrigger    AnyTriggerInputType = "EntityManualTrigger"
	AnyTriggerInputTypeReceivedEmailTrigger   AnyTriggerInputType = "ReceivedEmailTrigger"
)

type AnyTriggerInput struct {
	FrontendSubmitTrigger  *FrontendSubmitTrigger
	JourneySubmitTrigger   *JourneySubmitTrigger
	APISubmissionTrigger   *APISubmissionTrigger
	EntityOperationTrigger *EntityOperationTrigger
	ActivityTrigger        *ActivityTrigger
	EntityManualTrigger    *EntityManualTrigger
	ReceivedEmailTrigger   *ReceivedEmailTrigger

	Type AnyTriggerInputType
}

func CreateAnyTriggerInputFrontendSubmitTrigger(frontendSubmitTrigger FrontendSubmitTrigger) AnyTriggerInput {
	typ := AnyTriggerInputTypeFrontendSubmitTrigger

	return AnyTriggerInput{
		FrontendSubmitTrigger: &frontendSubmitTrigger,
		Type:                  typ,
	}
}

func CreateAnyTriggerInputJourneySubmitTrigger(journeySubmitTrigger JourneySubmitTrigger) AnyTriggerInput {
	typ := AnyTriggerInputTypeJourneySubmitTrigger

	return AnyTriggerInput{
		JourneySubmitTrigger: &journeySubmitTrigger,
		Type:                 typ,
	}
}

func CreateAnyTriggerInputAPISubmissionTrigger(apiSubmissionTrigger APISubmissionTrigger) AnyTriggerInput {
	typ := AnyTriggerInputTypeAPISubmissionTrigger

	return AnyTriggerInput{
		APISubmissionTrigger: &apiSubmissionTrigger,
		Type:                 typ,
	}
}

func CreateAnyTriggerInputEntityOperationTrigger(entityOperationTrigger EntityOperationTrigger) AnyTriggerInput {
	typ := AnyTriggerInputTypeEntityOperationTrigger

	return AnyTriggerInput{
		EntityOperationTrigger: &entityOperationTrigger,
		Type:                   typ,
	}
}

func CreateAnyTriggerInputActivityTrigger(activityTrigger ActivityTrigger) AnyTriggerInput {
	typ := AnyTriggerInputTypeActivityTrigger

	return AnyTriggerInput{
		ActivityTrigger: &activityTrigger,
		Type:            typ,
	}
}

func CreateAnyTriggerInputEntityManualTrigger(entityManualTrigger EntityManualTrigger) AnyTriggerInput {
	typ := AnyTriggerInputTypeEntityManualTrigger

	return AnyTriggerInput{
		EntityManualTrigger: &entityManualTrigger,
		Type:                typ,
	}
}

func CreateAnyTriggerInputReceivedEmailTrigger(receivedEmailTrigger ReceivedEmailTrigger) AnyTriggerInput {
	typ := AnyTriggerInputTypeReceivedEmailTrigger

	return AnyTriggerInput{
		ReceivedEmailTrigger: &receivedEmailTrigger,
		Type:                 typ,
	}
}

func (u *AnyTriggerInput) UnmarshalJSON(data []byte) error {

	frontendSubmitTrigger := new(FrontendSubmitTrigger)
	if err := utils.UnmarshalJSON(data, &frontendSubmitTrigger, "", true, true); err == nil {
		u.FrontendSubmitTrigger = frontendSubmitTrigger
		u.Type = AnyTriggerInputTypeFrontendSubmitTrigger
		return nil
	}

	journeySubmitTrigger := new(JourneySubmitTrigger)
	if err := utils.UnmarshalJSON(data, &journeySubmitTrigger, "", true, true); err == nil {
		u.JourneySubmitTrigger = journeySubmitTrigger
		u.Type = AnyTriggerInputTypeJourneySubmitTrigger
		return nil
	}

	apiSubmissionTrigger := new(APISubmissionTrigger)
	if err := utils.UnmarshalJSON(data, &apiSubmissionTrigger, "", true, true); err == nil {
		u.APISubmissionTrigger = apiSubmissionTrigger
		u.Type = AnyTriggerInputTypeAPISubmissionTrigger
		return nil
	}

	entityOperationTrigger := new(EntityOperationTrigger)
	if err := utils.UnmarshalJSON(data, &entityOperationTrigger, "", true, true); err == nil {
		u.EntityOperationTrigger = entityOperationTrigger
		u.Type = AnyTriggerInputTypeEntityOperationTrigger
		return nil
	}

	activityTrigger := new(ActivityTrigger)
	if err := utils.UnmarshalJSON(data, &activityTrigger, "", true, true); err == nil {
		u.ActivityTrigger = activityTrigger
		u.Type = AnyTriggerInputTypeActivityTrigger
		return nil
	}

	entityManualTrigger := new(EntityManualTrigger)
	if err := utils.UnmarshalJSON(data, &entityManualTrigger, "", true, true); err == nil {
		u.EntityManualTrigger = entityManualTrigger
		u.Type = AnyTriggerInputTypeEntityManualTrigger
		return nil
	}

	receivedEmailTrigger := new(ReceivedEmailTrigger)
	if err := utils.UnmarshalJSON(data, &receivedEmailTrigger, "", true, true); err == nil {
		u.ReceivedEmailTrigger = receivedEmailTrigger
		u.Type = AnyTriggerInputTypeReceivedEmailTrigger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AnyTriggerInput) MarshalJSON() ([]byte, error) {
	if u.FrontendSubmitTrigger != nil {
		return utils.MarshalJSON(u.FrontendSubmitTrigger, "", true)
	}

	if u.JourneySubmitTrigger != nil {
		return utils.MarshalJSON(u.JourneySubmitTrigger, "", true)
	}

	if u.APISubmissionTrigger != nil {
		return utils.MarshalJSON(u.APISubmissionTrigger, "", true)
	}

	if u.EntityOperationTrigger != nil {
		return utils.MarshalJSON(u.EntityOperationTrigger, "", true)
	}

	if u.ActivityTrigger != nil {
		return utils.MarshalJSON(u.ActivityTrigger, "", true)
	}

	if u.EntityManualTrigger != nil {
		return utils.MarshalJSON(u.EntityManualTrigger, "", true)
	}

	if u.ReceivedEmailTrigger != nil {
		return utils.MarshalJSON(u.ReceivedEmailTrigger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
