// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/pkg/utils"
)

type TriggerWorkflowConditionValueType string

const (
	TriggerWorkflowConditionValueTypeStr           TriggerWorkflowConditionValueType = "str"
	TriggerWorkflowConditionValueTypeNumber        TriggerWorkflowConditionValueType = "number"
	TriggerWorkflowConditionValueTypeArrayOfstr    TriggerWorkflowConditionValueType = "arrayOfstr"
	TriggerWorkflowConditionValueTypeArrayOfnumber TriggerWorkflowConditionValueType = "arrayOfnumber"
)

type TriggerWorkflowConditionValue struct {
	Str           *string
	Number        *float64
	ArrayOfstr    []string
	ArrayOfnumber []float64

	Type TriggerWorkflowConditionValueType
}

func CreateTriggerWorkflowConditionValueStr(str string) TriggerWorkflowConditionValue {
	typ := TriggerWorkflowConditionValueTypeStr

	return TriggerWorkflowConditionValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateTriggerWorkflowConditionValueNumber(number float64) TriggerWorkflowConditionValue {
	typ := TriggerWorkflowConditionValueTypeNumber

	return TriggerWorkflowConditionValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateTriggerWorkflowConditionValueArrayOfstr(arrayOfstr []string) TriggerWorkflowConditionValue {
	typ := TriggerWorkflowConditionValueTypeArrayOfstr

	return TriggerWorkflowConditionValue{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func CreateTriggerWorkflowConditionValueArrayOfnumber(arrayOfnumber []float64) TriggerWorkflowConditionValue {
	typ := TriggerWorkflowConditionValueTypeArrayOfnumber

	return TriggerWorkflowConditionValue{
		ArrayOfnumber: arrayOfnumber,
		Type:          typ,
	}
}

func (u *TriggerWorkflowConditionValue) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = TriggerWorkflowConditionValueTypeStr
		return nil
	}

	number := new(float64)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = number
		u.Type = TriggerWorkflowConditionValueTypeNumber
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = TriggerWorkflowConditionValueTypeArrayOfstr
		return nil
	}

	arrayOfnumber := []float64{}
	if err := utils.UnmarshalJSON(data, &arrayOfnumber, "", true, true); err == nil {
		u.ArrayOfnumber = arrayOfnumber
		u.Type = TriggerWorkflowConditionValueTypeArrayOfnumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TriggerWorkflowConditionValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	if u.ArrayOfnumber != nil {
		return utils.MarshalJSON(u.ArrayOfnumber, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TriggerWorkflowCondition struct {
	Comparison Comparison                     `json:"comparison"`
	Schema     string                         `json:"schema"`
	Source     string                         `json:"source"`
	Value      *TriggerWorkflowConditionValue `json:"value,omitempty"`
}

func (o *TriggerWorkflowCondition) GetComparison() Comparison {
	if o == nil {
		return Comparison("")
	}
	return o.Comparison
}

func (o *TriggerWorkflowCondition) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *TriggerWorkflowCondition) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

func (o *TriggerWorkflowCondition) GetValue() *TriggerWorkflowConditionValue {
	if o == nil {
		return nil
	}
	return o.Value
}
