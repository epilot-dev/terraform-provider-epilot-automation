// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type TriggerWorkflowConditionValueType string

const (
	TriggerWorkflowConditionValueTypeStr           TriggerWorkflowConditionValueType = "str"
	TriggerWorkflowConditionValueTypeNumber        TriggerWorkflowConditionValueType = "number"
	TriggerWorkflowConditionValueTypeArrayOfstr    TriggerWorkflowConditionValueType = "arrayOfstr"
	TriggerWorkflowConditionValueTypeArrayOfnumber TriggerWorkflowConditionValueType = "arrayOfnumber"
)

type TriggerWorkflowConditionValue struct {
	Str           *string
	Number        *float64
	ArrayOfstr    []string
	ArrayOfnumber []float64

	Type TriggerWorkflowConditionValueType
}

func CreateTriggerWorkflowConditionValueStr(str string) TriggerWorkflowConditionValue {
	typ := TriggerWorkflowConditionValueTypeStr

	return TriggerWorkflowConditionValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateTriggerWorkflowConditionValueNumber(number float64) TriggerWorkflowConditionValue {
	typ := TriggerWorkflowConditionValueTypeNumber

	return TriggerWorkflowConditionValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateTriggerWorkflowConditionValueArrayOfstr(arrayOfstr []string) TriggerWorkflowConditionValue {
	typ := TriggerWorkflowConditionValueTypeArrayOfstr

	return TriggerWorkflowConditionValue{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func CreateTriggerWorkflowConditionValueArrayOfnumber(arrayOfnumber []float64) TriggerWorkflowConditionValue {
	typ := TriggerWorkflowConditionValueTypeArrayOfnumber

	return TriggerWorkflowConditionValue{
		ArrayOfnumber: arrayOfnumber,
		Type:          typ,
	}
}

func (u *TriggerWorkflowConditionValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = TriggerWorkflowConditionValueTypeStr
		return nil
	}

	number := new(float64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&number); err == nil {
		u.Number = number
		u.Type = TriggerWorkflowConditionValueTypeNumber
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = TriggerWorkflowConditionValueTypeArrayOfstr
		return nil
	}

	arrayOfnumber := []float64{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfnumber); err == nil {
		u.ArrayOfnumber = arrayOfnumber
		u.Type = TriggerWorkflowConditionValueTypeArrayOfnumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TriggerWorkflowConditionValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Number != nil {
		return json.Marshal(u.Number)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	if u.ArrayOfnumber != nil {
		return json.Marshal(u.ArrayOfnumber)
	}

	return nil, nil
}

type TriggerWorkflowCondition struct {
	Comparison Comparison                     `json:"comparison"`
	Schema     string                         `json:"schema"`
	Source     string                         `json:"source"`
	Value      *TriggerWorkflowConditionValue `json:"value,omitempty"`
}
