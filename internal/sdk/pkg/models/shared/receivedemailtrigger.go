// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ReceivedEmailTriggerConfigurationMessageTypeEnum string

const (
	ReceivedEmailTriggerConfigurationMessageTypeEnumReceived ReceivedEmailTriggerConfigurationMessageTypeEnum = "RECEIVED"
)

func (e ReceivedEmailTriggerConfigurationMessageTypeEnum) ToPointer() *ReceivedEmailTriggerConfigurationMessageTypeEnum {
	return &e
}

func (e *ReceivedEmailTriggerConfigurationMessageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECEIVED":
		*e = ReceivedEmailTriggerConfigurationMessageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReceivedEmailTriggerConfigurationMessageTypeEnum: %v", v)
	}
}

type ReceivedEmailTriggerConfiguration struct {
	MessageType *ReceivedEmailTriggerConfigurationMessageTypeEnum `json:"message_type,omitempty"`
}

type ReceivedEmailTriggerTypeEnum string

const (
	ReceivedEmailTriggerTypeEnumReceivedEmail ReceivedEmailTriggerTypeEnum = "received_email"
)

func (e ReceivedEmailTriggerTypeEnum) ToPointer() *ReceivedEmailTriggerTypeEnum {
	return &e
}

func (e *ReceivedEmailTriggerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "received_email":
		*e = ReceivedEmailTriggerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReceivedEmailTriggerTypeEnum: %v", v)
	}
}

type ReceivedEmailTrigger struct {
	Configuration ReceivedEmailTriggerConfiguration `json:"configuration"`
	Type          ReceivedEmailTriggerTypeEnum      `json:"type"`
}
