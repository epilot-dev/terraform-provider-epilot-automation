// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ReceivedEmailTriggerConfigurationMessageType string

const (
	ReceivedEmailTriggerConfigurationMessageTypeReceived ReceivedEmailTriggerConfigurationMessageType = "RECEIVED"
)

func (e ReceivedEmailTriggerConfigurationMessageType) ToPointer() *ReceivedEmailTriggerConfigurationMessageType {
	return &e
}

func (e *ReceivedEmailTriggerConfigurationMessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECEIVED":
		*e = ReceivedEmailTriggerConfigurationMessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReceivedEmailTriggerConfigurationMessageType: %v", v)
	}
}

type ReceivedEmailTriggerConfiguration struct {
	MessageType *ReceivedEmailTriggerConfigurationMessageType `json:"message_type,omitempty"`
}

type ReceivedEmailTriggerType string

const (
	ReceivedEmailTriggerTypeReceivedEmail ReceivedEmailTriggerType = "received_email"
)

func (e ReceivedEmailTriggerType) ToPointer() *ReceivedEmailTriggerType {
	return &e
}

func (e *ReceivedEmailTriggerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "received_email":
		*e = ReceivedEmailTriggerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReceivedEmailTriggerType: %v", v)
	}
}

type ReceivedEmailTrigger struct {
	Configuration ReceivedEmailTriggerConfiguration `json:"configuration"`
	Type          ReceivedEmailTriggerType          `json:"type"`
}
