// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/pkg/utils"
)

type AnyActionConfigType string

const (
	AnyActionConfigTypeMapEntityActionConfig       AnyActionConfigType = "MapEntityActionConfig"
	AnyActionConfigTypeTriggerWorkflowActionConfig AnyActionConfigType = "TriggerWorkflowActionConfig"
	AnyActionConfigTypeTriggerWebhookActionConfig  AnyActionConfigType = "TriggerWebhookActionConfig"
	AnyActionConfigTypeCreateDocumentActionConfig  AnyActionConfigType = "CreateDocumentActionConfig"
	AnyActionConfigTypeSendEmailActionConfig       AnyActionConfigType = "SendEmailActionConfig"
	AnyActionConfigTypeCartCheckoutActionConfig    AnyActionConfigType = "CartCheckoutActionConfig"
	AnyActionConfigTypeAutomationActionConfig      AnyActionConfigType = "AutomationActionConfig"
)

type AnyActionConfig struct {
	MapEntityActionConfig       *MapEntityActionConfig
	TriggerWorkflowActionConfig *TriggerWorkflowActionConfig
	TriggerWebhookActionConfig  *TriggerWebhookActionConfig
	CreateDocumentActionConfig  *CreateDocumentActionConfig
	SendEmailActionConfig       *SendEmailActionConfig
	CartCheckoutActionConfig    *CartCheckoutActionConfig
	AutomationActionConfig      *AutomationActionConfig

	Type AnyActionConfigType
}

func CreateAnyActionConfigMapEntityActionConfig(mapEntityActionConfig MapEntityActionConfig) AnyActionConfig {
	typ := AnyActionConfigTypeMapEntityActionConfig

	return AnyActionConfig{
		MapEntityActionConfig: &mapEntityActionConfig,
		Type:                  typ,
	}
}

func CreateAnyActionConfigTriggerWorkflowActionConfig(triggerWorkflowActionConfig TriggerWorkflowActionConfig) AnyActionConfig {
	typ := AnyActionConfigTypeTriggerWorkflowActionConfig

	return AnyActionConfig{
		TriggerWorkflowActionConfig: &triggerWorkflowActionConfig,
		Type:                        typ,
	}
}

func CreateAnyActionConfigTriggerWebhookActionConfig(triggerWebhookActionConfig TriggerWebhookActionConfig) AnyActionConfig {
	typ := AnyActionConfigTypeTriggerWebhookActionConfig

	return AnyActionConfig{
		TriggerWebhookActionConfig: &triggerWebhookActionConfig,
		Type:                       typ,
	}
}

func CreateAnyActionConfigCreateDocumentActionConfig(createDocumentActionConfig CreateDocumentActionConfig) AnyActionConfig {
	typ := AnyActionConfigTypeCreateDocumentActionConfig

	return AnyActionConfig{
		CreateDocumentActionConfig: &createDocumentActionConfig,
		Type:                       typ,
	}
}

func CreateAnyActionConfigSendEmailActionConfig(sendEmailActionConfig SendEmailActionConfig) AnyActionConfig {
	typ := AnyActionConfigTypeSendEmailActionConfig

	return AnyActionConfig{
		SendEmailActionConfig: &sendEmailActionConfig,
		Type:                  typ,
	}
}

func CreateAnyActionConfigCartCheckoutActionConfig(cartCheckoutActionConfig CartCheckoutActionConfig) AnyActionConfig {
	typ := AnyActionConfigTypeCartCheckoutActionConfig

	return AnyActionConfig{
		CartCheckoutActionConfig: &cartCheckoutActionConfig,
		Type:                     typ,
	}
}

func CreateAnyActionConfigAutomationActionConfig(automationActionConfig AutomationActionConfig) AnyActionConfig {
	typ := AnyActionConfigTypeAutomationActionConfig

	return AnyActionConfig{
		AutomationActionConfig: &automationActionConfig,
		Type:                   typ,
	}
}

func (u *AnyActionConfig) UnmarshalJSON(data []byte) error {

	mapEntityActionConfig := new(MapEntityActionConfig)
	if err := utils.UnmarshalJSON(data, &mapEntityActionConfig, "", true, true); err == nil {
		u.MapEntityActionConfig = mapEntityActionConfig
		u.Type = AnyActionConfigTypeMapEntityActionConfig
		return nil
	}

	triggerWorkflowActionConfig := new(TriggerWorkflowActionConfig)
	if err := utils.UnmarshalJSON(data, &triggerWorkflowActionConfig, "", true, true); err == nil {
		u.TriggerWorkflowActionConfig = triggerWorkflowActionConfig
		u.Type = AnyActionConfigTypeTriggerWorkflowActionConfig
		return nil
	}

	triggerWebhookActionConfig := new(TriggerWebhookActionConfig)
	if err := utils.UnmarshalJSON(data, &triggerWebhookActionConfig, "", true, true); err == nil {
		u.TriggerWebhookActionConfig = triggerWebhookActionConfig
		u.Type = AnyActionConfigTypeTriggerWebhookActionConfig
		return nil
	}

	createDocumentActionConfig := new(CreateDocumentActionConfig)
	if err := utils.UnmarshalJSON(data, &createDocumentActionConfig, "", true, true); err == nil {
		u.CreateDocumentActionConfig = createDocumentActionConfig
		u.Type = AnyActionConfigTypeCreateDocumentActionConfig
		return nil
	}

	sendEmailActionConfig := new(SendEmailActionConfig)
	if err := utils.UnmarshalJSON(data, &sendEmailActionConfig, "", true, true); err == nil {
		u.SendEmailActionConfig = sendEmailActionConfig
		u.Type = AnyActionConfigTypeSendEmailActionConfig
		return nil
	}

	cartCheckoutActionConfig := new(CartCheckoutActionConfig)
	if err := utils.UnmarshalJSON(data, &cartCheckoutActionConfig, "", true, true); err == nil {
		u.CartCheckoutActionConfig = cartCheckoutActionConfig
		u.Type = AnyActionConfigTypeCartCheckoutActionConfig
		return nil
	}

	automationActionConfig := new(AutomationActionConfig)
	if err := utils.UnmarshalJSON(data, &automationActionConfig, "", true, true); err == nil {
		u.AutomationActionConfig = automationActionConfig
		u.Type = AnyActionConfigTypeAutomationActionConfig
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AnyActionConfig) MarshalJSON() ([]byte, error) {
	if u.MapEntityActionConfig != nil {
		return utils.MarshalJSON(u.MapEntityActionConfig, "", true)
	}

	if u.TriggerWorkflowActionConfig != nil {
		return utils.MarshalJSON(u.TriggerWorkflowActionConfig, "", true)
	}

	if u.TriggerWebhookActionConfig != nil {
		return utils.MarshalJSON(u.TriggerWebhookActionConfig, "", true)
	}

	if u.CreateDocumentActionConfig != nil {
		return utils.MarshalJSON(u.CreateDocumentActionConfig, "", true)
	}

	if u.SendEmailActionConfig != nil {
		return utils.MarshalJSON(u.SendEmailActionConfig, "", true)
	}

	if u.CartCheckoutActionConfig != nil {
		return utils.MarshalJSON(u.CartCheckoutActionConfig, "", true)
	}

	if u.AutomationActionConfig != nil {
		return utils.MarshalJSON(u.AutomationActionConfig, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
