// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type MappingAttributeType string

const (
	MappingAttributeTypeSetValueMapper    MappingAttributeType = "SetValueMapper"
	MappingAttributeTypeCopyValueMapper   MappingAttributeType = "CopyValueMapper"
	MappingAttributeTypeAppendValueMapper MappingAttributeType = "AppendValueMapper"
)

type MappingAttribute struct {
	SetValueMapper    *SetValueMapper
	CopyValueMapper   *CopyValueMapper
	AppendValueMapper *AppendValueMapper

	Type MappingAttributeType
}

func CreateMappingAttributeSetValueMapper(setValueMapper SetValueMapper) MappingAttribute {
	typ := MappingAttributeTypeSetValueMapper

	return MappingAttribute{
		SetValueMapper: &setValueMapper,
		Type:           typ,
	}
}

func CreateMappingAttributeCopyValueMapper(copyValueMapper CopyValueMapper) MappingAttribute {
	typ := MappingAttributeTypeCopyValueMapper

	return MappingAttribute{
		CopyValueMapper: &copyValueMapper,
		Type:            typ,
	}
}

func CreateMappingAttributeAppendValueMapper(appendValueMapper AppendValueMapper) MappingAttribute {
	typ := MappingAttributeTypeAppendValueMapper

	return MappingAttribute{
		AppendValueMapper: &appendValueMapper,
		Type:              typ,
	}
}

func (u *MappingAttribute) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	setValueMapper := new(SetValueMapper)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&setValueMapper); err == nil {
		u.SetValueMapper = setValueMapper
		u.Type = MappingAttributeTypeSetValueMapper
		return nil
	}

	copyValueMapper := new(CopyValueMapper)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&copyValueMapper); err == nil {
		u.CopyValueMapper = copyValueMapper
		u.Type = MappingAttributeTypeCopyValueMapper
		return nil
	}

	appendValueMapper := new(AppendValueMapper)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&appendValueMapper); err == nil {
		u.AppendValueMapper = appendValueMapper
		u.Type = MappingAttributeTypeAppendValueMapper
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u MappingAttribute) MarshalJSON() ([]byte, error) {
	if u.SetValueMapper != nil {
		return json.Marshal(u.SetValueMapper)
	}

	if u.CopyValueMapper != nil {
		return json.Marshal(u.CopyValueMapper)
	}

	if u.AppendValueMapper != nil {
		return json.Marshal(u.AppendValueMapper)
	}

	return nil, nil
}
