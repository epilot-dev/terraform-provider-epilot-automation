// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type AnyTriggerType string

const (
	AnyTriggerTypeFrontendSubmitTrigger  AnyTriggerType = "FrontendSubmitTrigger"
	AnyTriggerTypeJourneySubmitTrigger   AnyTriggerType = "JourneySubmitTrigger"
	AnyTriggerTypeAPISubmissionTrigger   AnyTriggerType = "ApiSubmissionTrigger"
	AnyTriggerTypeEntityOperationTrigger AnyTriggerType = "EntityOperationTrigger"
	AnyTriggerTypeActivityTrigger        AnyTriggerType = "ActivityTrigger"
	AnyTriggerTypeEntityManualTrigger    AnyTriggerType = "EntityManualTrigger"
	AnyTriggerTypeReceivedEmailTrigger   AnyTriggerType = "ReceivedEmailTrigger"
)

type AnyTrigger struct {
	FrontendSubmitTrigger  *FrontendSubmitTrigger
	JourneySubmitTrigger   *JourneySubmitTrigger
	APISubmissionTrigger   *APISubmissionTrigger
	EntityOperationTrigger *EntityOperationTrigger
	ActivityTrigger        *ActivityTrigger
	EntityManualTrigger    *EntityManualTrigger
	ReceivedEmailTrigger   *ReceivedEmailTrigger

	Type AnyTriggerType
}

func CreateAnyTriggerFrontendSubmitTrigger(frontendSubmitTrigger FrontendSubmitTrigger) AnyTrigger {
	typ := AnyTriggerTypeFrontendSubmitTrigger

	return AnyTrigger{
		FrontendSubmitTrigger: &frontendSubmitTrigger,
		Type:                  typ,
	}
}

func CreateAnyTriggerJourneySubmitTrigger(journeySubmitTrigger JourneySubmitTrigger) AnyTrigger {
	typ := AnyTriggerTypeJourneySubmitTrigger

	return AnyTrigger{
		JourneySubmitTrigger: &journeySubmitTrigger,
		Type:                 typ,
	}
}

func CreateAnyTriggerAPISubmissionTrigger(apiSubmissionTrigger APISubmissionTrigger) AnyTrigger {
	typ := AnyTriggerTypeAPISubmissionTrigger

	return AnyTrigger{
		APISubmissionTrigger: &apiSubmissionTrigger,
		Type:                 typ,
	}
}

func CreateAnyTriggerEntityOperationTrigger(entityOperationTrigger EntityOperationTrigger) AnyTrigger {
	typ := AnyTriggerTypeEntityOperationTrigger

	return AnyTrigger{
		EntityOperationTrigger: &entityOperationTrigger,
		Type:                   typ,
	}
}

func CreateAnyTriggerActivityTrigger(activityTrigger ActivityTrigger) AnyTrigger {
	typ := AnyTriggerTypeActivityTrigger

	return AnyTrigger{
		ActivityTrigger: &activityTrigger,
		Type:            typ,
	}
}

func CreateAnyTriggerEntityManualTrigger(entityManualTrigger EntityManualTrigger) AnyTrigger {
	typ := AnyTriggerTypeEntityManualTrigger

	return AnyTrigger{
		EntityManualTrigger: &entityManualTrigger,
		Type:                typ,
	}
}

func CreateAnyTriggerReceivedEmailTrigger(receivedEmailTrigger ReceivedEmailTrigger) AnyTrigger {
	typ := AnyTriggerTypeReceivedEmailTrigger

	return AnyTrigger{
		ReceivedEmailTrigger: &receivedEmailTrigger,
		Type:                 typ,
	}
}

func (u *AnyTrigger) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	frontendSubmitTrigger := new(FrontendSubmitTrigger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&frontendSubmitTrigger); err == nil {
		u.FrontendSubmitTrigger = frontendSubmitTrigger
		u.Type = AnyTriggerTypeFrontendSubmitTrigger
		return nil
	}

	journeySubmitTrigger := new(JourneySubmitTrigger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&journeySubmitTrigger); err == nil {
		u.JourneySubmitTrigger = journeySubmitTrigger
		u.Type = AnyTriggerTypeJourneySubmitTrigger
		return nil
	}

	apiSubmissionTrigger := new(APISubmissionTrigger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&apiSubmissionTrigger); err == nil {
		u.APISubmissionTrigger = apiSubmissionTrigger
		u.Type = AnyTriggerTypeAPISubmissionTrigger
		return nil
	}

	entityOperationTrigger := new(EntityOperationTrigger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&entityOperationTrigger); err == nil {
		u.EntityOperationTrigger = entityOperationTrigger
		u.Type = AnyTriggerTypeEntityOperationTrigger
		return nil
	}

	activityTrigger := new(ActivityTrigger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&activityTrigger); err == nil {
		u.ActivityTrigger = activityTrigger
		u.Type = AnyTriggerTypeActivityTrigger
		return nil
	}

	entityManualTrigger := new(EntityManualTrigger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&entityManualTrigger); err == nil {
		u.EntityManualTrigger = entityManualTrigger
		u.Type = AnyTriggerTypeEntityManualTrigger
		return nil
	}

	receivedEmailTrigger := new(ReceivedEmailTrigger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&receivedEmailTrigger); err == nil {
		u.ReceivedEmailTrigger = receivedEmailTrigger
		u.Type = AnyTriggerTypeReceivedEmailTrigger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AnyTrigger) MarshalJSON() ([]byte, error) {
	if u.FrontendSubmitTrigger != nil {
		return json.Marshal(u.FrontendSubmitTrigger)
	}

	if u.JourneySubmitTrigger != nil {
		return json.Marshal(u.JourneySubmitTrigger)
	}

	if u.APISubmissionTrigger != nil {
		return json.Marshal(u.APISubmissionTrigger)
	}

	if u.EntityOperationTrigger != nil {
		return json.Marshal(u.EntityOperationTrigger)
	}

	if u.ActivityTrigger != nil {
		return json.Marshal(u.ActivityTrigger)
	}

	if u.EntityManualTrigger != nil {
		return json.Marshal(u.EntityManualTrigger)
	}

	if u.ReceivedEmailTrigger != nil {
		return json.Marshal(u.ReceivedEmailTrigger)
	}

	return nil, nil
}
