// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/pkg/utils"
)

type DollarOrType string

const (
	DollarOrTypeDiffAdded   DollarOrType = "DiffAdded"
	DollarOrTypeDiffUpdated DollarOrType = "DiffUpdated"
	DollarOrTypeDiffDeleted DollarOrType = "DiffDeleted"
)

type DollarOr struct {
	DiffAdded   *DiffAdded
	DiffUpdated *DiffUpdated
	DiffDeleted *DiffDeleted

	Type DollarOrType
}

func CreateDollarOrDiffAdded(diffAdded DiffAdded) DollarOr {
	typ := DollarOrTypeDiffAdded

	return DollarOr{
		DiffAdded: &diffAdded,
		Type:      typ,
	}
}

func CreateDollarOrDiffUpdated(diffUpdated DiffUpdated) DollarOr {
	typ := DollarOrTypeDiffUpdated

	return DollarOr{
		DiffUpdated: &diffUpdated,
		Type:        typ,
	}
}

func CreateDollarOrDiffDeleted(diffDeleted DiffDeleted) DollarOr {
	typ := DollarOrTypeDiffDeleted

	return DollarOr{
		DiffDeleted: &diffDeleted,
		Type:        typ,
	}
}

func (u *DollarOr) UnmarshalJSON(data []byte) error {

	diffAdded := new(DiffAdded)
	if err := utils.UnmarshalJSON(data, &diffAdded, "", true, true); err == nil {
		u.DiffAdded = diffAdded
		u.Type = DollarOrTypeDiffAdded
		return nil
	}

	diffUpdated := new(DiffUpdated)
	if err := utils.UnmarshalJSON(data, &diffUpdated, "", true, true); err == nil {
		u.DiffUpdated = diffUpdated
		u.Type = DollarOrTypeDiffUpdated
		return nil
	}

	diffDeleted := new(DiffDeleted)
	if err := utils.UnmarshalJSON(data, &diffDeleted, "", true, true); err == nil {
		u.DiffDeleted = diffDeleted
		u.Type = DollarOrTypeDiffDeleted
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DollarOr) MarshalJSON() ([]byte, error) {
	if u.DiffAdded != nil {
		return utils.MarshalJSON(u.DiffAdded, "", true)
	}

	if u.DiffUpdated != nil {
		return utils.MarshalJSON(u.DiffUpdated, "", true)
	}

	if u.DiffDeleted != nil {
		return utils.MarshalJSON(u.DiffDeleted, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OrConditionForDiff struct {
	DollarOr []DollarOr `json:"$or,omitempty"`
}

func (o *OrConditionForDiff) GetDollarOr() []DollarOr {
	if o == nil {
		return nil
	}
	return o.DollarOr
}
