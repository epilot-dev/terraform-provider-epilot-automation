// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/epilot-dev/terraform-provider-epilot-automation/internal/sdk/pkg/utils"
)

type NumericType string

const (
	NumericTypeStr     NumericType = "str"
	NumericTypeInteger NumericType = "integer"
)

type Numeric struct {
	Str     *string
	Integer *int64

	Type NumericType
}

func CreateNumericStr(str string) Numeric {
	typ := NumericTypeStr

	return Numeric{
		Str:  &str,
		Type: typ,
	}
}

func CreateNumericInteger(integer int64) Numeric {
	typ := NumericTypeInteger

	return Numeric{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *Numeric) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = NumericTypeStr
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = NumericTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Numeric) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type NumericCondition struct {
	Numeric []Numeric `json:"numeric,omitempty"`
}

func (o *NumericCondition) GetNumeric() []Numeric {
	if o == nil {
		return nil
	}
	return o.Numeric
}
