// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type AnyActionType string

const (
	AnyActionTypeMapEntityAction       AnyActionType = "MapEntityAction"
	AnyActionTypeTriggerWorkflowAction AnyActionType = "TriggerWorkflowAction"
	AnyActionTypeTriggerWebhookAction  AnyActionType = "TriggerWebhookAction"
	AnyActionTypeCreateDocumentAction  AnyActionType = "CreateDocumentAction"
	AnyActionTypeSendEmailAction       AnyActionType = "SendEmailAction"
	AnyActionTypeCartCheckoutAction    AnyActionType = "CartCheckoutAction"
	AnyActionTypeAutomationAction      AnyActionType = "AutomationAction"
)

type AnyAction struct {
	MapEntityAction       *MapEntityAction
	TriggerWorkflowAction *TriggerWorkflowAction
	TriggerWebhookAction  *TriggerWebhookAction
	CreateDocumentAction  *CreateDocumentAction
	SendEmailAction       *SendEmailAction
	CartCheckoutAction    *CartCheckoutAction
	AutomationAction      *AutomationAction

	Type AnyActionType
}

func CreateAnyActionMapEntityAction(mapEntityAction MapEntityAction) AnyAction {
	typ := AnyActionTypeMapEntityAction

	return AnyAction{
		MapEntityAction: &mapEntityAction,
		Type:            typ,
	}
}

func CreateAnyActionTriggerWorkflowAction(triggerWorkflowAction TriggerWorkflowAction) AnyAction {
	typ := AnyActionTypeTriggerWorkflowAction

	return AnyAction{
		TriggerWorkflowAction: &triggerWorkflowAction,
		Type:                  typ,
	}
}

func CreateAnyActionTriggerWebhookAction(triggerWebhookAction TriggerWebhookAction) AnyAction {
	typ := AnyActionTypeTriggerWebhookAction

	return AnyAction{
		TriggerWebhookAction: &triggerWebhookAction,
		Type:                 typ,
	}
}

func CreateAnyActionCreateDocumentAction(createDocumentAction CreateDocumentAction) AnyAction {
	typ := AnyActionTypeCreateDocumentAction

	return AnyAction{
		CreateDocumentAction: &createDocumentAction,
		Type:                 typ,
	}
}

func CreateAnyActionSendEmailAction(sendEmailAction SendEmailAction) AnyAction {
	typ := AnyActionTypeSendEmailAction

	return AnyAction{
		SendEmailAction: &sendEmailAction,
		Type:            typ,
	}
}

func CreateAnyActionCartCheckoutAction(cartCheckoutAction CartCheckoutAction) AnyAction {
	typ := AnyActionTypeCartCheckoutAction

	return AnyAction{
		CartCheckoutAction: &cartCheckoutAction,
		Type:               typ,
	}
}

func CreateAnyActionAutomationAction(automationAction AutomationAction) AnyAction {
	typ := AnyActionTypeAutomationAction

	return AnyAction{
		AutomationAction: &automationAction,
		Type:             typ,
	}
}

func (u *AnyAction) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	mapEntityAction := new(MapEntityAction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mapEntityAction); err == nil {
		u.MapEntityAction = mapEntityAction
		u.Type = AnyActionTypeMapEntityAction
		return nil
	}

	triggerWorkflowAction := new(TriggerWorkflowAction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&triggerWorkflowAction); err == nil {
		u.TriggerWorkflowAction = triggerWorkflowAction
		u.Type = AnyActionTypeTriggerWorkflowAction
		return nil
	}

	triggerWebhookAction := new(TriggerWebhookAction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&triggerWebhookAction); err == nil {
		u.TriggerWebhookAction = triggerWebhookAction
		u.Type = AnyActionTypeTriggerWebhookAction
		return nil
	}

	createDocumentAction := new(CreateDocumentAction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createDocumentAction); err == nil {
		u.CreateDocumentAction = createDocumentAction
		u.Type = AnyActionTypeCreateDocumentAction
		return nil
	}

	sendEmailAction := new(SendEmailAction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sendEmailAction); err == nil {
		u.SendEmailAction = sendEmailAction
		u.Type = AnyActionTypeSendEmailAction
		return nil
	}

	cartCheckoutAction := new(CartCheckoutAction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cartCheckoutAction); err == nil {
		u.CartCheckoutAction = cartCheckoutAction
		u.Type = AnyActionTypeCartCheckoutAction
		return nil
	}

	automationAction := new(AutomationAction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&automationAction); err == nil {
		u.AutomationAction = automationAction
		u.Type = AnyActionTypeAutomationAction
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AnyAction) MarshalJSON() ([]byte, error) {
	if u.MapEntityAction != nil {
		return json.Marshal(u.MapEntityAction)
	}

	if u.TriggerWorkflowAction != nil {
		return json.Marshal(u.TriggerWorkflowAction)
	}

	if u.TriggerWebhookAction != nil {
		return json.Marshal(u.TriggerWebhookAction)
	}

	if u.CreateDocumentAction != nil {
		return json.Marshal(u.CreateDocumentAction)
	}

	if u.SendEmailAction != nil {
		return json.Marshal(u.SendEmailAction)
	}

	if u.CartCheckoutAction != nil {
		return json.Marshal(u.CartCheckoutAction)
	}

	if u.AutomationAction != nil {
		return json.Marshal(u.AutomationAction)
	}

	return nil, nil
}
