// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SendEmailConfigAttachmentsSourceFilterDocumentType - Filter by a specific document type (e.g. document)
type SendEmailConfigAttachmentsSourceFilterDocumentType string

const (
	SendEmailConfigAttachmentsSourceFilterDocumentTypeDocument     SendEmailConfigAttachmentsSourceFilterDocumentType = "document"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeText         SendEmailConfigAttachmentsSourceFilterDocumentType = "text"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeImage        SendEmailConfigAttachmentsSourceFilterDocumentType = "image"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeVideo        SendEmailConfigAttachmentsSourceFilterDocumentType = "video"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeAudio        SendEmailConfigAttachmentsSourceFilterDocumentType = "audio"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeSpreadsheet  SendEmailConfigAttachmentsSourceFilterDocumentType = "spreadsheet"
	SendEmailConfigAttachmentsSourceFilterDocumentTypePresentation SendEmailConfigAttachmentsSourceFilterDocumentType = "presentation"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeFont         SendEmailConfigAttachmentsSourceFilterDocumentType = "font"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeArchive      SendEmailConfigAttachmentsSourceFilterDocumentType = "archive"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeApplication  SendEmailConfigAttachmentsSourceFilterDocumentType = "application"
	SendEmailConfigAttachmentsSourceFilterDocumentTypeUnknown      SendEmailConfigAttachmentsSourceFilterDocumentType = "unknown"
)

func (e SendEmailConfigAttachmentsSourceFilterDocumentType) ToPointer() *SendEmailConfigAttachmentsSourceFilterDocumentType {
	return &e
}

func (e *SendEmailConfigAttachmentsSourceFilterDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "document":
		fallthrough
	case "text":
		fallthrough
	case "image":
		fallthrough
	case "video":
		fallthrough
	case "audio":
		fallthrough
	case "spreadsheet":
		fallthrough
	case "presentation":
		fallthrough
	case "font":
		fallthrough
	case "archive":
		fallthrough
	case "application":
		fallthrough
	case "unknown":
		*e = SendEmailConfigAttachmentsSourceFilterDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SendEmailConfigAttachmentsSourceFilterDocumentType: %v", v)
	}
}

// SendEmailConfigAttachmentsSourceFilter - Specify filters to match file entities related to main entity
type SendEmailConfigAttachmentsSourceFilter struct {
	// Filter by a specific relation attribute on the main entity
	Attribute *string `json:"attribute,omitempty"`
	// Filter by a specific document type (e.g. document)
	DocumentType *SendEmailConfigAttachmentsSourceFilterDocumentType `json:"document_type,omitempty"`
	// Match by filename. Regex syntax supported
	FilenameRegex *string `json:"filename_regex,omitempty"`
	// Limit files to maximum number (default, all matched file relations)
	Limit *int64 `json:"limit,omitempty"`
	// Filter by relation tag (label) on the main entity
	RelationTag *string `json:"relation_tag,omitempty"`
	// Picks main entity as file (only works if source entity is a file)
	Self *bool `json:"self,omitempty"`
	// Filter by a specific tag on the related file entity
	Tag *string `json:"tag,omitempty"`
}

type SendEmailConfigAttachments struct {
	// Specify filters to match file entities related to main entity
	SourceFilter *SendEmailConfigAttachmentsSourceFilter `json:"source_filter,omitempty"`
}

type SendEmailConfigLanguageCode string

const (
	SendEmailConfigLanguageCodeDe SendEmailConfigLanguageCode = "de"
	SendEmailConfigLanguageCodeEn SendEmailConfigLanguageCode = "en"
)

func (e SendEmailConfigLanguageCode) ToPointer() *SendEmailConfigLanguageCode {
	return &e
}

func (e *SendEmailConfigLanguageCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "de":
		fallthrough
	case "en":
		*e = SendEmailConfigLanguageCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SendEmailConfigLanguageCode: %v", v)
	}
}

type SendEmailConfig struct {
	// Include extra file attachments in sent email.
	//
	// Attachments in email template will be sent regardless of this configuration.
	//
	Attachments     []SendEmailConfigAttachments `json:"attachments,omitempty"`
	EmailTemplateID *string                      `json:"email_template_id,omitempty"`
	LanguageCode    *SendEmailConfigLanguageCode `json:"language_code,omitempty"`
}
