// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type MapEntityConfigMappingAttributesType string

const (
	MapEntityConfigMappingAttributesTypeMappingAttributeV2 MapEntityConfigMappingAttributesType = "MappingAttributeV2"
	MapEntityConfigMappingAttributesTypeMappingAttribute   MapEntityConfigMappingAttributesType = "MappingAttribute"
)

type MapEntityConfigMappingAttributes struct {
	MappingAttributeV2 *MappingAttributeV2
	MappingAttribute   *MappingAttribute

	Type MapEntityConfigMappingAttributesType
}

func CreateMapEntityConfigMappingAttributesMappingAttributeV2(mappingAttributeV2 MappingAttributeV2) MapEntityConfigMappingAttributes {
	typ := MapEntityConfigMappingAttributesTypeMappingAttributeV2

	return MapEntityConfigMappingAttributes{
		MappingAttributeV2: &mappingAttributeV2,
		Type:               typ,
	}
}

func CreateMapEntityConfigMappingAttributesMappingAttribute(mappingAttribute MappingAttribute) MapEntityConfigMappingAttributes {
	typ := MapEntityConfigMappingAttributesTypeMappingAttribute

	return MapEntityConfigMappingAttributes{
		MappingAttribute: &mappingAttribute,
		Type:             typ,
	}
}

func (u *MapEntityConfigMappingAttributes) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	mappingAttributeV2 := new(MappingAttributeV2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mappingAttributeV2); err == nil {
		u.MappingAttributeV2 = mappingAttributeV2
		u.Type = MapEntityConfigMappingAttributesTypeMappingAttributeV2
		return nil
	}

	mappingAttribute := new(MappingAttribute)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mappingAttribute); err == nil {
		u.MappingAttribute = mappingAttribute
		u.Type = MapEntityConfigMappingAttributesTypeMappingAttribute
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u MapEntityConfigMappingAttributes) MarshalJSON() ([]byte, error) {
	if u.MappingAttributeV2 != nil {
		return json.Marshal(u.MappingAttributeV2)
	}

	if u.MappingAttribute != nil {
		return json.Marshal(u.MappingAttribute)
	}

	return nil, nil
}

type MapEntityConfig struct {
	// Relation attribute on the main entity where the target entity will be linked. Set to false to disable linkback
	//
	LinkbackRelationAttribute *string `json:"linkback_relation_attribute,omitempty"`
	// Relation tags (labels) to include in main entity linkback relation attribute
	LinkbackRelationTags []string `json:"linkback_relation_tags,omitempty"`
	// Attribute mappings
	MappingAttributes []MapEntityConfigMappingAttributes `json:"mapping_attributes,omitempty"`
	MappingConfig     *MappingConfigRef                  `json:"mapping_config,omitempty"`
	// Relation mappings
	RelationAttributes []RelationAttribute `json:"relation_attributes,omitempty"`
	// Schema of target entity
	TargetSchema string `json:"target_schema"`
	// Unique key for target entity (see upsertEntity of Entity API)
	TargetUnique []string `json:"target_unique,omitempty"`
}
